<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>福田口岸等口岸</title>
    <link href="/2025/09/09/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E7%A6%8F%E7%94%B0%E5%8F%A3%E5%B2%B8%E7%AD%89%E5%8F%A3%E5%B2%B8/"/>
    <url>/2025/09/09/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E7%A6%8F%E7%94%B0%E5%8F%A3%E5%B2%B8%E7%AD%89%E5%8F%A3%E5%B2%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="福田口岸等口岸"><a href="#福田口岸等口岸" class="headerlink" title="福田口岸等口岸"></a>福田口岸等口岸</h1><p>在这里开始写作…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第八次修改记录</title>
    <link href="/2025/09/09/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%AC%AC%E5%85%AB%E6%AC%A1%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/09/09/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%AC%AC%E5%85%AB%E6%AC%A1%E4%BF%AE%E6%94%B9%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="第八次修改记录"><a href="#第八次修改记录" class="headerlink" title="第八次修改记录"></a>第八次修改记录</h1><p><strong>日期</strong>: 2025-09-09</p><h2 id="修改目标"><a href="#修改目标" class="headerlink" title="修改目标"></a>修改目标</h2><p>解决移动端无法拉取仓库分支和读取文章的问题，确保在手机端也能正常使用所有功能。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>根据用户反馈，电脑端功能正常但手机端无法拉取仓库分支和读取文章，问题可能包括：</p><ol><li><strong>移动端适配问题</strong>：虽然界面元素显示正常，但事件绑定或API调用在移动端可能存在问题</li><li><strong>触摸事件处理</strong>：移动端主要使用触摸操作，可能需要特殊处理</li><li><strong>屏幕尺寸适配</strong>：某些元素在小屏幕上可能无法正确显示或交互</li><li><strong>网络请求问题</strong>：移动端网络环境可能影响API调用</li></ol><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><h3 id="1-前端代码-templates-admin-html"><a href="#1-前端代码-templates-admin-html" class="headerlink" title="1. 前端代码 (templates&#x2F;admin.html)"></a>1. 前端代码 (<a href="file:///Users/libao/%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/%E7%A8%8B%E5%BA%8F%E5%8A%9F%E8%83%BD%E6%95%B4%E5%90%88/C/templates/admin.html">templates&#x2F;admin.html</a>)</h3><h4 id="移动端功能增强："><a href="#移动端功能增强：" class="headerlink" title="移动端功能增强："></a>移动端功能增强：</h4><ul><li>增强了移动端设备检测机制，使用更全面的用户代理检测</li><li>改进了移动端菜单同步机制，确保内容正确更新</li><li>为移动端元素添加了专门的触摸事件处理（touchstart），解决点击无响应问题</li><li>优化了移动端文件列表显示和交互</li></ul><h4 id="事件处理优化："><a href="#事件处理优化：" class="headerlink" title="事件处理优化："></a>事件处理优化：</h4><ul><li>重新设计了移动端事件绑定机制，避免事件重复绑定问题</li><li>为文件和文件夹元素添加了独立的触摸和点击事件处理</li><li>增加了移动端专用的文件选择和文件夹切换处理函数</li></ul><h4 id="UI-UX优化："><a href="#UI-UX优化：" class="headerlink" title="UI&#x2F;UX优化："></a>UI&#x2F;UX优化：</h4><ul><li>添加了移动端滚动优化（-webkit-overflow-scrolling: touch）</li><li>移除了触摸高亮效果（-webkit-tap-highlight-color: transparent）</li><li>优化了移动端文件项的显示样式，确保在小屏幕上正确显示</li><li>改进了移动端菜单按钮的样式，确保在各种设备上都能正确显示</li></ul><h4 id="功能增强："><a href="#功能增强：" class="headerlink" title="功能增强："></a>功能增强：</h4><ul><li>增加了移动端文件列表更新机制，确保内容同步</li><li>添加了移动端专用的文件和文件夹事件绑定函数</li><li>增强了错误处理和用户提示，确保移动端用户能获得清晰的反馈</li></ul><h3 id="2-API调用优化"><a href="#2-API调用优化" class="headerlink" title="2. API调用优化"></a>2. API调用优化</h3><ul><li>增强了所有API调用的错误处理，确保移动端网络不稳定时也能正确提示</li><li>添加了加载指示器，改善用户体验</li><li>优化了仓库和分支选择的移动端体验</li></ul><h2 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h2><ul><li><input checked="" disabled="" type="checkbox"> 修复了移动端适配问题，确保在各种移动设备上正常显示</li><li><input checked="" disabled="" type="checkbox"> 解决了触摸事件处理问题，移动端点击和触摸操作正常响应</li><li><input checked="" disabled="" type="checkbox"> 优化了屏幕尺寸适配，确保在小屏幕上正确显示和交互</li><li><input checked="" disabled="" type="checkbox"> 增强了网络请求处理，确保移动端网络环境下API调用稳定</li><li><input checked="" disabled="" type="checkbox"> 程序可以成功编译和运行</li><li><input checked="" disabled="" type="checkbox"> 在本地测试环境中移动端功能正常</li></ul><h2 id="后续建议"><a href="#后续建议" class="headerlink" title="后续建议"></a>后续建议</h2><ol><li>在真实移动设备上进行更全面的测试</li><li>添加更多移动端专用的交互优化</li><li>考虑添加离线功能支持</li><li>进一步优化移动端性能</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/09/09/sdfs%E6%A3%92%E7%90%83/"/>
    <url>/2025/09/09/sdfs%E6%A3%92%E7%90%83/</url>
    
    <content type="html"><![CDATA[<h1 id="你帮我认真检索一下A和B两"><a href="#你帮我认真检索一下A和B两" class="headerlink" title="你帮我认真检索一下A和B两"></a>你帮我认真检索一下A和B两</h1><p>个程序有什么不同的地方分析出来告诉我.</p><p><a href="https://shy.cfapps.us10-001.hana.ondemand.com/">https://shy.cfapps.us10-001.hana.ondemand.com</a></p><p><a href="https://shy.cfapps.us10-001.hana.ondemand.com/">https://shy.cfapps.us10-001.hana.ondemand.com</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试终端输入命令</title>
    <link href="/2025/09/09/%E6%B5%8B%E8%AF%95%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/09/09/%E6%B5%8B%E8%AF%95%E7%BB%88%E7%AB%AF%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="测试终端输入命令"><a href="#测试终端输入命令" class="headerlink" title="测试终端输入命令"></a>测试终端输入命令</h1><p>curl -s “<a href="http://127.0.0.1:9405/">http://127.0.0.1:9405/</a>“ | grep -A 3 -B 3 “qr-image” | head -15</p><p>启动玩客云用到的命令</p><p>chmod +x lan-to-go-openwrt-armv7<br>.&#x2F;lan-to-go-openwrt-armv7</p><p>chmod +x lan-to-go-openwrt-armv7-fixed<br>.&#x2F;lan-to-go-openwrt-armv7-fixed</p><p>setsid &#x2F;root&#x2F;lan-to-go-openwrt-armv7-fixed &gt; &#x2F;root&#x2F;lan-to-go.log 2&gt;&amp;1 &amp;<br>后台可用上面这行</p><h1 id="Put-your-custom-commands-here-that-should-be-executed-once"><a href="#Put-your-custom-commands-here-that-should-be-executed-once" class="headerlink" title="Put your custom commands here that should be executed once"></a>Put your custom commands here that should be executed once</h1><h1 id="the-system-init-finished-By-default-this-file-does-nothing"><a href="#the-system-init-finished-By-default-this-file-does-nothing" class="headerlink" title="the system init finished. By default this file does nothing."></a>the system init finished. By default this file does nothing.</h1><p>#!&#x2F;bin&#x2F;sh</p><h1 id="延迟启动-10-秒，防止被系统清理"><a href="#延迟启动-10-秒，防止被系统清理" class="headerlink" title="延迟启动 10 秒，防止被系统清理"></a>延迟启动 10 秒，防止被系统清理</h1><p>cd &#x2F;root<br>(sleep 10; setsid &#x2F;root&#x2F;lan-to-go-openwrt-armv7-fixed &gt; &#x2F;root&#x2F;lan-to-go.log 2&gt;&amp;1) &amp;<br>exit 0</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>123测试</title>
    <link href="/2025/09/07/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/123%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/09/07/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/123%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>112236544</p>]]></content>
    
    
    <categories>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>8899</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>飞牛OS 升级失败排障与恢复全攻略（含一键脚本）</title>
    <link href="/2025/09/02/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E9%A3%9E%E7%89%9BOS%E5%8D%87%E7%BA%A7%E5%A4%B1%E8%B4%A5%E6%8E%92%E9%9A%9C%E4%B8%8E%E6%81%A2%E5%A4%8D%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <url>/2025/09/02/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E9%A3%9E%E7%89%9BOS%E5%8D%87%E7%BA%A7%E5%A4%B1%E8%B4%A5%E6%8E%92%E9%9A%9C%E4%B8%8E%E6%81%A2%E5%A4%8D%E5%85%A8%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="飞牛OS-升级失败排障与恢复全攻略（含一键脚本）"><a href="#飞牛OS-升级失败排障与恢复全攻略（含一键脚本）" class="headerlink" title="飞牛OS 升级失败排障与恢复全攻略（含一键脚本）"></a>飞牛OS 升级失败排障与恢复全攻略（含一键脚本）</h1><blockquote><p>适用系统：飞牛OS（基于 Debian 12 Bookworm）<br>作者：实战整理（根据一次真实排障会话复盘）<br>更新日期：2025-09-01</p></blockquote><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%8E%B0%E8%B1%A1%E5%9B%9E%E9%A1%BE">现象回顾</a></li><li><a href="#%E6%A0%B9%E5%9B%A0%E5%88%86%E6%9E%90">根因分析</a></li><li><a href="#%E6%81%A2%E5%A4%8D%E6%80%9D%E8%B7%AF%E6%80%BB%E8%A7%88">恢复思路总览</a></li><li><a href="#%E6%96%B9%E6%A1%88a%E4%BF%9D%E7%95%99%E9%A3%9E%E7%89%9Bos%E5%AE%9A%E5%88%B6%E5%86%85%E6%A0%B8%E6%8E%A8%E8%8D%90">方案A：保留飞牛OS定制内核（推荐）</a></li><li><a href="#%E6%96%B9%E6%A1%88b%E5%88%87%E5%9B%9E-debian-%E5%AE%98%E6%96%B9%E5%86%85%E6%A0%B8%E5%8F%AF%E9%80%89">方案B：切回 Debian 官方内核（可选）</a></li><li><a href="#%E6%9C%AC%E6%AC%A1%E4%BC%9A%E8%AF%9D%E5%87%BA%E7%8E%B0%E7%9A%84%E5%85%B8%E5%9E%8B%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E6%B3%95%E9%80%9F%E6%9F%A5">本次会话出现的典型报错与解法速查</a></li><li><a href="#%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC">一键脚本</a></li><li><a href="#%E6%9C%AF%E8%AF%AD--%E5%B0%8F%E8%B4%B4%E5%A3%AB">术语 &amp; 小贴士</a></li><li><a href="#%E9%99%84%E5%BD%95%E8%87%AA%E6%A3%80%E4%B8%8E%E9%AA%8C%E8%AF%81%E5%91%BD%E4%BB%A4">附录：自检与验证命令</a></li></ul><hr><h2 id="现象回顾"><a href="#现象回顾" class="headerlink" title="现象回顾"></a>现象回顾</h2><p>执行一系列升级相关命令后，系统出现：</p><ul><li><code>apt upgrade</code>&#x2F;<code>apt full-upgrade</code> 过程中反复提示 <strong>Unmet dependencies</strong>、**E: Sub-process &#x2F;usr&#x2F;bin&#x2F;dpkg returned an error code (1)**。</li><li><code>linux-headers-6.1.0-38-amd64</code> 与 <code>linux-headers-amd64</code> <strong>未配置成功</strong>，导致后续升级被阻塞。</li><li><code>qemu-system-gui</code> 依赖 <strong>7.2+dfsg-7+deb12u13</strong>，而系统里已有 <strong>…deb12u15</strong>，出现 <strong>版本不一致</strong>。</li><li>早期还出现过 <code>python3.11-dev</code> &#x2F; <code>libpython3.11-dev</code> 的 <strong>deb12u5 与 deb12u6</strong> <strong>小版本错位</strong>。</li><li><code>apt</code> 显示 <strong>kept back（搁置升级）</strong> 包，如 <code>libc6</code>、<code>samba</code> 系列、<code>linux-image-amd64</code> 等。</li><li><code>uname -r</code> 显示正在运行 <strong><code>6.12.18-trim</code></strong> —— 这是 <strong>飞牛OS定制内核</strong>，<strong>非</strong> Debian 官方 <code>6.1.x</code> LTS 内核。</li></ul><p>这些现象叠加，让系统陷入“<strong>定制内核 + 官方 headers 元包</strong>”的矛盾，最终导致升级失败。</p><hr><h2 id="根因分析"><a href="#根因分析" class="headerlink" title="根因分析"></a>根因分析</h2><ol><li><p><strong>内核&#x2F;头文件不匹配</strong>  </p><ul><li>运行内核：<code>6.12.18-trim</code>（飞牛OS定制）  </li><li>官方元包：<code>linux-headers-amd64</code> 指向 Debian LTS 内核头，如 <code>6.1.0-38</code>  </li><li>由于官方仓库 <strong>没有</strong> <code>6.12.18-trim</code> 对应的 headers，<code>dpkg</code> 无法完成配置 → 升级被卡。</li></ul></li><li><p><strong>多源混用导致“版本错位”</strong>  </p><ul><li>源列表包含：USTC Debian 镜像、Debian 安全更新、Backports、Docker、ZeroTier、第三方（<code>pkg.ltec.ch</code>）等。  </li><li>同一软件不同源版本推进节奏不同，容易出现 <strong>u13 与 u15</strong> 类似的错位（如 QEMU）。</li></ul></li><li><p><strong>核心库&#x2F;服务大版本升级需要 full-upgrade</strong>  </p><ul><li>如 <code>libc6</code>、<code>samba</code> 等包，普通 <code>upgrade</code> 可能被 <strong>kept back</strong>，需要 <code>full-upgrade</code>&#x2F;<code>dist-upgrade</code> 处理。</li></ul></li><li><p><strong>早期 Python 开发包小版本对不齐</strong>  </p><ul><li><code>python3.11-dev/libpython3.11-dev</code> 的 <code>deb12u5</code> vs <code>deb12u6</code> → 手动对齐或 <code>--fix-broken</code> 可解。</li></ul></li></ol><hr><h2 id="恢复思路总览"><a href="#恢复思路总览" class="headerlink" title="恢复思路总览"></a>恢复思路总览</h2><ul><li><strong>核心原则：先让 dpkg&#x2F;apt 回到“可运转”的健康态</strong>，再分两条路：<ul><li><strong>方案A（推荐）</strong>：继续使用飞牛OS定制内核，<strong>移除</strong> Debian 的 headers 元包，<strong>避免</strong>未来再次被尝试安装；升级其余包。</li><li><strong>方案B</strong>：切换到 Debian 官方内核（<code>linux-image-amd64 + linux-headers-amd64</code>），以后按 Debian 节奏升级。</li></ul></li></ul><p>两种方案都需要先做 <strong>清理 → 修复 → 升级 → 验证</strong>。</p><hr><h2 id="方案A：保留飞牛OS定制内核（推荐）"><a href="#方案A：保留飞牛OS定制内核（推荐）" class="headerlink" title="方案A：保留飞牛OS定制内核（推荐）"></a>方案A：保留飞牛OS定制内核（推荐）</h2><blockquote><p>适合：你想继续使用 <code>6.12.18-trim</code>，不编译内核模块或飞牛仓库已提供匹配 headers。</p></blockquote><h3 id="步骤-1-基础自检（了解现状，不改变系统）"><a href="#步骤-1-基础自检（了解现状，不改变系统）" class="headerlink" title="步骤 1. 基础自检（了解现状，不改变系统）"></a>步骤 1. 基础自检（了解现状，不改变系统）</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-24wv2pmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-24wv2pmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br>apt list --upgradable 2&gt;/dev/null | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br>dpkg -l | grep -E <span class="hljs-string">&#x27;linux-(image|headers)&#x27;</span> | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br></code></pre></td></tr></table></div></figure><h3 id="步骤-2-移除冲突-未配置成功的官方-headers-包"><a href="#步骤-2-移除冲突-未配置成功的官方-headers-包" class="headerlink" title="步骤 2. 移除冲突&#x2F;未配置成功的官方 headers 包"></a>步骤 2. 移除冲突&#x2F;未配置成功的官方 headers 包</h3><blockquote><p>如果普通移除失败，可用 <code>--force-remove-reinstreq</code>。</p></blockquote><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wcrru3mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-wcrru3mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dpkg --remove --force-remove-reinstreq linux-headers-6.1.0-38-amd64 linux-headers-amd64 || <span class="hljs-literal">true</span><br><span class="hljs-built_in">sudo</span> apt-get remove --purge linux-headers-6.1.0-38-amd64 linux-headers-amd64 -y || <span class="hljs-literal">true</span><br></code></pre></td></tr></table></div></figure><h3 id="步骤-3-修复-dpkg-依赖的损坏状态"><a href="#步骤-3-修复-dpkg-依赖的损坏状态" class="headerlink" title="步骤 3. 修复 dpkg&#x2F;依赖的损坏状态"></a>步骤 3. 修复 dpkg&#x2F;依赖的损坏状态</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-magbgnmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-magbgnmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dpkg --configure -a<br><span class="hljs-built_in">sudo</span> apt-get -f install -y<br><span class="hljs-built_in">sudo</span> apt --fix-broken install -y<br></code></pre></td></tr></table></div></figure><h3 id="步骤-4-锁定官方内核元包，避免再次被拉回"><a href="#步骤-4-锁定官方内核元包，避免再次被拉回" class="headerlink" title="步骤 4. 锁定官方内核元包，避免再次被拉回"></a>步骤 4. 锁定官方内核元包，避免再次被拉回</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9pjz02mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-9pjz02mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-mark hold linux-image-amd64 linux-headers-amd64<br></code></pre></td></tr></table></div></figure><h3 id="步骤-5-升级其余包（含-kept-back）"><a href="#步骤-5-升级其余包（含-kept-back）" class="headerlink" title="步骤 5. 升级其余包（含 kept back）"></a>步骤 5. 升级其余包（含 kept back）</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ddifqrmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-ddifqrmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt full-upgrade -y<br></code></pre></td></tr></table></div></figure><h3 id="步骤-6-（可选）安装与当前内核匹配的-headers"><a href="#步骤-6-（可选）安装与当前内核匹配的-headers" class="headerlink" title="步骤 6. （可选）安装与当前内核匹配的 headers"></a>步骤 6. （可选）安装与当前内核匹配的 headers</h3><blockquote><p>仅当你需要 DKMS&#x2F;驱动编译等功能时：</p></blockquote><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-e21n72mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-e21n72mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找是否存在匹配 6.12.* 的 headers 包</span><br>apt search linux-headers-6.12 | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br><br><span class="hljs-comment"># 若仓库提供，安装匹配内核的头文件（示例）</span><br><span class="hljs-built_in">sudo</span> apt install linux-headers-$(<span class="hljs-built_in">uname</span> -r) -y<br></code></pre></td></tr></table></div></figure><h3 id="步骤-7-清理-验证"><a href="#步骤-7-清理-验证" class="headerlink" title="步骤 7. 清理 &amp; 验证"></a>步骤 7. 清理 &amp; 验证</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zes4c7mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-zes4c7mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt autoremove -y<br><span class="hljs-built_in">sudo</span> apt clean<br><span class="hljs-built_in">uname</span> -r<br><span class="hljs-built_in">sudo</span> apt list --upgradable 2&gt;/dev/null | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br></code></pre></td></tr></table></div></figure><hr><h2 id="方案B：切回-Debian-官方内核（可选）"><a href="#方案B：切回-Debian-官方内核（可选）" class="headerlink" title="方案B：切回 Debian 官方内核（可选）"></a>方案B：切回 Debian 官方内核（可选）</h2><blockquote><p>适合：想完全按 Debian 节奏升级、需要稳定的官方 headers 生态。</p></blockquote><h3 id="步骤-1-安装官方-LTS-内核与-headers"><a href="#步骤-1-安装官方-LTS-内核与-headers" class="headerlink" title="步骤 1. 安装官方 LTS 内核与 headers"></a>步骤 1. 安装官方 LTS 内核与 headers</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o8jm2bmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-o8jm2bmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install -y linux-image-amd64 linux-headers-amd64<br></code></pre></td></tr></table></div></figure><h3 id="步骤-2-重启并验证"><a href="#步骤-2-重启并验证" class="headerlink" title="步骤 2. 重启并验证"></a>步骤 2. 重启并验证</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-16zh3vmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-16zh3vmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br><span class="hljs-comment"># 重启后：</span><br><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></div></figure><h3 id="步骤-3-升级剩余包-清理"><a href="#步骤-3-升级剩余包-清理" class="headerlink" title="步骤 3. 升级剩余包 &amp; 清理"></a>步骤 3. 升级剩余包 &amp; 清理</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-uqzhh8mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-uqzhh8mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt full-upgrade -y<br><span class="hljs-built_in">sudo</span> apt autoremove -y<br><span class="hljs-built_in">sudo</span> apt clean<br></code></pre></td></tr></table></div></figure><blockquote><p>若以后想避免被切回飞牛定制内核，可将飞牛相关内核包 <code>apt-mark hold</code>；反之亦然。</p></blockquote><hr><h2 id="本次会话出现的典型报错与解法速查"><a href="#本次会话出现的典型报错与解法速查" class="headerlink" title="本次会话出现的典型报错与解法速查"></a>本次会话出现的典型报错与解法速查</h2><h3 id="1-dpkg-错误码-1-未配置成功"><a href="#1-dpkg-错误码-1-未配置成功" class="headerlink" title="1) dpkg 错误码 1 &#x2F; 未配置成功"></a>1) dpkg 错误码 1 &#x2F; 未配置成功</h3><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l782zamfcwb3cr"></i><span>APACHE</span><div class="collapse show" id="collapse-l782zamfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E</span>: Sub-process /usr/bin/dpkg returned an error code (<span class="hljs-number">1</span>)<br><span class="hljs-attribute">linux</span>-headers-<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-<span class="hljs-number">38</span>-amd64 is not configured yet<br></code></pre></td></tr></table></div></figure><p><strong>解法</strong>：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jpz351mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-jpz351mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dpkg --remove --force-remove-reinstreq linux-headers-6.1.0-38-amd64 linux-headers-amd64<br><span class="hljs-built_in">sudo</span> dpkg --configure -a<br><span class="hljs-built_in">sudo</span> apt --fix-broken install -y<br></code></pre></td></tr></table></div></figure><h3 id="2-QEMU-依赖不一致（u13-vs-u15）"><a href="#2-QEMU-依赖不一致（u13-vs-u15）" class="headerlink" title="2) QEMU 依赖不一致（u13 vs u15）"></a>2) QEMU 依赖不一致（u13 vs u15）</h3><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0tjjlwmfcwb3cr"></i><span>VIM</span><div class="collapse show" id="collapse-0tjjlwmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">qemu-<span class="hljs-built_in">system</span>-<span class="hljs-keyword">gui</span> : Depends: qemu-<span class="hljs-built_in">system</span>-x86 (= ...deb12u13) but ...deb12u15 <span class="hljs-keyword">is</span> installed<br></code></pre></td></tr></table></div></figure><p><strong>解法（选一）</strong>：  </p><ul><li>统一升级：<code>sudo apt install qemu-system-gui qemu-system-x86 qemu-system-arm qemu-system-mips qemu-system-ppc qemu-system-sparc qemu-system-misc -y</code>  </li><li>不需要 GUI 时移除：<code>sudo apt remove --purge qemu-system-gui -y</code></li></ul><h3 id="3-Python-开发包小版本错位（deb12u5-vs-deb12u6）"><a href="#3-Python-开发包小版本错位（deb12u5-vs-deb12u6）" class="headerlink" title="3) Python 开发包小版本错位（deb12u5 vs deb12u6）"></a>3) Python 开发包小版本错位（deb12u5 vs deb12u6）</h3><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yu11jqmfcwb3cr"></i><span>ADA</span><div class="collapse show" id="collapse-yu11jqmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">libpython3.<span class="hljs-number">11</span>-dev : <span class="hljs-type">Depends</span>: libpython3.<span class="hljs-number">11</span>-stdlib (= ...u5) but ...u6 <span class="hljs-keyword">is</span> installed<br></code></pre></td></tr></table></div></figure><p><strong>解法</strong>：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-btfwt6mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-btfwt6mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install -y python3.11-dev libpython3.11-dev  <span class="hljs-comment"># 让两者对齐为同一 u*</span><br><span class="hljs-comment"># 或：sudo apt --fix-broken install -y</span><br></code></pre></td></tr></table></div></figure><h3 id="4-kept-back（搁置升级）"><a href="#4-kept-back（搁置升级）" class="headerlink" title="4) kept back（搁置升级）"></a>4) kept back（搁置升级）</h3><ul><li>出现在 <code>libc6</code>、<code>samba</code>、<code>linux-image-amd64</code> 等包<br><strong>解法</strong>：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-87pkromfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-87pkromfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt full-upgrade -y<br><span class="hljs-comment"># 若仅想升级非内核包，可手动点名安装除 linux-image-amd64 外的其余包</span><br></code></pre></td></tr></table></div></figure></li></ul><h3 id="5-boot-或根分区空间不足（可能性）"><a href="#5-boot-或根分区空间不足（可能性）" class="headerlink" title="5) /boot 或根分区空间不足（可能性）"></a>5) <code>/boot</code> 或根分区空间不足（可能性）</h3><p><strong>排查</strong>：<code>df -h</code><br><strong>解法</strong>：清理旧内核镜像、<code>apt autoremove</code>、删除缓存 <code>apt clean</code>。</p><hr><h2 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h2><blockquote><p>将以下脚本保存并执行，可一键完成关键修复步骤。</p></blockquote><h3 id="A1-保留飞牛内核：fix-keep-flyos-kernel-sh"><a href="#A1-保留飞牛内核：fix-keep-flyos-kernel-sh" class="headerlink" title="A1) 保留飞牛内核：fix_keep_flyos_kernel.sh"></a>A1) 保留飞牛内核：<code>fix_keep_flyos_kernel.sh</code></h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ak1d53mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-ak1d53mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-built_in">set</span> -euo pipefail<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Running kernel:&quot;</span><br><span class="hljs-built_in">uname</span> -r || <span class="hljs-literal">true</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Step 1: Remove conflicting Debian headers (if any)&quot;</span><br><span class="hljs-built_in">sudo</span> dpkg --remove --force-remove-reinstreq linux-headers-6.1.0-38-amd64 linux-headers-amd64 || <span class="hljs-literal">true</span><br><span class="hljs-built_in">sudo</span> apt-get remove --purge -y linux-headers-6.1.0-38-amd64 linux-headers-amd64 || <span class="hljs-literal">true</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Step 2: Repair dpkg/apt state&quot;</span><br><span class="hljs-built_in">sudo</span> dpkg --configure -a || <span class="hljs-literal">true</span><br><span class="hljs-built_in">sudo</span> apt-get -f install -y || <span class="hljs-literal">true</span><br><span class="hljs-built_in">sudo</span> apt --fix-broken install -y || <span class="hljs-literal">true</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Step 3: Hold Debian kernel meta packages to avoid reintroduction&quot;</span><br><span class="hljs-built_in">sudo</span> apt-mark hold linux-image-amd64 linux-headers-amd64 || <span class="hljs-literal">true</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Step 4: Upgrade remaining packages&quot;</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt full-upgrade -y || <span class="hljs-literal">true</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Step 5: Cleanup&quot;</span><br><span class="hljs-built_in">sudo</span> apt autoremove -y || <span class="hljs-literal">true</span><br><span class="hljs-built_in">sudo</span> apt clean || <span class="hljs-literal">true</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Done. Current kernel:&quot;</span><br><span class="hljs-built_in">uname</span> -r || <span class="hljs-literal">true</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Upgradable list (top 50):&quot;</span><br>apt list --upgradable 2&gt;/dev/null | sed -n <span class="hljs-string">&#x27;1,50p&#x27;</span> || <span class="hljs-literal">true</span><br></code></pre></td></tr></table></div></figure><h3 id="B1-切回-Debian-官方内核：switch-to-debian-kernel-sh"><a href="#B1-切回-Debian-官方内核：switch-to-debian-kernel-sh" class="headerlink" title="B1) 切回 Debian 官方内核：switch_to_debian_kernel.sh"></a>B1) 切回 Debian 官方内核：<code>switch_to_debian_kernel.sh</code></h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-r5zi35mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-r5zi35mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-built_in">set</span> -euo pipefail<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Install Debian LTS kernel + headers&quot;</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install -y linux-image-amd64 linux-headers-amd64<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;[i] Suggest reboot now to switch kernel:&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    sudo reboot&quot;</span><br></code></pre></td></tr></table></div></figure><blockquote><p>用法：<br><code>chmod +x fix_keep_flyos_kernel.sh &amp;&amp; ./fix_keep_flyos_kernel.sh</code><br>或：<code>chmod +x switch_to_debian_kernel.sh &amp;&amp; ./switch_to_debian_kernel.sh</code></p></blockquote><hr><h2 id="术语-小贴士"><a href="#术语-小贴士" class="headerlink" title="术语 &amp; 小贴士"></a>术语 &amp; 小贴士</h2><ul><li><strong>定制内核 vs 官方内核</strong>：飞牛OS自带 <code>6.12.18-trim</code> 等版本，不一定提供对应 headers；官方 LTS 内核为 <code>6.1.x</code>，headers 完整。  </li><li><strong>headers 的用途</strong>：编译 DKMS 模块（如显卡驱动、虚拟化增强模块）时需要；普通容器&#x2F;服务场景可不装。  </li><li><strong>apt-mark hold</strong>：防止某包被升级或重新引入；<code>apt-mark unhold &lt;pkg&gt;</code> 可解除。  </li><li><strong>full-upgrade</strong>：允许处理依赖变更（安装&#x2F;删除），解决 kept back。</li></ul><hr><h2 id="附录：自检与验证命令"><a href="#附录：自检与验证命令" class="headerlink" title="附录：自检与验证命令"></a>附录：自检与验证命令</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pf3vacmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-pf3vacmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1) 系统/内核</span><br><span class="hljs-built_in">uname</span> -a<br><span class="hljs-built_in">cat</span> /etc/os-release<br><br><span class="hljs-comment"># 2) 源与优先级（可选）</span><br>grep -R <span class="hljs-string">&quot;^[^#]&quot;</span> /etc/apt/sources.list /etc/apt/sources.list.d/ 2&gt;/dev/null | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br><br><span class="hljs-comment"># 3) apt 基础健康检查</span><br><span class="hljs-built_in">sudo</span> dpkg --configure -a<br><span class="hljs-built_in">sudo</span> apt --fix-broken install -y<br><span class="hljs-built_in">sudo</span> apt update<br>apt list --upgradable 2&gt;/dev/null | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br><br><span class="hljs-comment"># 4) 头文件/内核相关</span><br>dpkg -l | grep -E <span class="hljs-string">&#x27;linux-(image|headers)&#x27;</span> | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br>apt search linux-headers-$(<span class="hljs-built_in">uname</span> -r | <span class="hljs-built_in">cut</span> -d- -f1,2) 2&gt;/dev/null | sed -n <span class="hljs-string">&#x27;1,200p&#x27;</span><br><br><span class="hljs-comment"># 5) 空间检查</span><br><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><hr><blockquote><p>如果你的场景需要 <strong>ZeroTier</strong> 或其他内核模块，请优先确认是否有与“正在运行内核”匹配的 headers；若仓库缺失、又必须编译模块，建议切回官方 LTS 内核或手动编译 headers。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go语言新手安装与运行教程</title>
    <link href="/2025/09/02/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Go%E8%AF%AD%E8%A8%80%E6%96%B0%E6%89%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%95%99%E7%A8%8B/"/>
    <url>/2025/09/02/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Go%E8%AF%AD%E8%A8%80%E6%96%B0%E6%89%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-语言新手安装与运行教程（Windows-路由器示例）"><a href="#Go-语言新手安装与运行教程（Windows-路由器示例）" class="headerlink" title="Go 语言新手安装与运行教程（Windows + 路由器示例）"></a>Go 语言新手安装与运行教程（Windows + 路由器示例）</h1><p>本文详细说明如何在 Windows 电脑上安装 Go、运行 Go 代码、生成可执行文件（exe），以及如何在局域网内的路由器或设备上使用。</p><hr><h2 id="1️⃣-安装-Go-语言"><a href="#1️⃣-安装-Go-语言" class="headerlink" title="1️⃣ 安装 Go 语言"></a>1️⃣ 安装 Go 语言</h2><ol><li>打开 <a href="https://golang.org/dl/">Go 官方网站</a> 下载适合 Windows 的安装包（<code>.msi</code>）。</li><li>双击安装，保持默认路径即可（通常是 <code>C:\Go</code>）。</li><li>配置环境变量：<ul><li>右键“此电脑” → 属性 → 高级系统设置 → 环境变量</li><li>在系统变量 <code>Path</code> 中添加：<code>C:\Go\bin</code></li></ul></li><li>验证安装：<figure class="highlight cmd"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-es4ur5mfcwb3cn"></i><span>CMD</span><div class="collapse show" id="collapse-es4ur5mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go version<br></code></pre></td></tr></table></div></figure>输出类似：<figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8le9n1mfcwb3cn"></i><span>APACHE</span><div class="collapse show" id="collapse-8le9n1mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">go</span> version go1.<span class="hljs-number">21</span>.<span class="hljs-number">1</span> windows/amd64<br></code></pre></td></tr></table></div></figure></li></ol><hr><h2 id="2️⃣-创建-Go-项目"><a href="#2️⃣-创建-Go-项目" class="headerlink" title="2️⃣ 创建 Go 项目"></a>2️⃣ 创建 Go 项目</h2><ol><li>在桌面创建一个文件夹，比如：<figure class="highlight nsis"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1rqnfumfcwb3cn"></i><span>NSIS</span><div class="collapse show" id="collapse-1rqnfumfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">D:\<span class="hljs-literal">win10</span>桌面内容\桌面\lan-share-<span class="hljs-keyword">file</span><br></code></pre></td></tr></table></div></figure></li><li>在该文件夹中创建 <code>main.go</code> 文件，并写入你的 Go 代码。</li><li>代码示例：<figure class="highlight go"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-laz6ubmfcwb3cn"></i><span>GO</span><div class="collapse show" id="collapse-laz6ubmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default()<br>    r.Static(<span class="hljs-string">&quot;/static&quot;</span>, <span class="hljs-string">&quot;./static&quot;</span>)<br>    r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        c.String(http.StatusOK, <span class="hljs-string">&quot;Hello, LAN Share!&quot;</span>)<br>    &#125;)<br>    fmt.Println(<span class="hljs-string">&quot;Server started at http://localhost:9405&quot;</span>)<br>    r.Run(<span class="hljs-string">&quot;:9405&quot;</span>) <span class="hljs-comment">// 监听 9405 端口</span><br>&#125;<br></code></pre></td></tr></table></div></figure></li></ol><blockquote><p><strong>说明：</strong>  </p><ul><li><code>r.Run(&quot;:9405&quot;)</code> 表示在电脑端口 <code>9405</code> 启动服务  </li><li><code>r.Static</code> 用于静态文件服务</li></ul></blockquote><hr><h2 id="3️⃣-安装依赖包"><a href="#3️⃣-安装依赖包" class="headerlink" title="3️⃣ 安装依赖包"></a>3️⃣ 安装依赖包</h2><p>在项目目录打开命令行，执行：</p><figure class="highlight cmd"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lj8q71mfcwb3cn"></i><span>CMD</span><div class="collapse show" id="collapse-lj8q71mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go mod init lan-share<br>go get github.com/gin-gonic/gin<br>go get github.com/gorilla/websocket<br>go get github.com/skip2/go-qrcode<br></code></pre></td></tr></table></div></figure><blockquote><p><strong>说明：</strong>  </p><ul><li><code>go mod init lan-share</code>：初始化模块  </li><li><code>go get xxx</code>：下载依赖</li></ul></blockquote><hr><h2 id="4️⃣-生成-exe-可执行文件"><a href="#4️⃣-生成-exe-可执行文件" class="headerlink" title="4️⃣ 生成 exe 可执行文件"></a>4️⃣ 生成 exe 可执行文件</h2><p>在项目目录执行：</p><figure class="highlight cmd"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-k7umtkmfcwb3cn"></i><span>CMD</span><div class="collapse show" id="collapse-k7umtkmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go build -o lan-share.exe main.go<br></code></pre></td></tr></table></div></figure><blockquote><p><strong>说明：</strong>  </p><ul><li><code>-o lan-share.exe</code>：指定生成的文件名  </li><li><code>main.go</code>：要编译的源码  </li><li>执行成功后，会在目录生成 <code>lan-share.exe</code></li></ul></blockquote><p>测试运行：</p><figure class="highlight cmd"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1i1478mfcwb3cn"></i><span>CMD</span><div class="collapse show" id="collapse-1i1478mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">lan-share.exe<br></code></pre></td></tr></table></div></figure><p>如果出现以下提示，说明程序已经运行：</p><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-okxm60mfcwb3cn"></i><span>VIM</span><div class="collapse show" id="collapse-okxm60mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">[GIN-<span class="hljs-keyword">debug</span>] Running in <span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-keyword">mode</span>.<br>Server started at http://localhos<span class="hljs-variable">t:9405</span><br></code></pre></td></tr></table></div></figure><blockquote><p>⚠️ 如果出现模板报错：  </p><figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-82konwmfcwb3cn"></i><span>PGSQL</span><div class="collapse show" id="collapse-82konwmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">panic: <span class="hljs-keyword">template</span>: <span class="hljs-keyword">index</span>.html:<span class="hljs-number">7</span>: <span class="hljs-keyword">function</span> &quot;url_for&quot; <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></div></figure><p>说明模板中有 Python 风格的 <code>url_for</code>，需要修改为静态路径，例如：</p><figure class="highlight html"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lson7fmfcwb3cn"></i><span>HTML</span><div class="collapse show" id="collapse-lson7fmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>或者在 Go 中注册模板函数：</p><figure class="highlight go"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ynnjzymfcwb3cn"></i><span>GO</span><div class="collapse show" id="collapse-ynnjzymfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">r.SetFuncMap(template.FuncMap&#123;<br>   <span class="hljs-string">&quot;url_for&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> path &#125;,<br>&#125;)<br></code></pre></td></tr></table></div></figure></blockquote><hr><h2 id="5️⃣-在局域网使用"><a href="#5️⃣-在局域网使用" class="headerlink" title="5️⃣ 在局域网使用"></a>5️⃣ 在局域网使用</h2><h3 id="电脑端访问"><a href="#电脑端访问" class="headerlink" title="电脑端访问"></a>电脑端访问</h3><p>假设电脑 IP 是 <code>192.168.1.100</code>，在局域网的其他设备（手机、路由器等）访问：</p><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2o9nf0mfcwb3cn"></i><span>DTS</span><div class="collapse show" id="collapse-2o9nf0mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//192.168.1.100:9405</span><br></code></pre></td></tr></table></div></figure><h3 id="路由器（玩客云）示例"><a href="#路由器（玩客云）示例" class="headerlink" title="路由器（玩客云）示例"></a>路由器（玩客云）示例</h3><ol><li>玩客云或路由器支持 Docker &#x2F; Linux 下运行 Go 二进制文件。</li><li>将 <code>lan-share.exe</code> 放入路由器的存储（或通过 <code>scp</code> 上传）。</li><li>在路由器终端运行：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wk4m4vmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-wk4m4vmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x lan-share.exe<br>./lan-share.exe<br></code></pre></td></tr></table></div></figure></li><li>同样在局域网内访问：<figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hngckgmfcwb3cn"></i><span>DTS</span><div class="collapse show" id="collapse-hngckgmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//&lt;路由器IP&gt;:9405</span><br></code></pre></td></tr></table></div></figure></li></ol><blockquote><p>⚠️ 注意：</p><ul><li>路由器可能是 ARM 架构，需要交叉编译：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qo2gsgmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-qo2gsgmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET GOARCH=arm<br>SET GOOS=linux<br>go build -o lan-share-arm main.go<br></code></pre></td></tr></table></div></figure></li><li>Windows 生成的 exe 只能在 Windows 上运行。</li></ul></blockquote><hr><h2 id="6️⃣-常用命令总结"><a href="#6️⃣-常用命令总结" class="headerlink" title="6️⃣ 常用命令总结"></a>6️⃣ 常用命令总结</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>go version</code></td><td>查看 Go 版本</td></tr><tr><td><code>go mod init &lt;name&gt;</code></td><td>初始化项目模块</td></tr><tr><td><code>go get &lt;包名&gt;</code></td><td>安装依赖包</td></tr><tr><td><code>go build -o &lt;文件名&gt;</code></td><td>生成可执行文件</td></tr><tr><td><code>./&lt;文件名&gt;</code> 或 <code>lan-share.exe</code></td><td>运行程序</td></tr><tr><td><code>SET GOARCH=arm</code></td><td>设置交叉编译架构（ARM）</td></tr><tr><td><code>SET GOOS=linux</code></td><td>设置交叉编译操作系统（Linux）</td></tr></tbody></table><hr><h2 id="7️⃣-常见问题"><a href="#7️⃣-常见问题" class="headerlink" title="7️⃣ 常见问题"></a>7️⃣ 常见问题</h2><ol><li><p><strong>运行闪退 &#x2F; 无法在你的电脑上运行</strong>  </p><ul><li>确认 exe 是针对你系统架构编译（x64 Windows 或 ARM Linux）  </li><li>如果报模板函数未定义，参考第 4️⃣ 步修改模板</li></ul></li><li><p><strong>局域网访问不了</strong>  </p><ul><li>检查防火墙是否允许端口访问  </li><li>确认电脑或路由器 IP 正确</li></ul></li><li><p><strong>依赖包报错</strong>  </p><ul><li>使用 <code>go mod tidy</code> 清理和下载依赖</li></ul></li></ol><hr><h2 id="8️⃣-小结"><a href="#8️⃣-小结" class="headerlink" title="8️⃣ 小结"></a>8️⃣ 小结</h2><p>通过以上步骤，你可以：</p><ul><li>在 Windows 安装 Go 并运行 Go 程序</li><li>编译生成 exe 可执行文件</li><li>在局域网内其他设备访问服务</li><li>可将程序部署到路由器 &#x2F; 玩客云等设备上</li></ul><p>以后开发新的 Go 项目，流程类似：<strong>写代码 → 安装依赖 → 编译 → 测试 → 部署</strong></p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LAN-to-go局域网共享服务器</title>
    <link href="/2025/09/02/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/LAN-to-go%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2025/09/02/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/LAN-to-go%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="LAN-to-go-局域网共享服务器"><a href="#LAN-to-go-局域网共享服务器" class="headerlink" title="LAN-to-go 局域网共享服务器"></a>LAN-to-go 局域网共享服务器</h1><p>🚀 <strong>轻量级局域网文件和消息共享解决方案</strong></p><p>一个使用Go语言开发的现代化局域网共享服务器，支持文件传输、消息共享、模板管理等功能。无需复杂配置，一键启动即可在局域网内快速分享内容。</p><h2 id="✨-特性"><a href="#✨-特性" class="headerlink" title="✨ 特性"></a>✨ 特性</h2><ul><li>🌐 <strong>现代Web界面</strong>：响应式设计，支持PC和移动端</li><li>📱 <strong>二维码访问</strong>：自动生成局域网访问二维码，扫码即用</li><li>🔄 <strong>实时同步</strong>：WebSocket技术实现多设备实时同步</li><li>📁 <strong>文件共享</strong>：支持多种格式文件的快速传输</li><li>💬 <strong>消息模板</strong>：预设模板系统，快速发送常用消息</li><li>📊 <strong>数据管理</strong>：支持导入导出模板数据（TXT&#x2F;JSON格式）</li><li>🎯 <strong>跨平台</strong>：支持Windows、Linux、macOS、OpenWrt路由器</li><li>🛡️ <strong>安全可靠</strong>：局域网内使用，数据不经过外部服务器</li></ul><h2 id="🚀-快速开始"><a href="#🚀-快速开始" class="headerlink" title="🚀 快速开始"></a>🚀 快速开始</h2><h3 id="📦-下载"><a href="#📦-下载" class="headerlink" title="📦 下载"></a>📦 下载</h3><p>前往 <a href="https://github.com/lifuaini2019/lan-share">github.com</a> 页面下载对应平台的版本：</p><ul><li><strong>Windows</strong>: <code>lan-to-go-windows-amd64.zip</code></li><li><strong>玩客云路由器</strong>: <code>lan-to-go-openwrt-armv7.tar.gz</code></li><li><strong>Linux</strong>: <code>lan-to-go-linux-amd64.tar.gz</code></li><li><strong>macOS</strong>: <code>lan-to-go-macos-amd64</code> 或 <code>lan-to-go-macos-arm64</code></li></ul><h3 id="🖥️-Windows-使用"><a href="#🖥️-Windows-使用" class="headerlink" title="🖥️ Windows 使用"></a>🖥️ Windows 使用</h3><ol><li>下载并解压 <code>lan-to-go-windows-amd64.zip</code></li><li>双击运行 <code>start.bat</code></li><li>程序会显示访问地址和二维码</li><li>在局域网内的其他设备上访问该地址即可</li></ol><h3 id="📡-玩客云路由器使用"><a href="#📡-玩客云路由器使用" class="headerlink" title="📡 玩客云路由器使用"></a>📡 玩客云路由器使用</h3><ol><li>下载 <code>lan-to-go-openwrt-armv7.tar.gz</code> 并解压</li><li>上传到玩客云的 <code>/root/</code> 目录</li><li>SSH登录玩客云：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dsfjssmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-dsfjssmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/openwrt-package<br><span class="hljs-built_in">chmod</span> +x install_autostart.sh<br>./install_autostart.sh<br></code></pre></td></tr></table></div></figure></li><li>选择自动启动，即可在浏览器访问 <code>http://路由器IP:9405</code></li></ol><h3 id="🐧-Linux-使用"><a href="#🐧-Linux-使用" class="headerlink" title="🐧 Linux 使用"></a>🐧 Linux 使用</h3><ol><li>下载并解压 <code>lan-to-go-linux-amd64.tar.gz</code></li><li>运行启动脚本：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5g9l6imfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-5g9l6imfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux-package<br>./start.sh<br></code></pre></td></tr></table></div></figure></li></ol><h2 id="📱-功能介绍"><a href="#📱-功能介绍" class="headerlink" title="📱 功能介绍"></a>📱 功能介绍</h2><h3 id="🏠-文字共享"><a href="#🏠-文字共享" class="headerlink" title="🏠 文字共享"></a>🏠 文字共享</h3><ul><li>快速发送文字消息到局域网内所有设备</li><li>支持多设备实时同步</li><li>历史消息记录</li></ul><h3 id="📁-文件传输"><a href="#📁-文件传输" class="headerlink" title="📁 文件传输"></a>📁 文件传输</h3><ul><li>拖拽上传文件（最大16MB）</li><li>支持多种文件格式</li><li>实时传输状态显示</li><li>独占&#x2F;共享接收模式</li></ul><h3 id="💼-模板系统"><a href="#💼-模板系统" class="headerlink" title="💼 模板系统"></a>💼 模板系统</h3><ul><li>预设常用消息模板</li><li>分类管理（售前、售后、物流等）</li><li>支持模板的增删改查</li><li>数据导入导出功能</li></ul><h2 id="🔧-技术规格"><a href="#🔧-技术规格" class="headerlink" title="🔧 技术规格"></a>🔧 技术规格</h2><ul><li><strong>开发语言</strong>: Go 1.21</li><li><strong>Web框架</strong>: Gin</li><li><strong>实时通信</strong>: WebSocket</li><li><strong>前端技术</strong>: HTML5 + CSS3 + JavaScript</li><li><strong>数据存储</strong>: 本地文件（JSON + TXT）</li><li><strong>默认端口</strong>: 9405</li><li><strong>内存占用</strong>: ~10-15MB</li><li><strong>支持并发</strong>: 100+ 连接</li></ul><h2 id="🌟-版本特性"><a href="#🌟-版本特性" class="headerlink" title="🌟 版本特性"></a>🌟 版本特性</h2><h3 id="v2-0-当前版本"><a href="#v2-0-当前版本" class="headerlink" title="v2.0 (当前版本)"></a>v2.0 (当前版本)</h3><h4 id="🔄-IP获取优化"><a href="#🔄-IP获取优化" class="headerlink" title="🔄 IP获取优化"></a>🔄 IP获取优化</h4><ul><li><strong>修复玩客云IP问题</strong>：解决了在路由器环境下只显示127.0.0.1的问题</li><li><strong>多重IP获取策略</strong>：UDP连接、网络接口扫描、Linux命令辅助</li><li><strong>智能IP优先级</strong>：优先192.168.x.x，其次10.x.x.x和172.16-31.x.x</li></ul><h4 id="🚀-服务管理增强"><a href="#🚀-服务管理增强" class="headerlink" title="🚀 服务管理增强"></a>🚀 服务管理增强</h4><ul><li><strong>一键安装</strong>：玩客云开机自启动安装脚本</li><li><strong>服务管理</strong>：标准OpenWrt服务控制</li><li><strong>故障恢复</strong>：自动重启和状态监控</li></ul><h4 id="📊-模板系统升级"><a href="#📊-模板系统升级" class="headerlink" title="📊 模板系统升级"></a>📊 模板系统升级</h4><ul><li><strong>数据导入导出</strong>：支持TXT和JSON格式</li><li><strong>批量操作</strong>：模板的批量添加和管理</li><li><strong>数据清理</strong>：移除了所有个人敏感信息</li></ul><h2 id="🛠️-本地开发"><a href="#🛠️-本地开发" class="headerlink" title="🛠️ 本地开发"></a>🛠️ 本地开发</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>Go 1.21+</li><li>现代浏览器</li></ul><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0hl860mfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-0hl860mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/yourusername/lan-to-go.git<br><span class="hljs-built_in">cd</span> lan-to-go<br>go mod download<br>go run main.go<br></code></pre></td></tr></table></div></figure><h3 id="构建发布版"><a href="#构建发布版" class="headerlink" title="构建发布版"></a>构建发布版</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-m7hx6xmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-m7hx6xmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x build_release.sh<br>./build_release.sh<br></code></pre></td></tr></table></div></figure><h2 id="📝-使用场景"><a href="#📝-使用场景" class="headerlink" title="📝 使用场景"></a>📝 使用场景</h2><ul><li><strong>家庭网络</strong>：家庭成员间快速分享照片、文档</li><li><strong>办公环境</strong>：团队内部临时文件传输</li><li><strong>路由器服务</strong>：在路由器上运行，全网设备可访问</li><li><strong>客服系统</strong>：使用模板功能快速回复常见问题</li><li><strong>开发测试</strong>：开发环境下的快速文件分享</li></ul><h2 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h2><ul><li>程序默认端口为9405，确保该端口未被占用</li><li>Windows首次运行时可能需要允许防火墙访问</li><li>玩客云等路由器设备请确保有足够的内存（建议&gt;30MB）</li><li>局域网使用，不支持外网访问</li></ul><h2 id="🤝-贡献"><a href="#🤝-贡献" class="headerlink" title="🤝 贡献"></a>🤝 贡献</h2><p>欢迎提交Issue和Pull Request！</p><h2 id="📄-许可证"><a href="#📄-许可证" class="headerlink" title="📄 许可证"></a>📄 许可证</h2><p>MIT License - 详见 <a href="LICENSE">LICENSE</a> 文件</p><h2 id="🙏-致谢"><a href="#🙏-致谢" class="headerlink" title="🙏 致谢"></a>🙏 致谢</h2><p>感谢所有使用和贡献这个项目的用户！</p><hr><p>⭐ 如果这个项目对您有帮助，请给个Star支持一下！</p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt上LAN-to-go自动启动最终方案</title>
    <link href="/2025/09/02/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/OpenWrt%E4%B8%8ALAN-to-go%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E6%9C%80%E7%BB%88%E6%96%B9%E6%A1%88/"/>
    <url>/2025/09/02/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/OpenWrt%E4%B8%8ALAN-to-go%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E6%9C%80%E7%BB%88%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenWrt-上-LAN-to-go-自动启动最终方案"><a href="#OpenWrt-上-LAN-to-go-自动启动最终方案" class="headerlink" title="OpenWrt 上 LAN-to-go 自动启动最终方案"></a>OpenWrt 上 LAN-to-go 自动启动最终方案</h1><p>在 OpenWrt 上，最稳妥的方式是<strong>在启动脚本里先切换到程序目录，再使用 <code>nohup</code> 后台运行</strong>，并将日志重定向到文件。使用这个方案可以保证 LAN-to-go 在开机时自动启动，并正常生成日志。</p><h2 id="使用-rc-local"><a href="#使用-rc-local" class="headerlink" title="使用 rc.local"></a>使用 rc.local</h2><p>编辑 <code>/etc/rc.local</code>，内容示例：</p><figure class="highlight sh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-exptl5mfcwb3cp"></i><span>SH</span><div class="collapse show" id="collapse-exptl5mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># Put your custom commands here that should be executed once</span><br><span class="hljs-comment"># the system init finished.</span><br><span class="hljs-comment"># 延迟启动 10 秒，防止被系统清理</span><br><span class="hljs-built_in">cd</span> /root<br>setsid /root/lan-to-go-openwrt-armv7-fixed &gt; /root/lan-to-go.log 2&gt;&amp;1 &amp;<br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></div></figure><p>后来我搬到一个目录lan-to-go内可以这样</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gaxx94mfcwb3cp"></i><span>AWK</span><div class="collapse show" id="collapse-gaxx94mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Put your custom commands here that should be executed once</span><br><span class="hljs-comment"># the system init finished. By default this file does nothing.</span><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment"># 延迟启动 10 秒，防止被系统清理</span><br>cd <span class="hljs-regexp">/root/</span>lan-to-go<br>setsid <span class="hljs-regexp">/root/</span>lan-to-go<span class="hljs-regexp">/lan-to-go-openwrt-armv7-fixed &gt; /</span>root<span class="hljs-regexp">/lan-to-go/</span>lan-to-go.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br><span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></div></figure><h2 id="使用-init-d-脚本"><a href="#使用-init-d-脚本" class="headerlink" title="使用 init.d 脚本"></a>使用 init.d 脚本</h2><p>创建或编辑 <code>/etc/init.d/lan-to-go</code>，示例内容如下：</p><figure class="highlight sh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-965d9amfcwb3cp"></i><span>SH</span><div class="collapse show" id="collapse-965d9amfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh /etc/rc.common</span><br>START=99<br>STOP=10<br><br><span class="hljs-function"><span class="hljs-title">start</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;🚀 启动 LAN-to-go...&quot;</span><br>    <span class="hljs-built_in">cd</span> /root<br>    <span class="hljs-built_in">nohup</span> ./lan-to-go-openwrt-armv7-fixed &gt; /root/lan-to-go.log 2&gt;&amp;1 &amp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">stop</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;🛑 停止 LAN-to-go...&quot;</span><br>    pkill -f lan-to-go-openwrt-armv7-fixed<br>&#125;<br></code></pre></td></tr></table></div></figure><p>然后执行以下命令启用自启并立即启动：</p><figure class="highlight sh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-b22drfmfcwb3cp"></i><span>SH</span><div class="collapse show" id="collapse-b22drfmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/init.d/lan-to-go <span class="hljs-built_in">enable</span>   <span class="hljs-comment"># 开机自启</span><br>/etc/init.d/lan-to-go start    <span class="hljs-comment"># 立即启动</span><br></code></pre></td></tr></table></div></figure><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ol><li><strong>cd &#x2F;root</strong>：确保程序运行时工作目录正确，否则会找不到 <code>templates/*</code> 导致启动失败。</li><li>**nohup … &amp;**：保证程序在后台运行，不会因为 shell 退出而停止。</li><li><strong>日志重定向</strong>：<code>&gt; /root/lan-to-go.log 2&gt;&amp;1</code> 可以把输出和错误日志都保存下来，方便调试。</li><li><strong>停止程序</strong>：<code>pkill -f lan-to-go-openwrt-armv7-fixed</code> 可以通过 init.d stop 或手动命令停止。</li></ol><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><p>实时查看启动日志：</p><figure class="highlight sh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ar3lhkmfcwb3cp"></i><span>SH</span><div class="collapse show" id="collapse-ar3lhkmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">tail</span> -f /root/lan-to-go.log<br></code></pre></td></tr></table></div></figure><p>查看最近日志内容：</p><figure class="highlight sh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mq652jmfcwb3cp"></i><span>SH</span><div class="collapse show" id="collapse-mq652jmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /root/lan-to-go.log<br></code></pre></td></tr></table></div></figure><blockquote><p>使用这个方案，LAN-to-go 可以在开机时自动启动，同时日志也能正常记录，稳定可靠。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>典型已知免费开源CMS平台免费网站代码</title>
    <link href="/2025/08/28/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/%E5%85%B8%E5%9E%8B%E5%B7%B2%E7%9F%A5%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90CMS%E5%B9%B3%E5%8F%B0%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99%E4%BB%A3%E7%A0%81/"/>
    <url>/2025/08/28/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/%E5%85%B8%E5%9E%8B%E5%B7%B2%E7%9F%A5%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90CMS%E5%B9%B3%E5%8F%B0%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="典型已知免费开源-CMS-平台"><a href="#典型已知免费开源-CMS-平台" class="headerlink" title="典型已知免费开源 CMS 平台"></a>典型已知免费开源 CMS 平台</h1><p>如果你想搭建一个有前台有后台的网站，并且希望后台能自定义菜单，以下是一些<br><strong>免费且开源</strong> 的 CMS 平台，能够帮助你快速上线，或者作为二次开发的基础。</p><hr><h2 id="一、典型已知开源-CMS-平台（适合搭建前台-后台管理）"><a href="#一、典型已知开源-CMS-平台（适合搭建前台-后台管理）" class="headerlink" title="一、典型已知开源 CMS 平台（适合搭建前台 + 后台管理）"></a>一、典型已知开源 CMS 平台（适合搭建前台 + 后台管理）</h2><p>这些平台虽然不是”拖拽式建站”工具，但它们功能完善，社区成熟：</p><h3 id="1-WordPress"><a href="#1-WordPress" class="headerlink" title="1. WordPress"></a>1. WordPress</h3><ul><li>世界上最流行的 CMS。</li><li>插件和主题资源极其丰富。</li><li>后台支持自定义菜单、用户权限、站点扩展。</li><li>适合博客、企业官网、商城等多种网站类型。</li></ul><hr><h3 id="2-Drupal"><a href="#2-Drupal" class="headerlink" title="2. Drupal"></a>2. Drupal</h3><ul><li>功能非常强大，支持复杂的数据结构。</li><li>适合多语言、多角色权限、高流量的大型网站。</li><li>对开发人员友好，灵活度高，但学习曲线较陡峭。</li></ul><hr><h3 id="3-Joomla"><a href="#3-Joomla" class="headerlink" title="3. Joomla!"></a>3. Joomla!</h3><ul><li>中等复杂度的 CMS。</li><li>支持自定义内容类型、后台管理灵活。</li><li>扩展插件较多，适合中型企业站点或门户网站。</li></ul><hr><h3 id="4-Microweber"><a href="#4-Microweber" class="headerlink" title="4. Microweber"></a>4. Microweber</h3><ul><li>基于 <strong>Laravel</strong> 框架。</li><li>支持拖拽编辑和模块化组件。</li><li>前端所见即所得，适合需要轻量化和可视化编辑的网站。</li></ul><hr><h3 id="5-ImpressPages"><a href="#5-ImpressPages" class="headerlink" title="5. ImpressPages"></a>5. ImpressPages</h3><ul><li>基于 PHP。</li><li>支持前端所见即所得（Inline Editing）。</li><li>拖拽布局和小组件，操作直观，编辑体验友好。</li></ul><hr><p>📌<br>以上平台都完全开源、免费，可以直接部署在你的服务器或虚拟主机上。根据你的需求选择合适的框架，可以省去大量的开发成本。</p><ul><li><strong>WordPress</strong><br>最流行的 CMS，插件和主题资源丰富，支持自定义菜单和管理后台，完全开源免费。适合博客、企业站、商城等。<a href="https://www.websiteplanet.com/blog/best-open-source-website-builders/?utm_source=chatgpt.com">Website Planet</a><a href="https://wbcomdesigns.com/best-open-source-website-builders/?utm_source=chatgpt.com">Wbcom Designs</a></li><li><strong>Drupal</strong><br>功能强大，适用于复杂、多语言、高流量站点；支持自定义结构、比较适合技术型用户。<a href="https://www.droptica.com/blog/6-best-open-source-website-builders/?utm_source=chatgpt.com">droptica.com</a><a href="https://www.websiteplanet.com/blog/best-open-source-website-builders/?utm_source=chatgpt.com">Website Planet</a></li><li><strong>Joomla!</strong><br>支持自定义内容类型、后台控制，有较多扩展插件，适中复杂度的站点。<a href="https://www.droptica.com/blog/6-best-open-source-website-builders/?utm_source=chatgpt.com">droptica.com</a><a href="https://wbcomdesigns.com/best-open-source-website-builders/?utm_source=chatgpt.com">Wbcom Designs</a></li><li><strong>Microweber</strong><br>基于 Laravel，具备拖拽编辑、在线布局、模块化组件，轻量级。<a href="https://www.droptica.com/blog/6-best-open-source-website-builders/?utm_source=chatgpt.com">droptica.com</a></li><li><strong>ImpressPages</strong><br>PHP 架构，支持前端所见即所得（inline editing），拖拽布局和小组件，非常直观编辑体验。<a href="https://en.wikipedia.org/wiki/ImpressPages?utm_source=chatgpt.com">维基百科</a></li></ul><hr><h2 id="GitHub-上的开源系统（偏轻或可高定制）"><a href="#GitHub-上的开源系统（偏轻或可高定制）" class="headerlink" title="GitHub 上的开源系统（偏轻或可高定制）"></a>GitHub 上的开源系统（偏轻或可高定制）</h2><p>这些项目代码开源、免费，且自带后台管理功能，很适合自行选择搭建或二次开发：</p><ul><li><strong>UJCMS</strong><br>基于 Java：SpringBoot + Vue3 前后端分离，支持模板+标签，也支持 API 模式，适合现代可扩展需求，Apache-2.0 免费商用。<a href="https://github.com/dromara/ujcms?utm_source=chatgpt.com">GitHub</a></li><li><strong>LightCMS</strong><br>基于 Laravel + layui，具备用户管理、权限、日志、菜单管理、模型管理等功能，支持一键生成 CRUD，适合作为后台快速搭建框架。<a href="https://github.com/eddy8/LightCMS?utm_source=chatgpt.com">GitHub</a></li><li><strong>RuoYi-fast-cms</strong><br>Java 项目，支持导航自定义、专题、投稿流程、审核、统计、回收站等完善的后台管理功能。<a href="https://github.com/huangxing2010/RuoYi-fast-cms?utm_source=chatgpt.com">GitHub</a></li><li><strong>YznCMS（御宅男 CMS）</strong><br>使用 ThinkPHP8 + layui 开发，永久免费、可商用，便于扩展和二次开发，是轻便的 CMS 平台。<a href="https://github.com/ken678/yzncms?utm_source=chatgpt.com">GitHub</a></li><li><strong>PbootCMS</strong><br>PHP 开源企业级建站系统，支持无限栏目、自定义模型&#x2F;字段、模板、专题、内容复制等。<a href="https://github.com/pbootcmspro/PbootCMS?utm_source=chatgpt.com">GitHub</a></li><li><strong>Shopxian CMS（秀仙 CMS）</strong><br>针对营销类网站，支持 PC + 手机 + 微信三合一，后台可视化编辑、模板灵活，自主团队开发。<a href="https://github.com/zhangqiquan/shopxian_cms?utm_source=chatgpt.com">GitHub</a></li><li><strong>JizhiCMS</strong><br>开源无加密、便于二次开发，后台模板和插件接口开放，可自由定制。<a href="https://github.com/Cherry-toto/jizhicms?utm_source=chatgpt.com">GitHub</a></li></ul><hr><h2 id="管理后台框架平台（类似后台构建工具）"><a href="#管理后台框架平台（类似后台构建工具）" class="headerlink" title="管理后台框架平台（类似后台构建工具）"></a>管理后台框架平台（类似后台构建工具）</h2><p>如果你更侧重的是后台系统，可自定义菜单、自由搭模块，这类工具更灵活：</p><ul><li><strong>NocoBase</strong><br>可视化构建管理后台，支持数据模型驱动、插件化、权限、工作流，很适合快速搭建定制后台。<a href="https://www.nocobase.com/cn/blog/top-11-open-source-admin-dashboard-projects-on-github?utm_source=chatgpt.com">NocoBase</a></li><li><strong>APITable</strong><br>类似电子表格与数据库结合的工具，适合快速构建操作型后台界面。<a href="https://www.nocobase.com/cn/blog/top-11-open-source-admin-dashboard-projects-on-github?utm_source=chatgpt.com">NocoBase</a></li></ul><hr><h2 id="推荐思路参考表格"><a href="#推荐思路参考表格" class="headerlink" title="推荐思路参考表格"></a>推荐思路参考表格</h2><table><thead><tr><th>需求方向</th><th>推荐系统</th><th>特色与适用场景</th></tr></thead><tbody><tr><td>成熟 CMS</td><td>WordPress &#x2F; Drupal &#x2F; Joomla</td><td>插件多、模板丰富、社区强大</td></tr><tr><td>拖拽可视化编辑</td><td>Microweber &#x2F; ImpressPages</td><td>视觉搭建，适合内容编辑友好型</td></tr><tr><td>Java 技术栈前后端分离</td><td>UJCMS</td><td>现代架构、API 化、自定义灵活</td></tr><tr><td>PHP 背景 + 后台模板生成</td><td>LightCMS &#x2F; RuoYi-fast-cms &#x2F; YznCMS &#x2F; PbootCMS</td><td>后台 CRUD 快速搭建，适合开发者定制</td></tr><tr><td>前后端一体营销系统</td><td>Shopxian CMS</td><td>微信、PC、移动整合建站</td></tr><tr><td>自定义后台工具</td><td>NocoBase &#x2F; APITable</td><td>自由构建后台功能、数据模型驱动</td></tr></tbody></table><hr><h2 id="总结建议"><a href="#总结建议" class="headerlink" title="总结建议"></a>总结建议</h2><ul><li>如果你希望尽快上线，依赖丰富生态与插件：推荐 WordPress 或 Joomla。</li><li>要拖拽可视化界面，操作直观：Microweber 或 ImpressPages 是不错的选择。</li><li>技术栈偏 Java、需要灵活 API 设计：UJCMS 很合适。</li><li>如果想用 PHP 搭一个自定义后台，中间带模板快速生成表单&#x2F;CRUD：LightCMS、PbootCMS、YznCMS 都值得尝试。</li><li>想要一个类似管理后台生成器，把数据、菜单自由摆：NocoBase 是最佳方案。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网页代码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信双开-多开教程（批处理文件方法）</title>
    <link href="/2025/08/27/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%8F%8C%E5%BC%80-%E5%A4%9A%E5%BC%80%E6%95%99%E7%A8%8B%EF%BC%88%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <url>/2025/08/27/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%8F%8C%E5%BC%80-%E5%A4%9A%E5%BC%80%E6%95%99%E7%A8%8B%EF%BC%88%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="微信双开-多开教程（批处理文件方法）"><a href="#微信双开-多开教程（批处理文件方法）" class="headerlink" title="微信双开-多开教程（批处理文件方法）"></a>微信双开-多开教程（批处理文件方法）</h1><p>在日常工作或生活中，我们经常需要同时登录多个微信账号，例如分开处理工作和个人事务。微信官方客户端默认只允许单账号登录，但通过 <strong>批处理文件（.bat）</strong>，可以轻松实现微信的双开或多开。</p><p>下面我将详细说明操作方法，并提供示例。</p><hr><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><p>Windows 系统默认不允许同一程序重复运行，但通过批处理文件中的 <code>start</code> 命令，可以让系统启动 <strong>多个微信进程</strong>，从而实现多账号登录。  </p><p>核心原理：</p><ol><li>每条 <code>start</code> 命令都会启动一个独立微信实例。</li><li>想开多少个微信账号，就写多少条 <code>start</code> 命令。</li><li>批处理文件运行后，系统会依次启动对应数量的微信窗口。</li></ol><hr><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><ol><li><p><strong>确认微信安装路径</strong><br>默认路径一般为：</p><figure class="highlight livescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zgb2zjmfcwb3cp"></i><span>LIVESCRIPT</span><div class="collapse show" id="collapse-zgb2zjmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">C:<span class="hljs-string">\Program</span> Files<span class="hljs-string">\Tencent\WeChat\WeChat.exe</span><br></code></pre></td></tr></table></div></figure><p>如果你安装在其他位置，请根据实际路径修改。</p></li><li><p><strong>创建批处理文件</strong><br>打开记事本，新建文件，并将文件保存为 <code>.bat</code> 后缀，例如：</p><figure class="highlight jboss-cli"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6c9t3tmfcwb3cp"></i><span>JBOSS-CLI</span><div class="collapse show" id="collapse-6c9t3tmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">微信多开<span class="hljs-string">.bat</span><br></code></pre></td></tr></table></div></figure></li></ol><hr><h2 id="三、示例（双开微信）"><a href="#三、示例（双开微信）" class="headerlink" title="三、示例（双开微信）"></a>三、示例（双开微信）</h2><p>如果你想打开 <strong>两个微信账号</strong>，在批处理文件中输入以下内容，每行对应一个微信实例：</p><figure class="highlight bat"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-eub8d2mfcwb3cp"></i><span>BAT</span><div class="collapse show" id="collapse-eub8d2mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">start</span> &quot;&quot; &quot;C:\Program Files\Tencent\WeChat\WeChat.exe&quot;<br><span class="hljs-built_in">start</span> &quot;&quot; &quot;C:\Program Files\Tencent\WeChat\WeChat.exe&quot;<br><span class="hljs-built_in">echo</span> 微信已启动双开，可以登录两个账号<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></div></figure><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul><li>每行 <code>start &quot;&quot; &quot;路径&quot;</code> 就是一个微信实例。</li><li><code>pause</code> 用于在命令行窗口显示提示信息，按任意键关闭。</li></ul><hr><h2 id="四、示例（多开微信）"><a href="#四、示例（多开微信）" class="headerlink" title="四、示例（多开微信）"></a>四、示例（多开微信）</h2><p>如果你想打开 <strong>三个或更多微信账号</strong>，只需要增加行数即可：</p><figure class="highlight bat"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-695cl6mfcwb3cp"></i><span>BAT</span><div class="collapse show" id="collapse-695cl6mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">start</span> &quot;&quot; &quot;C:\Program Files\Tencent\WeChat\WeChat.exe&quot;<br><span class="hljs-built_in">start</span> &quot;&quot; &quot;C:\Program Files\Tencent\WeChat\WeChat.exe&quot;<br><span class="hljs-built_in">start</span> &quot;&quot; &quot;C:\Program Files\Tencent\WeChat\WeChat.exe&quot;<br><span class="hljs-built_in">echo</span> 微信已启动三开，可以登录三个账号<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></div></figure><blockquote><p>每增加一行 <code>start</code> 命令，就可以多开一个微信账号，想开多少就写多少行。</p></blockquote><hr><h2 id="五、使用方法"><a href="#五、使用方法" class="headerlink" title="五、使用方法"></a>五、使用方法</h2><ol><li>将批处理文件保存到桌面或任意文件夹。</li><li>双击运行批处理文件。</li><li>系统会依次启动对应数量的微信窗口。</li><li>分别登录不同账号即可。</li></ol><blockquote><p>⚠️ 注意事项：</p><ul><li>多开微信可能占用更多系统资源，请根据电脑性能适度开启。</li><li>微信支付、绑定手机等功能可能受限制，请谨慎操作。</li><li>如果遇到“程序已运行”提示，可尝试使用虚拟机或微信分身工具。</li></ul></blockquote><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>通过批处理文件的方法，可以非常简单地实现微信的双开或多开。关键点在于：</p><ul><li>每行 <code>start</code> 命令对应一个微信实例。</li><li>想开多少账号，就写多少行。</li><li>文件保存为 <code>.bat</code>，双击即可运行。</li></ul><p>这种方法轻量、易操作，非常适合需要同时管理多个微信账号的用户。</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>macOS脚本无法运行解决方法</title>
    <link href="/2025/08/27/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/macOS%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%B8%B8/macOS%E8%84%9A%E6%9C%AC%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2025/08/27/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/macOS%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%B8%B8/macOS%E8%84%9A%E6%9C%AC%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="macOS-脚本无法运行解决方法"><a href="#macOS-脚本无法运行解决方法" class="headerlink" title="macOS 脚本无法运行解决方法"></a>macOS 脚本无法运行解决方法</h1><p>如果你在 macOS 上运行 <code>.command</code> 脚本时出现权限问题或者提示无法打开，本文教你一步步解决。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>原来能运行的脚本 <code>mac-下载-更新.command</code> 现在无法打开。</li><li>提示权限不足或无法执行。</li><li>文件权限显示为 <code>-rw-r--r--</code>，没有可执行权限。</li></ul><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><h3 id="1-确认文件位置"><a href="#1-确认文件位置" class="headerlink" title="1. 确认文件位置"></a>1. 确认文件位置</h3><p>打开终端，切换到脚本所在目录：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-w9344fmfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-w9344fmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/李保个人<br></code></pre></td></tr></table></div></figure><p>然后列出文件确认存在：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g691wumfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-g691wumfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></div></figure><p>应该能看到：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-oq2nhomfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-oq2nhomfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mac-下载-更新.<span class="hljs-built_in">command</span><br>Mac-更新-部署-备份.<span class="hljs-built_in">command</span><br></code></pre></td></tr></table></div></figure><h3 id="2-查看文件权限"><a href="#2-查看文件权限" class="headerlink" title="2. 查看文件权限"></a>2. 查看文件权限</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1up5nqmfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-1up5nqmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l <span class="hljs-string">&quot;mac-下载-更新.command&quot;</span><br></code></pre></td></tr></table></div></figure><p>输出可能是：</p><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jzryjwmfcwb3ct"></i><span>TAP</span><div class="collapse show" id="collapse-jzryjwmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">-rw-r--r--@<span class="hljs-number"> 1 </span>libao staff<span class="hljs-number"> 149 </span>8<span class="hljs-number"> 27 </span>16:04 mac-下载-更新.command<br></code></pre></td></tr></table></div></figure><p>这里没有 <code>x</code>，说明脚本不可执行。</p><h3 id="3-赋予可执行权限"><a href="#3-赋予可执行权限" class="headerlink" title="3. 赋予可执行权限"></a>3. 赋予可执行权限</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o4tqmamfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-o4tqmamfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x <span class="hljs-string">&quot;mac-下载-更新.command&quot;</span><br></code></pre></td></tr></table></div></figure><p>再次查看权限：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8z6cm7mfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-8z6cm7mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l <span class="hljs-string">&quot;mac-下载-更新.command&quot;</span><br></code></pre></td></tr></table></div></figure><p>输出应变为：</p><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-q592w2mfcwb3ct"></i><span>TAP</span><div class="collapse show" id="collapse-q592w2mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">-rwxr-xr-x@<span class="hljs-number"> 1 </span>libao staff<span class="hljs-number"> 149 </span>8<span class="hljs-number"> 27 </span>16:04 mac-下载-更新.command<br></code></pre></td></tr></table></div></figure><p>现在文件可执行。</p><h3 id="4-执行脚本"><a href="#4-执行脚本" class="headerlink" title="4. 执行脚本"></a>4. 执行脚本</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o6spwimfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-o6spwimfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mac-下载-更新.<span class="hljs-built_in">command</span><br></code></pre></td></tr></table></div></figure><blockquote><p>注意：因为目录名有空格，需要用引号或转义空格。</p></blockquote><h3 id="5-系统安全提示"><a href="#5-系统安全提示" class="headerlink" title="5. 系统安全提示"></a>5. 系统安全提示</h3><p>macOS 可能会阻止未知来源的脚本运行，如果弹出提示：</p><ul><li>打开 <strong>系统设置 → 隐私与安全 → 安全性与隐私</strong>。</li><li>点击允许执行被阻止的应用。</li><li>右键脚本选择 <strong>打开</strong>，系统会提示确认。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>核心问题是脚本没有执行权限。  </li><li>使用 <code>chmod +x</code> 赋予权限后即可运行。  </li><li>macOS 安全机制可能需要手动允许运行。</li></ol><hr><p>现在，你可以直接双击脚本或在终端运行，它就能正常执行了。</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
      <category>macOS系统日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 部署 Git 仓库 SSH 多账号问题解决指南</title>
    <link href="/2025/08/27/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/Hexo%20%E9%83%A8%E7%BD%B2%20Git%20%E4%BB%93%E5%BA%93%20SSH%20%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%8C%87%E5%8D%97/"/>
    <url>/2025/08/27/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/Hexo%20%E9%83%A8%E7%BD%B2%20Git%20%E4%BB%93%E5%BA%93%20SSH%20%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-部署-Git-仓库-SSH-多账号问题解决指南"><a href="#Hexo-部署-Git-仓库-SSH-多账号问题解决指南" class="headerlink" title="Hexo 部署 Git 仓库 SSH 多账号问题解决指南"></a>Hexo 部署 Git 仓库 SSH 多账号问题解决指南</h1><p>在使用 Hexo 部署博客时，如果本机有多个 GitHub 或 GitLab 账号，可能会遇到如下错误：</p><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qy0xr2mfcwb3cm"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-qy0xr2mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></div></figure><p>本文将详细说明排查思路与解决方案。</p><hr><h2 id="1️⃣-问题现象"><a href="#1️⃣-问题现象" class="headerlink" title="1️⃣ 问题现象"></a>1️⃣ 问题现象</h2><ol><li>默认 SSH 账号能连接 GitHub：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-k0vivumfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-k0vivumfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># Hi lifuaini2019! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>自定义 SSH 账号无法连接：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hd2hxumfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-hd2hxumfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@lb.github.com<br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># ssh: connect to host github.com port 22: Connection timed out</span><br></code></pre></td></tr></table></div></figure><hr><h2 id="2️⃣-问题分析"><a href="#2️⃣-问题分析" class="headerlink" title="2️⃣ 问题分析"></a>2️⃣ 问题分析</h2><ul><li>默认账户连接正常，说明 Git 与 SSH 本身没问题。</li><li>自定义账号连接超时，说明 SSH 配置里 <strong>走的是 22 端口</strong>，但网络被屏蔽。</li><li>Hexo deploy 依赖 <code>hexo-deployer-git</code> 调用 Git，如果 SSH 连接失败，就会报 <code>Spawn failed</code>。</li></ul><hr><h2 id="3️⃣-多账户-SSH-配置示例"><a href="#3️⃣-多账户-SSH-配置示例" class="headerlink" title="3️⃣ 多账户 SSH 配置示例"></a>3️⃣ 多账户 SSH 配置示例</h2><p>在 <code>~/.ssh/config</code> 中配置多个账号：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kj1oyqmfcwb3cm"></i><span>SSH</span><div class="collapse show" id="collapse-kj1oyqmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ssh"># GitHub 账户 one<br>Host lb.github.com<br>    HostName ssh.github.com  # 注意这里改成 ssh.github.com<br>    Port 443                 # 避免 22 端口被屏蔽<br>    User git<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa<br><br># GitHub 账户 two<br>Host zy.github.com<br>    HostName ssh.github.com<br>    Port 443<br>    User git<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa_zy<br><br># GitLab 账户<br>Host gitlab.com<br>    HostName gitlab.com<br>    User git<br>    IdentityFile ~/.ssh/id_rsa_lab6435<br><br># 远程设备 wky101<br>Host wky101<br>    HostName 192.168.3.101<br>    User root<br>    IdentityFile ~/.ssh/id_rsa_wky101<br></code></pre></td></tr></table></div></figure><blockquote><p>⚠ 注意：</p><ul><li>每个 <code>Host</code> 都可以是任意别名，比如 <code>lb.github.com</code>、<code>zy.github.com</code>。</li><li>SSH key 文件路径正确且可用。</li><li>对于国内网络，GitHub 默认 22 端口可能被屏蔽，改用 <code>ssh.github.com:443</code>。</li></ul></blockquote><hr><h2 id="4️⃣-测试-SSH-连接"><a href="#4️⃣-测试-SSH-连接" class="headerlink" title="4️⃣ 测试 SSH 连接"></a>4️⃣ 测试 SSH 连接</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mmahximfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-mmahximfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@lb.github.com<br>ssh -T git@zy.github.com<br>ssh -T git@gitlab.com<br></code></pre></td></tr></table></div></figure><p>输出类似：</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-k5f9ismfcwb3cm"></i><span>ADA</span><div class="collapse show" id="collapse-k5f9ismfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Hi lifuaini2019! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></div></figure><p>说明 SSH 配置正确。</p><hr><h2 id="5️⃣-Hexo-config-yml-deploy-配置示例"><a href="#5️⃣-Hexo-config-yml-deploy-配置示例" class="headerlink" title="5️⃣ Hexo _config.yml deploy 配置示例"></a>5️⃣ Hexo <code>_config.yml</code> deploy 配置示例</h2><p>如果使用 SSH，部署配置如下：</p><figure class="highlight yml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-u6a38omfcwb3cm"></i><span>YML</span><div class="collapse show" id="collapse-u6a38omfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@lb.github.com:用户名/仓库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></div></figure><blockquote><p>如果你想使用第二个账号：</p><figure class="highlight yml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5sia9qmfcwb3cm"></i><span>YML</span><div class="collapse show" id="collapse-5sia9qmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@zy.github.com:用户名/仓库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></div></figure></blockquote><hr><h2 id="6️⃣-部署步骤"><a href="#6️⃣-部署步骤" class="headerlink" title="6️⃣ 部署步骤"></a>6️⃣ 部署步骤</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6r9iy5mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-6r9iy5mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean      <span class="hljs-comment"># 清理缓存</span><br>hexo g          <span class="hljs-comment"># 生成静态文件</span><br>hexo d          <span class="hljs-comment"># 部署到远程仓库</span><br></code></pre></td></tr></table></div></figure><ul><li>如果一切配置正确，就可以顺利部署。</li><li>SSH 端口、密钥、remote URL 都是关键。</li></ul><hr><h2 id="7️⃣-总结"><a href="#7️⃣-总结" class="headerlink" title="7️⃣ 总结"></a>7️⃣ 总结</h2><ol><li>多账号 SSH 需要在 <code>~/.ssh/config</code> 中分别配置别名。</li><li>国内网络可能屏蔽 22 端口，建议用 <code>ssh.github.com:443</code>。</li><li>Hexo deploy 的 repository URL 对应 SSH 别名。</li><li>每次部署前可用 <code>ssh -T</code> 测试连接，确保密钥有效。</li></ol><p>这样，你的 Hexo 部署就能安全、稳定地支持多个账号。</p><hr><p><strong>小提示</strong>：以后如果新增 GitHub 账号，只需在 <code>~/.ssh/config</code> 添加一段对应配置，然后在 Hexo 配置里改 URL 即可。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git命令</tag>
      
      <tag>GPT学习</tag>
      
      <tag>GitHub</tag>
      
      <tag>hexo博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未来十年印度经济走向预测</title>
    <link href="/2025/08/27/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E6%9C%AA%E6%9D%A5%E5%8D%81%E5%B9%B4%E5%8D%B0%E5%BA%A6%E7%BB%8F%E6%B5%8E%E8%B5%B0%E5%90%91%E9%A2%84%E6%B5%8B/"/>
    <url>/2025/08/27/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E6%9C%AA%E6%9D%A5%E5%8D%81%E5%B9%B4%E5%8D%B0%E5%BA%A6%E7%BB%8F%E6%B5%8E%E8%B5%B0%E5%90%91%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="未来十年印度经济走向预测（2025–2035）"><a href="#未来十年印度经济走向预测（2025–2035）" class="headerlink" title="未来十年印度经济走向预测（2025–2035）"></a>未来十年印度经济走向预测（2025–2035）</h1><h2 id="一、总体趋势"><a href="#一、总体趋势" class="headerlink" title="一、总体趋势"></a>一、总体趋势</h2><p>未来十年，印度经济将面临<strong>结构性转型与高质量发展并行的阶段</strong>。预计年均GDP增速会逐步放缓，但经济质量和创新能力将明显提升。核心趋势可归纳为：</p><ol><li><p><strong>增速放缓，结构优化</strong>  </p><ul><li>GDP增速预计保持在 <strong>5–6%</strong> 区间（相对过去十年的7–8%略低）。  </li><li>经济增长将更多依赖<strong>消费升级、服务业和技术创新</strong>，而非大规模基础设施投资。</li></ul></li><li><p><strong>科技驱动成为主要引擎</strong>  </p><ul><li><strong>人工智能、半导体、生物科技、新能源</strong>将成为未来十年的核心增长点。  </li><li>高技术制造和数字经济对GDP的贡献将显著增加，传统劳动密集型产业占比下降。</li></ul></li><li><p><strong>人口红利消失，劳动力结构变化</strong>  </p><ul><li>劳动力人口虽然仍在增长，但高素质人才短缺，对教育、培训和技能提升提出更高需求。  </li><li>人工智能、自动化、机器人将部分替代低技能劳动力，推动产业升级。</li></ul></li></ol><hr><h2 id="二、关键产业发展预测"><a href="#二、关键产业发展预测" class="headerlink" title="二、关键产业发展预测"></a>二、关键产业发展预测</h2><table><thead><tr><th>产业</th><th>趋势</th><th>机会与挑战</th></tr></thead><tbody><tr><td><strong>人工智能与数字经济</strong></td><td>AI、大数据、云计算、数字金融</td><td>政策支持力度加大，企业应用场景丰富；技术人才需求高，创新空间大</td></tr><tr><td><strong>新能源与绿色经济</strong></td><td>光伏、风能、储能、氢能、碳中和产业</td><td>政策红利持续，可投资空间大；技术更新快，竞争激烈</td></tr><tr><td><strong>生物科技与健康产业</strong></td><td>医疗器械、疫苗、基因检测、养老服务</td><td>消费升级和人口老龄化推动；监管严格，研发周期长</td></tr><tr><td><strong>高端制造业</strong></td><td>半导体、智能装备、航空航天、新能源汽车</td><td>战略支撑强，全球需求增长；资金和技术门槛高</td></tr><tr><td><strong>现代服务业</strong></td><td>教育培训、金融科技、文化创意、物流</td><td>消费升级驱动；行业碎片化，需要创新模式</td></tr></tbody></table><hr><h2 id="三、区域经济差异"><a href="#三、区域经济差异" class="headerlink" title="三、区域经济差异"></a>三、区域经济差异</h2><ul><li><strong>孟买-浦那-班加罗尔经济带</strong>：科技、金融、创新企业集中，未来仍是印度经济的增长核心。  </li><li><strong>德里-诺伊达-古尔冈</strong>：高端制造和数字经济密集区，出口和创新驱动明显。  </li><li><strong>中部和南部内陆地区</strong>：受益于基础设施建设和政策支持，新能源和制造产业增长快，但经济总量增速仍低于沿海城市。</li></ul><hr><h2 id="四、全球环境与外部挑战"><a href="#四、全球环境与外部挑战" class="headerlink" title="四、全球环境与外部挑战"></a>四、全球环境与外部挑战</h2><ol><li><p><strong>全球贸易格局变化</strong>  </p><ul><li>地缘政治风险、科技脱钩、供应链重组可能影响出口型产业。  </li><li>对外贸易依赖需转向<strong>高技术产品与服务出口</strong>。</li></ul></li><li><p><strong>全球经济波动</strong>  </p><ul><li>国际能源价格、金融市场不稳定可能带来周期性冲击。  </li><li>印度需要强化内需，减少外部依赖风险。</li></ul></li><li><p><strong>技术竞争</strong>  </p><ul><li>与美欧在半导体、AI、航空航天等领域的竞争将加剧。  </li><li>自主创新和知识产权保护成为关键。</li></ul></li></ol><hr><h2 id="五、个人与企业机会"><a href="#五、个人与企业机会" class="headerlink" title="五、个人与企业机会"></a>五、个人与企业机会</h2><ol><li><p><strong>普通人机会</strong>  </p><ul><li>技术技能培训、数字创作、直播带货、健康管理服务等领域仍有快速成长空间。  </li><li>绿色能源、新能源汽车、智能家居相关创业机会大。</li></ul></li><li><p><strong>企业机会</strong>  </p><ul><li>高科技制造、现代服务业、医养产业链投资和创业机会明显。  </li><li>依托政策和资本支持，早期布局高增长行业可获得先发优势。</li></ul></li></ol><hr><h2 id="六、风险提示"><a href="#六、风险提示" class="headerlink" title="六、风险提示"></a>六、风险提示</h2><ol><li><strong>人口老龄化和技能不足</strong>：劳动力结构不均衡，教育和培训压力大。  </li><li><strong>债务与金融风险</strong>：地方债务、企业债务、高杠杆行业仍需谨慎。  </li><li><strong>技术脱钩与外部制裁</strong>：核心技术受制于人可能影响战略产业发展。</li></ol><hr><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>未来十年，印度经济将从<strong>高速增长阶段进入高质量发展阶段</strong>。  </p><ul><li><strong>增长模式</strong>：从投资和出口驱动转向<strong>科技创新+消费升级+服务业驱动</strong>。  </li><li><strong>机会核心</strong>：AI、绿色能源、高端制造、健康产业和数字服务。  </li><li><strong>生存法则</strong>：敢于尝试、拥抱科技、面向全球市场，同时关注政策导向和长期趋势。</li></ul><blockquote><p>简而言之，<strong>下一个十年，科技、绿色、创新和消费升级将是印度经济的关键词。敢创新、敢尝试的人和企业，将获得最多机会</strong>。  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>生活与日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>教程：解决冲突与卡住问题</title>
    <link href="/2025/08/27/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E6%95%99%E7%A8%8B%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%E4%B8%8E%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2025/08/27/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E6%95%99%E7%A8%8B%EF%BC%9A%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%E4%B8%8E%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-部署-GitHub-教程：解决冲突与卡住问题"><a href="#Hexo-部署-GitHub-教程：解决冲突与卡住问题" class="headerlink" title="Hexo 部署 GitHub 教程：解决冲突与卡住问题"></a>Hexo 部署 GitHub 教程：解决冲突与卡住问题</h1><p>在使用 Hexo 部署博客到 GitHub 仓库的过程中，经常会遇到以下问题：</p><ol><li><code>hexo d</code> 卡住，推送失败</li><li>远程分支比本地更新，导致 push 被拒绝</li><li>文件冲突（例如同一篇文章在本地和远程都修改过）</li></ol><p>本文将详细讲解这些问题的原因及解决方案。</p><hr><h2 id="1-Hexo-部署流程回顾"><a href="#1-Hexo-部署流程回顾" class="headerlink" title="1. Hexo 部署流程回顾"></a>1. Hexo 部署流程回顾</h2><p>Hexo 部署 GitHub 的核心步骤：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hphqx4mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-hphqx4mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean       <span class="hljs-comment"># 清理生成的缓存文件</span><br>hexo g           <span class="hljs-comment"># 生成静态文件到 public 文件夹</span><br>hexo d           <span class="hljs-comment"># 部署到远程仓库</span><br></code></pre></td></tr></table></div></figure><p>部署时，Hexo 会在根目录生成 <code>.deploy_git</code> 目录，临时存放 Git 仓库内容，然后 push 到远程。</p><hr><h2 id="2-部署卡住-push-中断"><a href="#2-部署卡住-push-中断" class="headerlink" title="2. 部署卡住 &#x2F; push 中断"></a>2. 部署卡住 &#x2F; push 中断</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ezwyn2mfcwb3cm"></i><span>APACHE</span><div class="collapse show" id="collapse-ezwyn2mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Writing</span> objects:  <span class="hljs-number">34</span>% (<span class="hljs-number">1089</span>/<span class="hljs-number">3197</span>), <span class="hljs-number">3</span>.<span class="hljs-number">09</span> MiB | <span class="hljs-number">167</span>.<span class="hljs-number">00</span> KiB/s<br></code></pre></td></tr></table></div></figure><ul><li><p>打包成功，但推送到 GitHub 时卡住不动。</p></li><li><p>常见原因：</p><ol><li>SSH 直连 GitHub 网络不稳定</li><li>一次性提交文件太多</li><li>代理&#x2F;端口未配置好</li></ol></li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方法-1：确保-SSH-使用-443-端口"><a href="#方法-1：确保-SSH-使用-443-端口" class="headerlink" title="方法 1：确保 SSH 使用 443 端口"></a>方法 1：确保 SSH 使用 443 端口</h4><p>在 <code>~/.ssh/config</code> 中添加：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lpulk9mfcwb3cm"></i><span>SSH</span><div class="collapse show" id="collapse-lpulk9mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ssh">Host github.com<br>  HostName ssh.github.com<br>  Port 443<br>  User git<br></code></pre></td></tr></table></div></figure><p>Hexo <code>_config.yml</code> 中保持：</p><figure class="highlight yaml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ic8byvmfcwb3cm"></i><span>YAML</span><div class="collapse show" id="collapse-ic8byvmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:用户名/仓库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></div></figure><h4 id="方法-2：删除-deploy-git-重新部署"><a href="#方法-2：删除-deploy-git-重新部署" class="headerlink" title="方法 2：删除 .deploy_git 重新部署"></a>方法 2：删除 <code>.deploy_git</code> 重新部署</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0a7ockmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-0a7ockmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf .deploy_git<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></div></figure><h4 id="方法-3：改用-HTTPS-部署（更稳定）"><a href="#方法-3：改用-HTTPS-部署（更稳定）" class="headerlink" title="方法 3：改用 HTTPS 部署（更稳定）"></a>方法 3：改用 HTTPS 部署（更稳定）</h4><figure class="highlight yaml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-b1ky49mfcwb3cm"></i><span>YAML</span><div class="collapse show" id="collapse-b1ky49mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/用户名/仓库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></div></figure><p>配置 GitHub Token，HTTPS 推送更稳定。</p><hr><h2 id="3-远程分支比本地更新（non-fast-forward）"><a href="#3-远程分支比本地更新（non-fast-forward）" class="headerlink" title="3. 远程分支比本地更新（non-fast-forward）"></a>3. 远程分支比本地更新（non-fast-forward）</h2><h3 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h3><figure class="highlight xl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-e76yuvmfcwb3cm"></i><span>XL</span><div class="collapse show" id="collapse-e76yuvmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl">! [<span class="hljs-function"><span class="hljs-title">rejected</span>] befe -&gt;</span> befe (fetch first)<br>Updates were rejected because the remote <span class="hljs-built_in">contains</span> work that you <span class="hljs-keyword">do</span> <span class="hljs-built_in">not</span> have <span class="hljs-built_in">locally</span>.<br></code></pre></td></tr></table></div></figure><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方法-1：合并远程更新（推荐）"><a href="#方法-1：合并远程更新（推荐）" class="headerlink" title="方法 1：合并远程更新（推荐）"></a>方法 1：合并远程更新（推荐）</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dp9bo3mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-dp9bo3mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br>git merge origin/befe<br><span class="hljs-comment"># 解决冲突后</span><br>git push origin befe<br></code></pre></td></tr></table></div></figure><h4 id="方法-2：直接覆盖远程（危险，但适合-Hexo-部署分支）"><a href="#方法-2：直接覆盖远程（危险，但适合-Hexo-部署分支）" class="headerlink" title="方法 2：直接覆盖远程（危险，但适合 Hexo 部署分支）"></a>方法 2：直接覆盖远程（危险，但适合 Hexo 部署分支）</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g2hch6mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-g2hch6mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin befe --force<br></code></pre></td></tr></table></div></figure><hr><h2 id="4-文件冲突（add-add）"><a href="#4-文件冲突（add-add）" class="headerlink" title="4. 文件冲突（add&#x2F;add）"></a>4. 文件冲突（add&#x2F;add）</h2><h3 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h3><figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hihfhfmfcwb3cm"></i><span>PGSQL</span><div class="collapse show" id="collapse-hihfhfmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CONFLICT</span> (<span class="hljs-keyword">add</span>/<span class="hljs-keyword">add</span>): Merge <span class="hljs-keyword">conflict</span> <span class="hljs-keyword">in</span> source/_posts/xxx.md<br>Automatic merge failed; fix conflicts <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">commit</span> the result.<br></code></pre></td></tr></table></div></figure><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><ol><li>查看冲突文件</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gyydqqmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-gyydqqmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></div></figure><ol start="2"><li>决定保留版本：</li></ol><ul><li>保留本地版本：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-shffgjmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-shffgjmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout --ours path/to/file<br></code></pre></td></tr></table></div></figure><ul><li>保留远程版本：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kztlu5mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-kztlu5mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout --theirs path/to/file<br></code></pre></td></tr></table></div></figure><ul><li>手动合并两者内容，删除 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> 等标记</li></ul><ol start="3"><li>标记已解决：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xp4jecmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-xp4jecmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add path/to/file<br></code></pre></td></tr></table></div></figure><ol start="4"><li>提交：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9gic6dmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-9gic6dmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;解决冲突&quot;</span><br></code></pre></td></tr></table></div></figure><ol start="5"><li>推送：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g6sg97mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-g6sg97mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin befe<br></code></pre></td></tr></table></div></figure><p>💡 如果这是 Hexo 部署分支，通常直接保留本地版本并强制 push 是最简单的方式：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-v71s6fmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-v71s6fmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;覆盖远程内容，解决冲突&quot;</span><br>git push origin befe --force<br></code></pre></td></tr></table></div></figure><hr><h2 id="5-总结建议"><a href="#5-总结建议" class="headerlink" title="5. 总结建议"></a>5. 总结建议</h2><ol><li>Hexo 部署分支建议专用，如 <code>gh-pages</code>，避免和主分支冲突</li><li>多账户 SSH 用 Host 别名管理，User 一律用 <code>git</code></li><li>网络不稳可用 HTTPS + Token 或 SSH 443 端口</li><li>遇到冲突，手动解决或直接强制覆盖远程</li></ol><hr><p>这样一套操作流程，可以保证 Hexo 部署稳定，不会再卡住，也能顺利更新远程仓库。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python批量键码短语转换脚本</title>
    <link href="/2025/08/27/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Python%E6%89%B9%E9%87%8F%E9%94%AE%E7%A0%81%E7%9F%AD%E8%AF%AD%E8%BD%AC%E6%8D%A2%E8%84%9A%E6%9C%AC/"/>
    <url>/2025/08/27/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Python%E6%89%B9%E9%87%8F%E9%94%AE%E7%A0%81%E7%9F%AD%E8%AF%AD%E8%BD%AC%E6%8D%A2%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-批量键码短语转换脚本"><a href="#Python-批量键码短语转换脚本" class="headerlink" title="Python 批量键码短语转换脚本"></a>Python 批量键码短语转换脚本</h1><p>在使用五笔输入法或者自定义短语时，经常需要把“短语 + 键码 + 数量”的格式，批量转换成“键码,数量&#x3D;短语”的格式，或者反向还原。本文提供一款 <strong>双向批量转换 Python 脚本</strong>，适合处理大量短语记录。</p><hr><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><ol><li><strong>正向转换（Forward）</strong></li></ol><p>原始格式：</p><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o74dn0mfcwb3co"></i><span>FIX</span><div class="collapse show" id="collapse-o74dn0mfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">短语    键码    数量<br></code></pre></td></tr></table></figure><p>转换后格式：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">键码,数量</span>=<span class="hljs-string">短语</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>反向转换（Reverse）</strong></li></ol><p>原始格式：</p><figure class="highlight fix"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-h4us0dmfcwb3co"></i><span>FIX</span><div class="collapse show" id="collapse-h4us0dmfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">键码,数量</span>=<span class="hljs-string">短语</span><br></code></pre></td></tr></table></div></figure><p>转换后格式：</p><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-c31lm7mfcwb3co"></i><span>PYTHON</span><div class="collapse show" id="collapse-c31lm7mfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">短语    键码    数量<br></code></pre></td></tr></table></figure><hr><h2 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">双向批量转换脚本</span><br><span class="hljs-string">支持：</span><br><span class="hljs-string">1. 正向转换：短语+键码+数量 -&gt; 键码,数量=短语</span><br><span class="hljs-string">2. 反向转换：键码,数量=短语 -&gt; 短语+键码+数量</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># ===== 配置 =====</span><br>input_file = <span class="hljs-string">&quot;input.txt&quot;</span>   <span class="hljs-comment"># 输入文件路径</span><br>output_file = <span class="hljs-string">&quot;output.txt&quot;</span> <span class="hljs-comment"># 输出文件路径</span><br>mode = <span class="hljs-string">&quot;forward&quot;</span>           <span class="hljs-comment"># 模式: &quot;forward&quot; 或 &quot;reverse&quot;</span><br><br><span class="hljs-comment"># ===== 处理 =====</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>        line = line.strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&quot;forward&quot;</span>:<br>                <span class="hljs-comment"># 正向转换</span><br>                parts = line.rsplit(<span class="hljs-string">&quot;\t&quot;</span>, <span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(parts) &lt; <span class="hljs-number">3</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;警告：无法解析此行 -&gt; <span class="hljs-subst">&#123;line&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">continue</span><br>                short_phrase = parts[<span class="hljs-number">0</span>]<br>                key_code = parts[<span class="hljs-number">1</span>]<br>                number = parts[<span class="hljs-number">2</span>]<br>                f.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key_code&#125;</span>,<span class="hljs-subst">&#123;number&#125;</span>=<span class="hljs-subst">&#123;short_phrase&#125;</span>\n&quot;</span>)<br>            <span class="hljs-keyword">elif</span> mode == <span class="hljs-string">&quot;reverse&quot;</span>:<br>                <span class="hljs-comment"># 反向转换</span><br>                key_num, short_phrase = line.split(<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">1</span>)<br>                key_code, number = key_num.split(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-number">1</span>)<br>                f.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;short_phrase&#125;</span>\t<span class="hljs-subst">&#123;key_code&#125;</span>\t<span class="hljs-subst">&#123;number&#125;</span>\n&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;模式错误，请使用 &#x27;forward&#x27; 或 &#x27;reverse&#x27;&quot;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;处理行出错: <span class="hljs-subst">&#123;line&#125;</span>\n错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;转换完成，结果已保存到 <span class="hljs-subst">&#123;output_file&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></div></figure><hr><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol><li><strong>准备输入文件</strong></li></ol><ul><li>正向转换：<code>input.txt</code> 每行格式为：</li></ul><figure class="highlight node-repl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mkpfgrmfcwb3co"></i><span>NODE-REPL</span><div class="collapse show" id="collapse-mkpfgrmfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">短语1    键码1    数量1<br>短语2    键码2    数量2<br><span class="hljs-meta prompt_">...</span><br></code></pre></td></tr></table></div></figure><ul><li>反向转换：<code>input.txt</code> 每行格式为：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tyu3zomfcwb3co"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-tyu3zomfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">键码1,数量<span class="hljs-attribute">1</span>=短语1<br>键码2,数量<span class="hljs-attribute">2</span>=短语2<br><span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>修改模式</strong></li></ol><figure class="highlight python"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7l27lbmfcwb3co"></i><span>PYTHON</span><div class="collapse show" id="collapse-7l27lbmfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">mode = <span class="hljs-string">&quot;forward&quot;</span>   <span class="hljs-comment"># 正向转换</span><br>mode = <span class="hljs-string">&quot;reverse&quot;</span>   <span class="hljs-comment"># 反向转换</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>运行脚本</strong></li></ol><ul><li><p>Windows：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1wglggmfcwb3co"></i><span>BASH</span><div class="collapse show" id="collapse-1wglggmfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python batch_convert.py<br></code></pre></td></tr></table></div></figure></li><li><p>Mac &#x2F; Linux：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0tkpa1mfcwb3co"></i><span>BASH</span><div class="collapse show" id="collapse-0tkpa1mfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 batch_convert.py<br></code></pre></td></tr></table></div></figure></li></ul><ol start="4"><li><strong>查看输出</strong></li></ol><ul><li>输出文件为 <code>output.txt</code>，根据模式生成对应内容。</li></ul><ol start="5"><li><strong>准备文件</strong></li></ol><ul><li>脚本仅使用 Python 标准库，无需安装额外库。</li><li>将 <code>batch_convert.py</code> 和 <code>input.txt</code> 放在同一个目录下。</li><li>修改模式 <code>mode = &quot;forward&quot;</code> 或 <code>mode = &quot;reverse&quot;</code>。</li></ul><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>原始短语示例（正向）：</strong></p><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1x3d00mfcwb3co"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-1x3d00mfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">高级蓝牙加按键版（全国版，可按键操作）    trww    3<br>特价款（单城市）    twwffi    3<br></code></pre></td></tr></table></figure><p><strong>正向转换后输出：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">trww,<span class="hljs-attribute">3</span>=高级蓝牙加按键版（全国版，可按键操作）<br>twwffi,<span class="hljs-attribute">3</span>=特价款（单城市）<br></code></pre></td></tr></table></div></figure><p><strong>反向转换后输出：</strong></p><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qsvyqwmfcwb3co"></i><span>BASH</span><div class="collapse show" id="collapse-qsvyqwmfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">高级蓝牙加按键版（全国版，可按键操作）    trww    3<br>特价款（单城市）    twwffi    3<br></code></pre></td></tr></table></figure><hr><h2 id="新电脑运行环境与依赖"><a href="#新电脑运行环境与依赖" class="headerlink" title="新电脑运行环境与依赖"></a>新电脑运行环境与依赖</h2><ol><li><strong>安装 Python</strong></li></ol><ul><li>下载：<a href="https://www.python.org/downloads/">Python 官网</a></li><li>建议安装 Python 3.10+</li><li>Windows：勾选 “Add Python to PATH”</li><li>Mac：用 Homebrew 安装 <code>brew install python</code></li><li>Linux：使用系统包管理器 <code>sudo apt install python3 python3-pip</code></li></ul><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python --version<br><span class="hljs-comment"># 或</span><br>python3 --version<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>安装依赖</strong></li></ol><ul><li>脚本仅使用 Python 标准库，无需安装额外库。</li></ul><ol start="3"><li><strong>准备文件</strong></li></ol><ul><li>将 <code>batch_convert.py</code> 和 <code>input.txt</code> 放在同一个目录下。</li><li>修改模式 <code>mode = &quot;forward&quot;</code> 或 <code>mode = &quot;reverse&quot;</code>。</li></ul><ol start="4"><li><strong>运行脚本</strong></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tif58xmfcwb3co"></i><span>BASH</span><div class="collapse show" id="collapse-tif58xmfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python batch_convert.py   <span class="hljs-comment"># Windows</span><br>python3 batch_convert.py  <span class="hljs-comment"># Mac / Linux</span><br></code></pre></td></tr></table></div></figure><ol start="5"><li><strong>查看输出</strong></li></ol><ul><li>输出文件为 <code>output.txt</code>，根据模式生成对应内容。</li></ul><ol start="6"><li><strong>小技巧</strong></li></ol><ul><li><p>Windows 可创建 <code>.bat</code> 文件一键运行：</p><figure class="highlight bat"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1enkblmfcwb3co"></i><span>BAT</span><div class="collapse show" id="collapse-1enkblmfcwb3co"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>python batch_convert.py<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></div></figure></li><li><p>可批量处理多文件，只需修改 <code>input_file</code> 即可。</p></li><li><p>Python 3.6+ 都可以运行。</p></li></ul><hr><h2 id="小技巧（Tips）"><a href="#小技巧（Tips）" class="headerlink" title="小技巧（Tips）"></a>小技巧（Tips）</h2><ol><li>Windows：直接把输入文件拖到脚本同目录，运行即可。</li><li>Mac&#x2F;Linux：终端进入脚本目录，运行 <code>python3 batch_convert.py</code>。</li><li>支持批量处理上百行甚至上千行短语记录，非常适合自定义输入法或整理键码短语。</li></ol>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>md命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SAP BTP Cloud Foundry 部署静态网站</title>
    <link href="/2025/08/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/SAPBTPCloudFoundry%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
    <url>/2025/08/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/SAPBTPCloudFoundry%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="在-SAP-BTP-Cloud-Foundry-部署静态网站（以“上院李村庄查询系统”为例）"><a href="#在-SAP-BTP-Cloud-Foundry-部署静态网站（以“上院李村庄查询系统”为例）" class="headerlink" title="在 SAP BTP Cloud Foundry 部署静态网站（以“上院李村庄查询系统”为例）"></a>在 SAP BTP Cloud Foundry 部署静态网站（以“上院李村庄查询系统”为例）</h1><p>很多朋友拿到 SAP BTP 的 Trial 账号后，都希望把自己的前端网页部署到云端，供别人访问。这里介绍一个最简单、最稳定的方法 —— 使用 <strong>Staticfile Buildpack</strong> 来托管纯静态网站。</p><hr><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ul><li>一个 SAP BTP trial 账号（Cloud Foundry 环境）  </li><li>一个前端页面文件，比如 <code>index.html</code>  </li><li>一个空白文件 <code>Staticfile</code>（注意大小写，必须是这个名字）</li></ul><p>项目目录结构如下：</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jza104mfcwb3cm"></i><span>TEXT</span><div class="collapse show" id="collapse-jza104mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">shy/<br> ├── index.html      ← 你的网站主页<br> └── Staticfile      ← 告诉 Cloud Foundry 使用 staticfile_buildpack<br></code></pre></td></tr></table></div></figure><p>📌 <strong>提示</strong>：<code>Staticfile</code> 文件可以为空，它只是告诉 CF 使用静态文件 buildpack。</p><hr><h2 id="二、打包成-zip"><a href="#二、打包成-zip" class="headerlink" title="二、打包成 zip"></a>二、打包成 zip</h2><p>将 <code>shy/</code> 目录压缩为 <code>shy.zip</code>。</p><p>⚠️ 注意：不要多一层目录，<code>shy.zip</code> 文件里要直接包含 <code>index.html</code> 和 <code>Staticfile</code>。</p><hr><h2 id="三、部署到-SAP-BTP"><a href="#三、部署到-SAP-BTP" class="headerlink" title="三、部署到 SAP BTP"></a>三、部署到 SAP BTP</h2><p>有两种方式：</p><h3 id="方法一：BTP-Cockpit-网页上传（最简单）"><a href="#方法一：BTP-Cockpit-网页上传（最简单）" class="headerlink" title="方法一：BTP Cockpit 网页上传（最简单）"></a>方法一：BTP Cockpit 网页上传（最简单）</h3><ol><li>登录 <strong>SAP BTP Cockpit</strong>  </li><li>进入你的 <strong>子账户 → Cloud Foundry → 空间（Space）</strong>  </li><li>点击 <strong>部署应用</strong> → 上传 <code>shy.zip</code>  </li><li>在内存和磁盘配置里填：  <ul><li>内存：<code>256M</code>  </li><li>磁盘：<code>256M</code></li></ul></li><li>点击 <strong>部署</strong>，完成后系统会生成一个访问地址，比如：</li></ol><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6odup0mfcwb3cm"></i><span>DTS</span><div class="collapse show" id="collapse-6odup0mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//shy.cfapps.us10-001.hana.ondemand.com</span><br></code></pre></td></tr></table></div></figure><p>在浏览器中打开，即可访问你的网站。</p><hr><h3 id="方法二：使用-cf-CLI-部署（推荐）"><a href="#方法二：使用-cf-CLI-部署（推荐）" class="headerlink" title="方法二：使用 cf CLI 部署（推荐）"></a>方法二：使用 cf CLI 部署（推荐）</h3><ol><li><p>安装 <a href="https://github.com/cloudfoundry/cli">Cloud Foundry CLI</a>  </p><ul><li>Windows 用户可下载 <code>.exe</code> 安装包  </li><li>macOS&#x2F;Linux 可通过 <code>brew</code> 或 <code>apt</code> 安装</li></ul></li><li><p>登录 Cloud Foundry  </p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-71yi4smfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-71yi4smfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cf login -a https://api.cf.us10.hana.ondemand.com<br></code></pre></td></tr></table></div></figure><p>按提示输入邮箱、密码、Org 和 Space。</p></li><li><p>切换到项目目录  </p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-10f1gbmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-10f1gbmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shy<br></code></pre></td></tr></table></div></figure></li><li><p>执行部署命令  </p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-332jkwmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-332jkwmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cf push shy -b staticfile_buildpack -m 256M -k 256M<br></code></pre></td></tr></table></div></figure><ul><li><code>-b staticfile_buildpack</code> 指定使用静态文件 buildpack  </li><li><code>-m 256M</code> 设置内存  </li><li><code>-k 256M</code> 设置磁盘空间</li></ul></li><li><p>部署完成后，cf CLI 会输出访问 URL，例如：</p></li></ol><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vru8z2mfcwb3cm"></i><span>STYLUS</span><div class="collapse show" id="collapse-vru8z2mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">routes:<br>  shy<span class="hljs-selector-class">.cfapps</span><span class="hljs-selector-class">.us10-001</span><span class="hljs-selector-class">.hana</span><span class="hljs-selector-class">.ondemand</span>.com<br></code></pre></td></tr></table></div></figure><p>在浏览器中访问该地址，即可看到你的网站。</p><hr><p>✅ 至此，你的静态网页已经成功部署到 <strong>SAP BTP Cloud Foundry</strong>！</p><p>💡 如果你的网站包含多个 HTML 页面或静态资源（CSS&#x2F;JS&#x2F;图片），只需一并放进 <code>shy/</code> 目录再打包即可。</p>]]></content>
    
    
    <categories>
      
      <category>服务器使用命令</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>新电脑配SSH连接GitHub的完整教程</title>
    <link href="/2025/08/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8DSSH%E8%BF%9E%E6%8E%A5GitHub%E7%9A%84%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    <url>/2025/08/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8DSSH%E8%BF%9E%E6%8E%A5GitHub%E7%9A%84%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="新电脑配SSH连接GitHub的完整教程（自定义密钥名称）"><a href="#新电脑配SSH连接GitHub的完整教程（自定义密钥名称）" class="headerlink" title="新电脑配SSH连接GitHub的完整教程（自定义密钥名称）"></a>新电脑配SSH连接GitHub的完整教程（自定义密钥名称）</h1><h2 id="1-检查本地是否已有-SSH-密钥"><a href="#1-检查本地是否已有-SSH-密钥" class="headerlink" title="1 检查本地是否已有 SSH 密钥"></a>1 检查本地是否已有 SSH 密钥</h2><p>打开 <strong>终端</strong>，输入：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-oumk3rmfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-oumk3rmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -al ~/.ssh<br></code></pre></td></tr></table></div></figure><p>可以查找本地有没有密钥，<br>—图<br>如果你上面就是有！</p><ul><li>如果没有密钥，可以生成新的。</li><li>如果已有密钥，决定是否继续使用已有密钥或生成新密钥。</li></ul><hr><h2 id="2-生成新的-SSH-密钥"><a href="#2-生成新的-SSH-密钥" class="headerlink" title="2 生成新的 SSH 密钥"></a>2 生成新的 SSH 密钥</h2><p>假设你的邮箱是 <code>lifuaini2019@gmail.com</code>，想把密钥命名为 <code>id_rsa</code>：</p><figure class="highlight perl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5zuj1hmfcwb3ct"></i><span>PERL</span><div class="collapse show" id="collapse-5zuj1hmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;lifuaini2019<span class="hljs-variable">@gmail</span>.com&quot;</span> -f ~<span class="hljs-regexp">/.ssh/id</span>_rsa<br></code></pre></td></tr></table></div></figure><p>说明：</p><ul><li><p><code>-t ed25519</code>：使用 Ed25519 算法（安全、快速）</p></li><li><p><code>-C</code>：加标签，便于识别</p></li><li><p><code>-f</code>：指定密钥文件名，生成：</p><ul><li>私钥：<code>~/.ssh/id_rsa</code></li><li>公钥：<code>~/.ssh/id_rsa.pub</code></li></ul></li></ul><p><strong>提示：</strong></p><ul><li>系统会提示输入 passphrase（密码短语），可以设置，也可以留空直接回车。</li></ul><hr><p>如果当地有这些文件的不用生成<br>可以给这些文件加权限，可选</p><h4 id="Step-1：修正-ssh-config-文件权限"><a href="#Step-1：修正-ssh-config-文件权限" class="headerlink" title="Step 1：修正 .ssh/config 文件权限"></a>Step 1：修正 <code>.ssh/config</code> 文件权限</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qer8z3mfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-qer8z3mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 600 ~/.ssh/config<br></code></pre></td></tr></table></div></figure><h4 id="Step-2：修正-ssh-目录权限"><a href="#Step-2：修正-ssh-目录权限" class="headerlink" title="Step 2：修正 .ssh 目录权限"></a>Step 2：修正 <code>.ssh</code> 目录权限</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cvv7ltmfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-cvv7ltmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 700 ~/.ssh<br></code></pre></td></tr></table></div></figure><h4 id="Step-3：检查私钥权限（通常是-id-rsa-或-id-ed25519）"><a href="#Step-3：检查私钥权限（通常是-id-rsa-或-id-ed25519）" class="headerlink" title="Step 3：检查私钥权限（通常是 id_rsa 或 id_ed25519）"></a>Step 3：检查私钥权限（通常是 id_rsa 或 id_ed25519）</h4><figure class="highlight markdown"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-omykygmfcwb3ct"></i><span>MARKDOWN</span><div class="collapse show" id="collapse-omykygmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">chmod 600 ~/.ssh/id<span class="hljs-emphasis">_rsa</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 或者</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">chmod 600 ~/.ssh/id_</span>ed25519<br></code></pre></td></tr></table></div></figure><h2 id="3-启动-ssh-agent-并添加密钥"><a href="#3-启动-ssh-agent-并添加密钥" class="headerlink" title="3 启动 ssh-agent 并添加密钥"></a>3 启动 ssh-agent 并添加密钥</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2hd70bmfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-2hd70bmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></div></figure><p>确认密钥已加载：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-72brgsmfcwb3ct"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-72brgsmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ssh-<span class="hljs-built_in">add</span> -l<br></code></pre></td></tr></table></div></figure><hr><h2 id="4-将公钥添加到-GitHub"><a href="#4-将公钥添加到-GitHub" class="headerlink" title="4 将公钥添加到 GitHub"></a>4 将公钥添加到 GitHub</h2><ol><li>复制公钥到剪贴板：</li></ol><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-drvevsmfcwb3ct"></i><span>ARCADE</span><div class="collapse show" id="collapse-drvevsmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">pbcopy &lt; ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br></code></pre></td></tr></table></div></figure><ol start="2"><li><p>打开 GitHub → <strong>Settings</strong> → <strong>SSH and GPG keys</strong> → <strong>New SSH key</strong><br>中文对照<code>打开 GitHub，依次点击设置→SSH 和 GPG 密钥→新建 SSH 密钥</code></p></li><li><p>填写：</p><ul><li>Title：随便写，比如 <code>Mac id_rsa</code></li><li>Key：粘贴剪贴板内容</li></ul></li><li><p>点击 <strong>Add SSH key</strong></p></li></ol><hr><h2 id="5-配置-SSH-使用自定义密钥"><a href="#5-配置-SSH-使用自定义密钥" class="headerlink" title="5 配置 SSH 使用自定义密钥"></a>5 配置 SSH 使用自定义密钥</h2><p>如果密钥不是默认名，需要配置 Git 使用它：</p><ol><li><p>编辑 SSH 配置文件：</p><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mvjedmmfcwb3ct"></i><span>ARCADE</span><div class="collapse show" id="collapse-mvjedmmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">nano ~<span class="hljs-regexp">/.ssh/</span>config<br></code></pre></td></tr></table></div></figure><p>上面的命令就是在.ssh目录建一个config文件，也可以手动建</p></li><li><p>添加以下内容：<br>如果本地只有一个帐户的可以下面这样写</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-k2d1rbmfcwb3ct"></i><span>CRMSH</span><div class="collapse show" id="collapse-k2d1rbmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host github.com<br>  HostName github.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa<br></code></pre></td></tr></table></div></figure><p>如果有多帐户的可以这样写</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ah9n55mfcwb3ct"></i><span>CRMSH</span><div class="collapse show" id="collapse-ah9n55mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># GitHub 账户 one</span><br>Host lb.github.com<br>    HostName github.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa<br>    <span class="hljs-keyword">User</span> <span class="hljs-title">lb</span><br><br><span class="hljs-comment"># GitHub 账户 two</span><br>Host zy.github.com<br>    HostName github.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa_zy<br>    <span class="hljs-keyword">User</span> <span class="hljs-title">zy</span><br><br></code></pre></td></tr></table></div></figure></li><li><p>如果用命令窗口执行的下面操作保存并退出：</p><ul><li><code>Control + O</code> → 回车 → <code>Control + X</code></li></ul></li></ol><hr><h2 id="6-测试-SSH-连接"><a href="#6-测试-SSH-连接" class="headerlink" title="6 测试 SSH 连接"></a>6 测试 SSH 连接</h2><h2 id="如果本地单帐户的可以用下面命令"><a href="#如果本地单帐户的可以用下面命令" class="headerlink" title="如果本地单帐户的可以用下面命令"></a>如果本地单帐户的可以用下面命令<br><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ivovz4mfcwb3ct"></i><span>NGINX</span><div class="collapse show" id="collapse-ivovz4mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></div></figure></h2><p>如果多帐户的可以用下面</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3y2y1qmfcwb3ct"></i><span>NGINX</span><div class="collapse show" id="collapse-3y2y1qmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@lb</span>.github.com<br>ssh -T git<span class="hljs-variable">@zy</span>.github.com<br></code></pre></td></tr></table></div></figure><p>如果成功，会显示：</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7gasbfmfcwb3ct"></i><span>ADA</span><div class="collapse show" id="collapse-7gasbfmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">vbnetHi lifuaini2019! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></div></figure><hr><h2 id="7-初始化本地仓库（如果还没有）"><a href="#7-初始化本地仓库（如果还没有）" class="headerlink" title="7 初始化本地仓库（如果还没有）"></a>7 初始化本地仓库（如果还没有）</h2><p>进入你的项目文件夹：</p><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-99xz7tmfcwb3ct"></i><span>ARCADE</span><div class="collapse show" id="collapse-99xz7tmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">cd ~<span class="hljs-regexp">/博客/</span>李保个人<br></code></pre></td></tr></table></div></figure><p>初始化 Git 仓库：</p><figure class="highlight csharp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fcyvb4mfcwb3ct"></i><span>CSHARP</span><div class="collapse show" id="collapse-fcyvb4mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></div></figure><p>添加文件并提交：</p><figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cc6nrvmfcwb3ct"></i><span>PGSQL</span><div class="collapse show" id="collapse-cc6nrvmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;first commit&quot;<br></code></pre></td></tr></table></div></figure><hr><h2 id="8-添加远程仓库"><a href="#8-添加远程仓库" class="headerlink" title="8 添加远程仓库"></a>8 添加远程仓库</h2><p>如果远程仓库还没绑定：<br>单帐户的用</p><figure class="highlight llvm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-b5f69emfcwb3ct"></i><span>LLVM</span><div class="collapse show" id="collapse-b5f69emfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@github.com</span>:lifuaini<span class="hljs-number">2019</span>/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>本地多帐户的用</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pypzmumfcwb3ct"></i><span>STYLUS</span><div class="collapse show" id="collapse-pypzmumfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git remote add origin git@lb<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span>:lifuaini2019/<span class="hljs-number">2024</span>bk<span class="hljs-selector-class">.git</span><br>git remote add origin git@zy<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span>:lizuyu0910/zybk.git<br></code></pre></td></tr></table></div></figure><p>如果提示：</p><figure class="highlight arduino"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0ync8gmfcwb3ct"></i><span>ARDUINO</span><div class="collapse show" id="collapse-0ync8gmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">arduinoerror: remote origin already exists.<br></code></pre></td></tr></table></div></figure><p>说明已有 <code>origin</code>，可以修改 URL：</p><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lmpb2zmfcwb3ct"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-lmpb2zmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">github</span>.<span class="hljs-string">com:lifuaini2019/</span><span class="hljs-string">2024bk</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><hr><h2 id="9-推送到远程仓库"><a href="#9-推送到远程仓库" class="headerlink" title="9 推送到远程仓库"></a>9 推送到远程仓库</h2><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9z1rehmfcwb3ct"></i><span>MAXIMA</span><div class="collapse show" id="collapse-9z1rehmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></div></figure><p>（如果你的分支是 <code>master</code>，则改为 <code>master</code>）</p><p>⚠️ 第一次推送可能会要求验证 SSH，确认即可。</p><hr><h2 id="10常用检查命令"><a href="#10常用检查命令" class="headerlink" title="10常用检查命令"></a>10常用检查命令</h2><ul><li><p>查看远程仓库 URL：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-89zrd4mfcwb3ct"></i><span>EBNF</span><div class="collapse show" id="collapse-89zrd4mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure></li><li><p>查看已加载的 SSH 密钥：</p></li><li><p>测试 SSH 连接：</p></li></ul><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sfggrbmfcwb3ct"></i><span>NGINX</span><div class="collapse show" id="collapse-sfggrbmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></div></figure><h2 id="或"><a href="#或" class="headerlink" title="或"></a>或<br><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-f3inspmfcwb3ct"></i><span>NGINX</span><div class="collapse show" id="collapse-f3inspmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@lb</span>.github.com<br></code></pre></td></tr></table></div></figure></h2><h3 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h3><ol><li>生成 SSH 密钥并命名</li><li>加载密钥到 ssh-agent</li><li>添加公钥到 GitHub</li><li>配置 <code>~/.ssh/config</code> 指定密钥</li><li>初始化本地仓库 → 添加远程 → 推送</li></ol><p>这样以后 <strong>每台新电脑</strong>都可以照着这份教程快速完成 GitHub SSH 设置。</p><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如出现下面这种情况:<br><code>libao2L@DESKTOP-1FFK9JT MINGW64 /h/bk/李保博客 $ git remote -v fatal: detected dubious ownership in repository at &#39;H:/bk/李保博客&#39; &#39;H:/bk/李保博客&#39; is owned by:         &#39;S-1-5-21-3296363495-2372482831-1974833738-500&#39; but the current user is:         &#39;S-1-5-21-167963868-313762946-2422772350-1001&#39; To add an exception for this directory, call: git config --global --add safe.directory &#39;H:/bk/李保博客&#39;</code></p><p>这个错误信息表明 Git 检测到当前操作的仓库所有权存在可疑情况。具体解释如下：</p><p>错误原因：<br>所有权不匹配：Git 发现当前仓库 H:&#x2F;bk&#x2F;李保博客 的所有者与当前正在操作 Git 命令的用户不一致。<br>安全机制触发：为了防止潜在的安全风险，例如恶意脚本通过修改仓库来影响其他用户，Git 引入了这个安全检查机制。一旦检测到所有权不一致，就会报错并阻止相关操作。<br>相关信息：<br>仓库所有者：显示为 ‘S-1-5-21-3296363495-2372482831-1974833738-500’，这是一个安全标识符（SID），代表了拥有该仓库目录的用户或组。<br>当前用户：显示为 ‘S-1-5-21-167963868-313762946-2422772350-1001’，这是当前在命令行执行 Git 命令的用户的 SID。<br>解决方案：<br>添加安全目录例外：Git 提供了一种解决方法，即通过运行以下命令将该仓库目录添加到安全目录列表中：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-q29mb6mfcwb3ct"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-q29mb6mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --<span class="hljs-built_in">add</span> safe.directory <span class="hljs-string">&#x27;H:/bk/李保博客&#x27;</span><br></code></pre></td></tr></table></div></figure><p>如果要把博客的推送目录一起加到安全目录中用下面这行</p><figure class="highlight jboss-cli"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jgovw0mfcwb3ct"></i><span>JBOSS-CLI</span><div class="collapse show" id="collapse-jgovw0mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> <span class="hljs-params">--add</span> safe.directory &#x27;H:<span class="hljs-string">/bk/</span>李保博客<span class="hljs-string">/.deploy_git</span>&#x27;<br></code></pre></td></tr></table></div></figure><p>此操作的意义：执行上述命令后，Git 会将指定的仓库目录视为安全的，即使其所有者与当前用户不同，也不会再因所有权问题报错，从而允许你继续在该仓库中执行 Git 操作。不过，需要注意的是，添加此例外时应确保你信任该仓库的来源和内容，以免引入安全风险。</p><p>在 Windows 系统中，这种情况可能发生在不同用户账户下创建了仓库，或者当前用户的权限与仓库的初始权限设置不匹配等场景。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>上院李氏村名查询系统</title>
    <link href="/2025/08/23/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E4%B8%8A%E9%99%A2%E6%9D%8E%E6%B0%8F%E6%9D%91%E5%90%8D%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/08/23/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E4%B8%8A%E9%99%A2%E6%9D%8E%E6%B0%8F%E6%9D%91%E5%90%8D%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="上院李氏村名查询系统"><a href="#上院李氏村名查询系统" class="headerlink" title="上院李氏村名查询系统"></a><a href="/li/">上院李氏村名查询系统</a></h2>]]></content>
    
    
    <categories>
      
      <category>生活与日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mac新建文件与常用命令</title>
    <link href="/2025/08/23/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/md%E5%91%BD%E4%BB%A4/Mac%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/08/23/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/md%E5%91%BD%E4%BB%A4/Mac%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac-命令速查"><a href="#Mac-命令速查" class="headerlink" title="Mac 命令速查"></a>Mac 命令速查</h1><h2 id="可以单独打开运行窗口Mac-命令速查"><a href="#可以单独打开运行窗口Mac-命令速查" class="headerlink" title="可以单独打开运行窗口Mac 命令速查"></a><a href="/mac-cmd/">可以单独打开运行窗口Mac 命令速查</a></h2><p>这里是一个嵌入窗口，可以直接在博客里使用命令查询系统 👇</p><iframe src="/mac-cmd/" width="100%" height="800" frameborder="0" style="border:1px solid #ddd;border-radius:8px;"></iframe><h2 id="可以单独打开运行窗口Mac-命令速查-1"><a href="#可以单独打开运行窗口Mac-命令速查-1" class="headerlink" title="可以单独打开运行窗口Mac 命令速查"></a><a href="/mac-cmd/">可以单独打开运行窗口Mac 命令速查</a></h2>]]></content>
    
    
    <categories>
      
      <category>网页代码</category>
      
      <category>md命令</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo连接失败和中文标签乱码</title>
    <link href="/2025/08/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E5%92%8C%E4%B8%AD%E6%96%87%E6%A0%87%E7%AD%BE%E4%B9%B1%E7%A0%81/"/>
    <url>/2025/08/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E5%92%8C%E4%B8%AD%E6%96%87%E6%A0%87%E7%AD%BE%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-部署报错分析及解决：SSH-连接失败和中文标签乱码"><a href="#Hexo-部署报错分析及解决：SSH-连接失败和中文标签乱码" class="headerlink" title="Hexo 部署报错分析及解决：SSH 连接失败和中文标签乱码"></a>Hexo 部署报错分析及解决：SSH 连接失败和中文标签乱码</h2><p>在用 Hexo 部署博客时，有时候会遇到如下报错：</p><figure class="highlight sql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-x3bbchmfcwb3ct"></i><span>SQL</span><div class="collapse show" id="collapse-x3bbchmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">textcreate mode <span class="hljs-number">100644</span> &quot;tags/\350\275\257\350\267\257\347\224\261/index.html&quot;<br><span class="hljs-keyword">create</span> mode <span class="hljs-number">100644</span> &quot;tags/\351\243\236\347\211\233OS/index.html&quot;<br><span class="hljs-keyword">create</span> mode <span class="hljs-number">100644</span> xml<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">-</span>search.xml<br>Connection closed <span class="hljs-keyword">by</span> ::ffff:<span class="hljs-number">0</span>:c612:<span class="hljs-number">35</span> port <span class="hljs-number">22</span><br>fatal: Could <span class="hljs-keyword">not</span> read <span class="hljs-keyword">from</span> remote repository.<br><br>Please make sure you have the correct access rights<br><span class="hljs-keyword">and</span> the repository exists.<br>FATAL Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-string">Error: Spawn failed</span><br></code></pre></td></tr></table></div></figure><p>这个报错主要分为两个部分：<strong>中文文件名乱码</strong>和<strong>SSH 推送失败</strong>。</p><hr><h3 id="1️⃣-中文标签文件名乱码"><a href="#1️⃣-中文标签文件名乱码" class="headerlink" title="1️⃣ 中文标签文件名乱码"></a><strong>1️⃣ 中文标签文件名乱码</strong></h3><p>报错中的类似：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gyhcdmmfcwb3ct"></i><span>APACHE</span><div class="collapse show" id="collapse-gyhcdmmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">texttags</span>/\<span class="hljs-number">350</span>\<span class="hljs-number">275</span>\<span class="hljs-number">257</span>\<span class="hljs-number">350</span>\<span class="hljs-number">267</span>\<span class="hljs-number">257</span>\<span class="hljs-number">347</span>\<span class="hljs-number">224</span>\<span class="hljs-number">261</span>/index.html<br><span class="hljs-attribute">tags</span>/\<span class="hljs-number">351</span>\<span class="hljs-number">243</span>\<span class="hljs-number">236</span>\<span class="hljs-number">347</span>\<span class="hljs-number">211</span>\<span class="hljs-number">233</span>OS/index.html<br></code></pre></td></tr></table></div></figure><ul><li><p>这是 Hexo 在生成 <code>tags</code> 或 <code>categories</code> 时，中文名称被转成了 UTF-8 的 octal 码。</p></li><li><p>原因：</p><ul><li>Hexo 目录下有中文标签或分类名。</li><li>Git &#x2F; 终端没有正确显示 UTF-8。</li></ul></li><li><p><strong>解决方法</strong>：</p><ul><li>确保仓库支持 UTF-8 文件名（现代 Git 默认支持）。</li><li>如果想彻底避免乱码，可以把标签或分类改成英文或拼音。</li></ul></li></ul><blockquote><p>⚠️ 一般情况下，这个问题不会阻止部署，只是显示上会有乱码。</p></blockquote><hr><h3 id="2️⃣-SSH-连接失败"><a href="#2️⃣-SSH-连接失败" class="headerlink" title="2️⃣ SSH 连接失败"></a><strong>2️⃣ SSH 连接失败</strong></h3><p>报错核心信息：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-csx5wcmfcwb3ct"></i><span>APACHE</span><div class="collapse show" id="collapse-csx5wcmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">textConnection</span> closed by ::ffff:<span class="hljs-number">0</span>:c612:<span class="hljs-number">35</span> port <span class="hljs-number">22</span><br><span class="hljs-attribute">fatal</span>: Could not read from remote repository.<br></code></pre></td></tr></table></div></figure><p>原因通常是：</p><ol><li><p><strong>远程仓库地址写错</strong><br>很多用户 <code>_config.yml</code> 里可能写成：</p><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ezfqyumfcwb3ct"></i><span>DTS</span><div class="collapse show" id="collapse-ezfqyumfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">yamldeploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@lb.github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></div></figure><p>这显然错误，因为 GitHub SSH 地址应该是：</p><figure class="highlight scss"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ny524xmfcwb3ct"></i><span>SCSS</span><div class="collapse show" id="collapse-ny524xmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">textgit<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:用户名/仓库名.git<br></code></pre></td></tr></table></div></figure></li><li><p><strong>多账号 SSH key 冲突</strong></p><ul><li>Mac 上默认 SSH key 是 <code>~/.ssh/id_rsa</code>。</li><li>如果之前有多个 GitHub 账号使用不同 key，可能导致 Hexo 推送失败。</li></ul></li><li><p><strong>SSH Key 没加到 GitHub 或权限不足</strong></p><ul><li>确认你在 GitHub → Settings → SSH Keys 中添加了公钥。</li></ul></li></ol><hr><h3 id="3️⃣-解决方案"><a href="#3️⃣-解决方案" class="headerlink" title="3️⃣ 解决方案"></a><strong>3️⃣ 解决方案</strong></h3><h4 id="步骤一：修改-config-yml"><a href="#步骤一：修改-config-yml" class="headerlink" title="步骤一：修改 _config.yml"></a><strong>步骤一：修改 <code>_config.yml</code></strong></h4><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sxl74pmfcwb3ct"></i><span>DTS</span><div class="collapse show" id="collapse-sxl74pmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">yamldeploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></div></figure><blockquote><p>注意：如果有多个 GitHub 账号，可通过 <code>~/.ssh/config</code> 指定不同的 key。</p></blockquote><h4 id="步骤二：生成-SSH-Key（如果还没生成）"><a href="#步骤二：生成-SSH-Key（如果还没生成）" class="headerlink" title="步骤二：生成 SSH Key（如果还没生成）"></a><strong>步骤二：生成 SSH Key（如果还没生成）</strong></h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4euw3nmfcwb3ct"></i><span>BASH</span><div class="collapse show" id="collapse-4euw3nmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">bashssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;你的邮箱&quot;</span> -f ~/.ssh/id_rsa_2024bk<br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_rsa_2024bk<br></code></pre></td></tr></table></div></figure><h4 id="步骤三：配置-SSH-多账号（可选）"><a href="#步骤三：配置-SSH-多账号（可选）" class="headerlink" title="步骤三：配置 SSH 多账号（可选）"></a><strong>步骤三：配置 SSH 多账号（可选）</strong></h4><p>编辑 <code>~/.ssh/config</code>：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gjztihmfcwb3ct"></i><span>CRMSH</span><div class="collapse show" id="collapse-gjztihmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">textHost github.com-<span class="hljs-number">2024</span>bk<br>  HostName github.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa_2024bk<br></code></pre></td></tr></table></div></figure><p>然后 <code>_config.yml</code> 对应修改：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yj6l4bmfcwb3ct"></i><span>APACHE</span><div class="collapse show" id="collapse-yj6l4bmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yamlrepo</span>: git@github.com-<span class="hljs-number">2024</span>bk:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br><span class="hljs-attribute">branch</span>: main<br></code></pre></td></tr></table></div></figure><h4 id="步骤四：测试-SSH-连接"><a href="#步骤四：测试-SSH-连接" class="headerlink" title="步骤四：测试 SSH 连接"></a><strong>步骤四：测试 SSH 连接</strong></h4><figure class="highlight markdown"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-brmxlvmfcwb3ct"></i><span>MARKDOWN</span><div class="collapse show" id="collapse-brmxlvmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">bashssh -T git@github.com<br><br><span class="hljs-section"># 或者如果用多账号</span><br><br>ssh -T git@github.com-2024bk<br></code></pre></td></tr></table></div></figure><ul><li>成功会显示：</li></ul><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-suxsxhmfcwb3ct"></i><span>ADA</span><div class="collapse show" id="collapse-suxsxhmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">vbnetHi 用户名! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></div></figure><h4 id="步骤五：Hexo-部署"><a href="#步骤五：Hexo-部署" class="headerlink" title="步骤五：Hexo 部署"></a><strong>步骤五：Hexo 部署</strong></h4><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-k2q18kmfcwb3ct"></i><span>CSS</span><div class="collapse show" id="collapse-k2q18kmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">bashhexo clean<br>hexo <span class="hljs-selector-tag">g</span><br>hexo d<br></code></pre></td></tr></table></div></figure><hr><h3 id="4️⃣-总结"><a href="#4️⃣-总结" class="headerlink" title="4️⃣ 总结"></a><strong>4️⃣ 总结</strong></h3><ol><li><p>中文标签文件名显示成转义符是正常现象，可通过英文标签避免。</p></li><li><p>SSH 推送失败的根本原因是：</p><ul><li>仓库地址错误</li><li>SSH Key 没配置或权限不足</li><li>多账号 SSH 冲突</li></ul></li><li><p>通过正确配置 <code>_config.yml</code> + SSH Key + <code>~/.ssh/config</code>，就能顺利部署 Hexo 到 GitHub。</p></li></ol><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>macOS常用快捷键速查表</title>
    <link href="/2025/08/23/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/macOS%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <url>/2025/08/23/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/macOS%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="macOS常用快捷键速查表"><a href="#macOS常用快捷键速查表" class="headerlink" title="macOS常用快捷键速查表"></a>macOS常用快捷键速查表</h2><h3 id="Mac-快捷键速查"><a href="#Mac-快捷键速查" class="headerlink" title="Mac 快捷键速查"></a><a href="/mac-shortcuts/">Mac 快捷键速查</a></h3><blockquote><p>适用于 macOS 13 Ventura（与之前的 macOS 版本向下兼容）<br><strong>注意</strong>：Mac 的 “⌘” 键（Command）在大多数情况下替代 Windows 的 <strong>Ctrl</strong> 键；PostScript 用 “⌥”（Option）代替 Alt；“⌃”（Control） 用于终端等特殊情景。</p></blockquote><table><thead><tr><th>类别</th><th>快捷键</th><th>Windows 对应</th><th>作用说明</th></tr></thead><tbody><tr><td><strong>通用</strong></td><td>⌘ + C</td><td>Ctrl + C</td><td>复制</td></tr><tr><td></td><td>⌘ + V</td><td>Ctrl + V</td><td>粘贴</td></tr><tr><td></td><td>⌘ + X</td><td>Ctrl + X</td><td>剪切</td></tr><tr><td></td><td>⌘ + Z</td><td>Ctrl + Z</td><td>撤销</td></tr><tr><td></td><td>⌘ + Shift + Z</td><td>Ctrl + Y</td><td>重做</td></tr><tr><td></td><td>⌘ + A</td><td>Ctrl + A</td><td>全选</td></tr><tr><td></td><td>⌘ + S</td><td>Ctrl + S</td><td>保存</td></tr><tr><td></td><td>⌘ + O</td><td>Ctrl + O</td><td>打开</td></tr><tr><td></td><td>⌘ + N</td><td>Ctrl + N</td><td>新建</td></tr><tr><td></td><td>⌘ + P</td><td>Ctrl + P</td><td>打印</td></tr><tr><td></td><td>⌘ + Q</td><td>Ctrl + Q</td><td>退出当前应用</td></tr><tr><td></td><td>⌘ + W</td><td>Ctrl + W</td><td>关闭当前窗口</td></tr><tr><td></td><td>⌘ + Option + W</td><td>Ctrl + Shift + W</td><td>关闭所有窗口</td></tr><tr><td></td><td>⌘ + Tab</td><td>Ctrl + Tab</td><td>在打开的应用间切换（类似 Alt + Tab）</td></tr><tr><td></td><td>⌘ + &#96;</td><td>Ctrl + &#96;</td><td>在同一应用内切换窗口</td></tr><tr><td></td><td>⌘ + H</td><td>Ctrl + H</td><td>隐藏当前应用</td></tr><tr><td></td><td>⌘ + M</td><td>Ctrl + M</td><td>最小化窗口</td></tr><tr><td></td><td>⌘ + Option + M</td><td>Ctrl + Shift + M</td><td>最小化所有窗口</td></tr><tr><td></td><td>⌘ + F</td><td>Ctrl + F</td><td>搜索&#x2F;全屏幕查找</td></tr><tr><td></td><td>⌘ + Shift + H</td><td>Ctrl + Shift + H</td><td>打开 Home 目录</td></tr><tr><td></td><td>⌘ + L</td><td>Ctrl + L</td><td>选中地址栏（Safari&#x2F;文件浏览器）</td></tr><tr><td></td><td>⌘ + K</td><td>Ctrl + K</td><td>快速搜索（如在邮件中）</td></tr><tr><td></td><td>⌘ + Shift + S</td><td>Ctrl + Shift + S</td><td>另存为</td></tr><tr><td></td><td>⌘ + Option + Esc</td><td>Ctrl + Alt + Delete</td><td>强制退出程序（与 Windows 的 Ctrl + Alt + Del 相似）</td></tr><tr><td></td><td>⌘ + Space</td><td>Win + Space</td><td>Spotlight 搜索&#x2F;打开应用</td></tr><tr><td></td><td>⌘ + Option + 0–9</td><td>Win + 1–9</td><td>切换桌面（虚拟桌面）</td></tr><tr><td><strong>Finder &#x2F; 文件管理</strong></td><td>⌘ + Shift + N</td><td>Ctrl + Shift + N</td><td>新建文件夹</td></tr><tr><td></td><td>⌘ + Delete</td><td>Del</td><td>将文件移至废纸篓</td></tr><tr><td></td><td>F4</td><td>Ctrl + Shift + V</td><td>粘贴为只读（在 Finder 中类似指向 90°）</td></tr><tr><td></td><td>⌘ + ⇧ + G</td><td>Ctrl + Shift + G</td><td>前往文件夹</td></tr><tr><td></td><td>⌘ + Option + I</td><td>Ctrl + Command + I</td><td>查看信息</td></tr><tr><td></td><td>⌘ + I</td><td>Ctrl + I</td><td>打开信息窗口</td></tr><tr><td></td><td>⌘ + &#96;</td><td>Ctrl + &#96;</td><td>在同一窗口内倒序切换</td></tr><tr><td></td><td>⌘ + ←&#x2F;→</td><td>Direction arrows</td><td>在 Finder 的侧栏和内容区快速导航</td></tr><tr><td><strong>Safari &#x2F; 浏览器</strong></td><td>⌘ + L</td><td>Ctrl + L</td><td>选中地址栏</td></tr><tr><td></td><td>⌘ + T</td><td>Ctrl + T</td><td>新建标签页</td></tr><tr><td></td><td>⌘ + Shift + T</td><td>Ctrl + Shift + T</td><td>恢复最近关闭的标签页</td></tr><tr><td></td><td>⌘ + R</td><td>Ctrl + R</td><td>重新加载页面</td></tr><tr><td></td><td>⌘ + Option + R</td><td>Ctrl + Shift + R</td><td>彻底重新加载（不缓存）</td></tr><tr><td></td><td>⌘ + W</td><td>Ctrl + W</td><td>关闭标签页</td></tr><tr><td></td><td>⌘ + Option + W</td><td>Ctrl + Shift + W</td><td>关闭所有标签页</td></tr><tr><td></td><td>⌘ + Command + K</td><td>Ctrl + Alt + Shift + K</td><td>清除浏览历史（根据浏览器差异）</td></tr><tr><td></td><td>⌘ + H&#x2F;T</td><td>Ctrl + Alt &#x2F; Shift</td><td>行前&#x2F;后全屏切换</td></tr><tr><td></td><td>⌘ + ⌥ + Delete</td><td>Ctrl + Alt + Del</td><td>在 Safari 中打开安全选项</td></tr><tr><td><strong>Mail &#x2F; 电子邮件</strong></td><td>⌘ + N</td><td>Ctrl + N</td><td>撰写新邮件</td></tr><tr><td></td><td>⌘ + J</td><td>Ctrl + J</td><td>切换到“邮件递送”视图</td></tr><tr><td></td><td>⌘ + ⇧ + J</td><td>Ctrl + Shift + J</td><td>标记全部</td></tr><tr><td></td><td>⌘ + ⏎</td><td>Ctrl + ⏎</td><td>发送邮件</td></tr><tr><td></td><td>⌘ + T</td><td>Ctrl + T</td><td>复制文本域 (如地址栏)</td></tr><tr><td><strong>终端（Terminal）</strong></td><td>Ctrl + A</td><td>Ctrl + A</td><td>行首</td></tr><tr><td></td><td>Ctrl + E</td><td>Ctrl + E</td><td>行尾</td></tr><tr><td></td><td>Ctrl + U</td><td>Ctrl + U</td><td>删除到行首</td></tr><tr><td></td><td>Ctrl + K</td><td>Ctrl + K</td><td>删除到行尾</td></tr><tr><td></td><td>Ctrl + T</td><td>Ctrl + T</td><td>交换最后两个字符</td></tr><tr><td></td><td>Ctrl + C</td><td>Ctrl + C</td><td>中断&#x2F;停止当前命令</td></tr><tr><td></td><td>Ctrl + Z</td><td>Ctrl + Z</td><td>把进程挂起，<code>fg</code> 恢复</td></tr><tr><td></td><td>Ctrl + L</td><td>Ctrl + L</td><td>清屏幕</td></tr><tr><td></td><td>Ctrl + R</td><td>Ctrl + R</td><td>历史搜索</td></tr><tr><td></td><td>⌘ + T</td><td>Ctrl + T</td><td>新建标签（不同终端）</td></tr><tr><td><strong>系统偏好与设置</strong></td><td>⌘ + Space</td><td>Win + Space</td><td>Spotlight 搜索</td></tr><tr><td></td><td>⌘ + Option + Comma</td><td>Ctrl + B</td><td>打开系统偏好设置（在 Finder 中）</td></tr><tr><td></td><td>⌘ + Control + Q</td><td>Ctrl + Alt + Del (在 Terminal)</td><td>锁屏</td></tr><tr><td></td><td>⌘ + Shift + 3</td><td>截图全屏</td><td></td></tr><tr><td></td><td>⌘ + Shift + 4</td><td>截图选区</td><td></td></tr><tr><td></td><td>⌘ + Shift + 4 + Space</td><td>截图窗口</td><td></td></tr><tr><td></td><td>⌘ + Shift + 5</td><td>全面截图&#x2F;录屏（macOS  Mojave 及以后）</td><td></td></tr><tr><td></td><td>⌘ + X</td><td>Ctrl + X</td><td>剪切</td></tr><tr><td></td><td>⌘ + ⌫ (Mac Delete)</td><td>Backspace</td><td>删除前一个字符</td></tr><tr><td></td><td>Fn + ⌫</td><td>Delete</td><td>删除后一个字符（向前）</td></tr><tr><td></td><td>⌘ + Enter</td><td>Ctrl + Enter</td><td>生成新行 (邮件, Terminal)</td></tr><tr><td></td><td>⌘ + Shift + V</td><td>Ctrl + Shift + V</td><td>粘贴免格式 (如在终端)</td></tr></tbody></table><hr><h3 id="小贴士-迁移技巧"><a href="#小贴士-迁移技巧" class="headerlink" title="小贴士 &amp; 迁移技巧"></a>小贴士 &amp; 迁移技巧</h3><table><thead><tr><th>Windows 习惯</th><th>macOS 等效</th></tr></thead><tbody><tr><td><strong>Ctrl</strong> → <strong>⌘</strong>（Command）</td><td>粘贴&#x2F;复制撤销</td></tr><tr><td><strong>Alt</strong> → <strong>⌥</strong>（Option）</td><td>选取站点、间距</td></tr><tr><td><strong>Shift + Delete</strong> 删除</td><td><strong>Fn + Delete</strong> 删除后向</td></tr><tr><td><strong>Ctrl + Esc</strong> 打开任务管理器</td><td><strong>⌘ + Option + Esc</strong> 强制退出</td></tr><tr><td><strong>Win + L</strong> 锁屏</td><td><strong>Control + Shift + Power</strong> 锁屏（或在系统菜单选择）</td></tr><tr><td><strong>Win + D</strong> 显示桌面</td><td><strong>Option + F3</strong> 或 <strong>Cmd + M</strong> 降低所有窗口</td></tr><tr><td><strong>Win + R</strong> 运行</td><td><strong>⌘ + Space</strong> 后输入程序名</td></tr><tr><td><strong>Win + E</strong> 打开文件管理</td><td><strong>⌘ + Space</strong> 后输入”Finder”</td></tr><tr><td><strong>Win + X</strong> 快速访问菜单</td><td><strong>⌘ + Space</strong> 后输入”Terminal” 或 <code>system settings</code></td></tr><tr><td><strong>Win + Alt + Tab</strong> 任务切换&#x2F;窗口排列</td><td><strong>⌘ + Tab</strong> 并可按箭头切换</td></tr></tbody></table><blockquote><p><strong>Tip</strong>: 大多数 Windows 快捷键都能直接改成 <code>⌘</code> + 其键，macOS 的 “⌘” 键才是常用的主键。</p></blockquote><hr><h3 id="如何自定义快捷键"><a href="#如何自定义快捷键" class="headerlink" title="如何自定义快捷键"></a>如何自定义快捷键</h3><ol><li>打开 <strong>系统偏好设置</strong> → <strong>键盘</strong> → <strong>快捷键</strong>  </li><li>在左侧选择类别（如 <strong>应用程序快捷键</strong>），点右侧的 “+”  </li><li>输入你想绑定的菜单命令（要与系统自带或你正在使用的应用一致）  </li><li>设定你想要的组合键。注意不要与已有快捷键冲突。</li></ol><hr><blockquote><p>只需掌握上面这批常用组合，你就能在 Mac 上像在 Windows 那样高效工作。祝你玩得开心，利用 macOS 美化你的桌面与工作流！如果需要更针对某个程序（如 VS Code、Final Cut Pro、Photoshop 等）的快捷键对照，随时告诉我。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免费访问github加速软件</title>
    <link href="/2025/01/02/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E5%85%8D%E8%B4%B9%E8%AE%BF%E9%97%AEgithub%E5%8A%A0%E9%80%9F%E8%BD%AF%E4%BB%B6/"/>
    <url>/2025/01/02/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E5%85%8D%E8%B4%B9%E8%AE%BF%E9%97%AEgithub%E5%8A%A0%E9%80%9F%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="免费访问github加速软件"><a href="#免费访问github加速软件" class="headerlink" title="免费访问github加速软件"></a>免费访问github加速软件</h1><p>Watt Toolkit 是一款由华硕（ASUS）推出的应用程序，主要用于管理和优化其显卡和笔记本电脑的性能。它通常与华硕的 ROG（Republic of Gamers）系列硬件搭配使用，提供针对硬件的监控、调节和性能优化功能。</p><p>这个工具通常包含以下几个主要功能：</p><ol><li><strong>电源管理</strong>：可以帮助用户优化电源使用效率，特别是在笔记本电脑上，通过调整功率设置来延长电池使用时间或提高性能。</li><li><strong>性能优化</strong>：可以通过调整显卡或 CPU 的工作状态来优化系统的整体性能，通常包括调整时钟频率、核心电压等设置。</li><li><strong>监控和报告</strong>：Watt Toolkit 提供系统监控工具，允许用户查看当前的电源状态、温度、功率消耗等关键参数。</li><li><strong>硬件调节</strong>：如果硬件支持，用户可以通过此工具调整显卡的风扇速度、时钟频率等。</li></ol><p>最关键是可以免费上github加速访问</p><p>在微软的软件商店直接就可以下载，香吗</p><p><img src="https://s2.loli.net/2025/01/02/kHZYjuLpqVTiB6N.png"></p><p>但是要记得，执行git命令推送本地文件到远程仓库时一定要关闭，否刚SSH-22端口不能用</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩客云安装1Panel安装Home-Assistant记录过程</title>
    <link href="/2024/12/17/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%AE%89%E8%A3%851Panel%E5%AE%89%E8%A3%85Home-Assistant%E8%AE%B0%E5%BD%95%E8%BF%87%E7%A8%8B/"/>
    <url>/2024/12/17/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%AE%89%E8%A3%851Panel%E5%AE%89%E8%A3%85Home-Assistant%E8%AE%B0%E5%BD%95%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="玩客云安装1Panel安装Home-Assistant记录过程"><a href="#玩客云安装1Panel安装Home-Assistant记录过程" class="headerlink" title="玩客云安装1Panel安装Home-Assistant记录过程"></a>玩客云安装1Panel安装Home-Assistant记录过程</h1><p>原文地址<br><a href="https://www.right.com.cn/forum/thread-8344722-1-1.html">https://www.right.com.cn/forum/thread-8344722-1-1.html</a></p><h2 id="【SSH连接玩客云登录armbian】"><a href="#【SSH连接玩客云登录armbian】" class="headerlink" title="【SSH连接玩客云登录armbian】"></a>【<strong><strong>SSH连接玩客云登录armbian</strong></strong>】</h2><p>刷机后，给玩客云接上网线，通上电。进入路由器查看玩客云的IP，注意要等玩客云通电长一点时间，大概3-5分钟再去路由器查看IP，无法找到IP的话，尝试重启路由器，或者电脑运行cmd中执行arp -a查看，再或者重启玩客云。通过SSH客户端（推荐NxShell：<a href="https://nxshell.github.io/">https://nxshell.github.io</a>），连接玩客云的IP，登录armbian。<strong>用户名root，密码1234</strong>，登录后提示需要更改密root的初始密码，自行设置。更改完密码后，会提示创建账户，我们直接Ctrl+C取消。</p><h2 id="【设置armbian】"><a href="#【设置armbian】" class="headerlink" title="【设置armbian】"></a>【<strong><strong>设置armbian</strong></strong>】</h2><ul><li><strong>检查时间</strong></li></ul><p>1.执行以下命令，一键更换国内源。</p><figure class="highlight applescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-anwghkmfcwb3cr"></i><span>APPLESCRIPT</span><div class="collapse show" id="collapse-anwghkmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> -R<br></code></pre></td></tr></table></div></figure><p>2.如果时区及时间不对，输入命令。</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-af04jvmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-af04jvmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai  /</span>etc/localtime<br></code></pre></td></tr></table></div></figure><p>3.再次检查时间。</p><figure class="highlight applescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ca2o9dmfcwb3cr"></i><span>APPLESCRIPT</span><div class="collapse show" id="collapse-ca2o9dmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> -R<br></code></pre></td></tr></table></div></figure><h2 id="一键更换国内源"><a href="#一键更换国内源" class="headerlink" title="一键更换国内源"></a>一键更换国内源</h2><p>1.执行以下命令，一键更换国内源。</p><figure class="highlight lisp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xf8csbmfcwb3cr"></i><span>LISP</span><div class="collapse show" id="collapse-xf8csbmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">bash &lt;(<span class="hljs-name">curl</span> -sSL https<span class="hljs-symbol">://linuxmirrors</span>.cn/main.sh)<br></code></pre></td></tr></table></div></figure><p>参考LinuxMirrors：<a href="https://github.com/SuperManito/LinuxMirrors">https://github.com/SuperManito/LinuxMirrors</a><br>使用方法：<a href="https://linuxmirrors.cn/use/">https://linuxmirrors.cn/use/</a></p><h2 id="灯光控制"><a href="#灯光控制" class="headerlink" title="灯光控制"></a><strong>灯光控制</strong></h2><p>1.黑色电工胶带直接粘住，也是一个办法。或者执行以下命令，关闭所有灯。</p><figure class="highlight angelscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dtkp36mfcwb3cr"></i><span>ANGELSCRIPT</span><div class="collapse show" id="collapse-dtkp36mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">echo <span class="hljs-number">0</span> &gt;/sys/<span class="hljs-keyword">class</span>/<span class="hljs-symbol">leds</span>/<span class="hljs-symbol">onecloud</span>\:<span class="hljs-symbol">blue</span>\:<span class="hljs-symbol">alive</span>/<span class="hljs-symbol">brightness</span><br><span class="hljs-symbol">echo</span> <span class="hljs-symbol">0</span> &gt;/<span class="hljs-symbol">sys</span>/<span class="hljs-symbol">class</span>/<span class="hljs-symbol">leds</span>/<span class="hljs-symbol">onecloud</span>\:<span class="hljs-symbol">green</span>\:<span class="hljs-symbol">alive</span>/<span class="hljs-symbol">brightness</span><br><span class="hljs-symbol">echo</span> <span class="hljs-symbol">0</span> &gt;/<span class="hljs-symbol">sys</span>/<span class="hljs-symbol">class</span>/<span class="hljs-symbol">leds</span>/<span class="hljs-symbol">onecloud</span>\:<span class="hljs-symbol">red</span>\:<span class="hljs-symbol">alive</span>/<span class="hljs-symbol">brightness</span><br></code></pre></td></tr></table></div></figure><p>2.执行以下命令，蓝灯常亮；绿灯常亮和红灯常亮的方法类推。</p><figure class="highlight angelscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sp0uupmfcwb3cr"></i><span>ANGELSCRIPT</span><div class="collapse show" id="collapse-sp0uupmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">echo <span class="hljs-string">&quot;default-on&quot;</span> &gt;/sys/<span class="hljs-keyword">class</span>/<span class="hljs-symbol">leds</span>/<span class="hljs-symbol">onecloud</span>\:<span class="hljs-symbol">blue</span>\:<span class="hljs-symbol">alive</span>/<span class="hljs-symbol">trigger</span><br><span class="hljs-symbol">echo</span> &quot;<span class="hljs-symbol">none</span>&quot; &gt;/<span class="hljs-symbol">sys</span>/<span class="hljs-symbol">class</span>/<span class="hljs-symbol">leds</span>/<span class="hljs-symbol">onecloud</span>\:<span class="hljs-symbol">green</span>\:<span class="hljs-symbol">alive</span>/<span class="hljs-symbol">trigger</span><br><span class="hljs-symbol">echo</span> &quot;<span class="hljs-symbol">none</span>&quot; &gt;/<span class="hljs-symbol">sys</span>/<span class="hljs-symbol">class</span>/<span class="hljs-symbol">leds</span>/<span class="hljs-symbol">onecloud</span>\:<span class="hljs-symbol">red</span>\:<span class="hljs-symbol">alive</span>/<span class="hljs-symbol">trigger</span><br></code></pre></td></tr></table></div></figure><p>参考论坛用户“lanwairen123”在《玩客云灯光问题》中的回复：<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8253350">https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=8253350</a></p><h2 id="安装1panel（为了更加方便的控制容器，以及设置定时任务重启小雅alist进行更新，如果不需要的话可以跳过）"><a href="#安装1panel（为了更加方便的控制容器，以及设置定时任务重启小雅alist进行更新，如果不需要的话可以跳过）" class="headerlink" title="安装1panel（为了更加方便的控制容器，以及设置定时任务重启小雅alist进行更新，如果不需要的话可以跳过）"></a>安装1panel（为了更加方便的控制容器，以及设置定时任务重启小雅alist进行更新，如果不需要的话可以跳过）</h2><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jyuddrmfcwb3cr"></i><span>VIM</span><div class="collapse show" id="collapse-jyuddrmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sSL https://resource.fit2cloud.<span class="hljs-keyword">com</span>/<span class="hljs-number">1</span>panel/package/quick_start.<span class="hljs-keyword">sh</span> -<span class="hljs-keyword">o</span> quick_start.<span class="hljs-keyword">sh</span> &amp;&amp; bash quick_start.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></div></figure><p>全部回车确定即可快速配置</p><p>等待安装完成即可，根据给出的内网访问地址、面板账号、面板密码进行登录。检查安装是非完成。<br>原文链接：<a href="https://blog.csdn.net/bingganzhen/article/details/140609250">https://blog.csdn.net/bingganzhen/article/details/140609250</a><br>【******登陆1panel安装Home-Assistant】<br>————————————————</p><h2 id="安装Samba（文件共享）"><a href="#安装Samba（文件共享）" class="headerlink" title="安装Samba（文件共享）"></a>安装Samba（文件共享）</h2><p>CasaOS的文件共享不能设置密码，故而安装Samba，按需食用。</p><p>1.执行以下命令，更新软件包列表，并通过APT安装Samba应用。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0l4ixnmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-0l4ixnmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install samba<br></code></pre></td></tr></table></div></figure><p>2.执行以下命令，打开Samba的配置文件。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ykego9mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-ykego9mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/samba/smb.conf<br><br></code></pre></td></tr></table></div></figure><p>3.在文件的末尾添加以下内容（配置信息）后，Ctrl+X保存，以创建共享。</p><figure class="highlight clean"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ymggl6mfcwb3cr"></i><span>CLEAN</span><div class="collapse show" id="collapse-ymggl6mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean">#######################################################<br>#[共享显示的名称，可自定义]<br>[libao-tb]<br>#自定义备注信息<br>comment = <span class="hljs-number">16</span>G<br>#路径，下列是我的共享路径，要设置成你的，怎么查询路径，CasaOS主页,文件夹图标打开，左侧位置&gt;下面会列出挂载的U盘，点击目标U盘进入，鼠标移到目标文件夹出现<span class="hljs-number">3</span>个点点，点击选择拷贝路径，再粘贴到path<br>path = /mnt/libao<br>#共享用户名<br>valid users = root<br>#只读 yes=是 no=否<br>read only = no<br>#来宾<br>guest ok = no<br>#创建文件时权限，权限按需设置<br>create maks = <span class="hljs-number">0777</span><br>#创建目录时权限，权限按需设置<br>directory mask = <span class="hljs-number">0777</span><br>#是否可被看见<br>browseable = yes<br>available = yes<br>writable = yes<br>#######################################################<br></code></pre></td></tr></table></div></figure><p>这里是我的<a href="https://app.lifu.us.kg/%E5%85%B6%E5%AE%83%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/Samba%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A/%E4%B8%AD%E6%96%87%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6smb.conf">smb.conf-打开文件</a>，中文翻译注释，可以<a href="https://app.lifu.us.kg/%E5%85%B6%E5%AE%83%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD/Samba%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A/smb.rar">下载本文件压缩包</a><br>4.上述设置会默认共享root目录，如不想显示root目录，可以增加在[homes]节点中，“comment &#x3D; Home Directories”，“browseable &#x3D; no”的下面增加下列配置信息。</p><figure class="highlight ini"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-siwn7rmfcwb3cr"></i><span>INI</span><div class="collapse show" id="collapse-siwn7rmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#是否可被看见</span><br><span class="hljs-attr">browseable</span> = <span class="hljs-literal">no</span><br><span class="hljs-attr">available</span> = <span class="hljs-literal">no</span><br><span class="hljs-attr">writable</span> = <span class="hljs-literal">no</span><br></code></pre></td></tr></table></div></figure><p>5.创建用户密码，注意用户名是否是第2步骤用户名。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jft02gmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-jft02gmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> smbpasswd -a lifuaini<br></code></pre></td></tr></table></div></figure><p>6.执行以下命令，重启Samba服务以应用配置更改。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pi7q67mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-pi7q67mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart smbd<br></code></pre></td></tr></table></div></figure><p>每次重启也只要上面这行</p><p>7.执行以下命令，设置Samba开机自启。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hmym6ymfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-hmym6ymfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start smbd<br></code></pre></td></tr></table></div></figure><p>两条单独执行</p><hr><h2 id="安装Cpolar（内网穿透）"><a href="#安装Cpolar（内网穿透）" class="headerlink" title="安装Cpolar（内网穿透）"></a>安装Cpolar（内网穿透）</h2><p>**1.执行以下代码，安装Cpolar。  </p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2hb5x0mfcwb3cr"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-2hb5x0mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> https://www.cpolar.com/<span class="hljs-keyword">static</span>/downloads/<span class="hljs-built_in">install-release</span><span class="hljs-literal">-cpolar</span>.sh | sudo bash<br></code></pre></td></tr></table></div></figure><p>2.查看版本号，有正常显示版本号即为安装成功。<br>3.登录cpolar官网后台，点击左侧的验证，查看自己的认证token，之后将token贴在命令行里。</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4dy25xmfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-4dy25xmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cpolar authtoken xxxxxxx</span><br></code></pre></td></tr></table></div></figure><p>4.向系统添加服务。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nqdztbmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-nqdztbmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> cpolar<br></code></pre></td></tr></table></div></figure><p>5.启动cpolar服务</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zznxkdmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-zznxkdmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start cpolar<br></code></pre></td></tr></table></div></figure><p>6.在浏览器上访问本地端口http:&#x2F;&#x2F;玩客云IP:9200,使用cpolar邮箱账号登录Cpolar web UI管理界面，即可开始使用cpolar。<br>7.登录完cpolar本地管理界面后，在“隧道管理”-“创建隧道”中，可以给SSH、CasaOS、qBittorrent、青龙等创建隧道，这样就可以实现远程访问了。但是要注意最好是先更改它们的默认端口和默认的账号密码再来创建才比较安全。<br>8.常见的默认端口：<br>&#96;</p><ul><li>CasaOS：8181</li><li>Cpolar：9200</li><li>qBittorrent ：8080</li><li>FAST OS DOCKER：8081</li><li>青龙：5700</li><li>Home Assistant：8123<br>&#96;</li></ul>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>玩客云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初始化本地 Git 仓库-并绑定到远程仓库</title>
    <link href="/2024/12/16/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%20Git%20%E4%BB%93%E5%BA%93-%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/2024/12/16/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%20Git%20%E4%BB%93%E5%BA%93-%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="初始化本地-Git-仓库-并绑定到远程仓库"><a href="#初始化本地-Git-仓库-并绑定到远程仓库" class="headerlink" title="初始化本地 Git 仓库-并绑定到远程仓库"></a>初始化本地 Git 仓库-并绑定到远程仓库</h1><p>好的，我会详细解释从 <code>git init</code> 到将本地仓库推送到远程仓库的每一步过程。假设你已经在 GitHub 上创建了一个远程仓库，并且本地计算机已经配置好了 SSH 密钥。</p><h3 id="1-初始化本地-Git-仓库"><a href="#1-初始化本地-Git-仓库" class="headerlink" title="1. 初始化本地 Git 仓库"></a>1. 初始化本地 Git 仓库</h3><p>首先，在本地项目文件夹中初始化 Git 仓库：</p><figure class="highlight csharp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l623f8mfcwb3cs"></i><span>CSHARP</span><div class="collapse show" id="collapse-l623f8mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></div></figure><ul><li><code>git init</code> 命令会在当前目录下创建一个新的 Git 仓库。它会生成一个 <code>.git</code> 文件夹，表示这是一个 Git 管理的目录。</li></ul><h3 id="2-连接远程仓库"><a href="#2-连接远程仓库" class="headerlink" title="2. 连接远程仓库"></a>2. 连接远程仓库</h3><p>接下来，你需要将本地仓库与远程 GitHub 仓库关联。假设远程仓库的 URL 是 <code>git@github.com:...***</code>，你可以使用以下命令来添加远程仓库：</p><figure class="highlight llvm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9t58ijmfcwb3cs"></i><span>LLVM</span><div class="collapse show" id="collapse-9t58ijmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@github.com</span>:.**<br></code></pre></td></tr></table></div></figure><ul><li><code>git remote add origin</code> 命令将远程仓库 URL 与本地仓库关联，<code>origin</code> 是远程仓库的默认名称，你也可以使用其他名称，但 <code>origin</code> 是常见的约定。</li></ul><h3 id="设置远程仓库命令-以下为你一键命令生成脚本"><a href="#设置远程仓库命令-以下为你一键命令生成脚本" class="headerlink" title="设置远程仓库命令-以下为你一键命令生成脚本"></a>设置远程仓库命令-以下为你一键命令生成脚本</h3><p>请输入您的 GitHub 仓库链接，然后点击“生成命令”按钮，接着点击“复制命令”按钮：</p><!-- 输入框 --><p><label for="repo-url">GitHub 仓库链接:</label><br><input type="text" id="repo-url" placeholder="例如: https://github.com/yourusername/your-repository.git" size="50"><br><br><br></p><!-- 生成命令按钮 --><p><button onclick="generateCommand()">生成命令</button></p><!-- 显示生成的命令 --><p>生成的命令:</p><textarea id="generated-command" rows="2" cols="100" readonly></textarea><br><!-- 复制命令按钮 --><p><button onclick="copyToClipboard()">复制命令</button></p><script>  // 生成命令  function generateCommand() {    var repoUrl = document.getElementById("repo-url").value.trim();    if (repoUrl) {      var command = "git remote add origin " + repoUrl;      document.getElementById("generated-command").value = command;    } else {      alert("请先输入有效的 GitHub 仓库链接！");    }  }  // 复制命令到剪贴板  function copyToClipboard() {    var copyText = document.getElementById("generated-command");    copyText.select();    copyText.setSelectionRange(0, 99999); // For mobile devices    document.execCommand("copy");    alert("命令已复制到剪贴板！");  }</script><h4 id="1-1说明例如"><a href="#1-1说明例如" class="headerlink" title="1-1说明例如"></a>1-1说明例如</h4><ul><li>如果你原来的链接是git remote add origin <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#108;&#x61;&#98;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#108;&#x61;&#98;&#x2e;&#x63;&#x6f;&#109;</a>:l2837&#x2F;anan.git</li><li>在本地多个帐号绑git的，那么如果这个帐号本地为gg.gitlab.com那么就要改成下面这个</li><li>git remote add origin <a href="mailto:&#103;&#x69;&#x74;&#64;&#103;&#103;&#46;&#103;&#105;&#x74;&#108;&#97;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#64;&#103;&#103;&#46;&#103;&#105;&#x74;&#108;&#97;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>:l2837&#x2F;anan.git</li></ul><h3 id="2-1给这个仓库设置局部的用户名和邮箱："><a href="#2-1给这个仓库设置局部的用户名和邮箱：" class="headerlink" title="2.1给这个仓库设置局部的用户名和邮箱："></a>2.1给这个仓库设置局部的用户名和邮箱：</h3><ul><li>必须要在所属的仓库目录下执行<figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-oktcuvmfcwb3cs"></i><span>PGSQL</span><div class="collapse show" id="collapse-oktcuvmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name &quot;lb_name&quot; ; git config <span class="hljs-keyword">user</span>.email &quot;lb_email&quot;<br></code></pre></td></tr></table></div></figure></li></ul><p>第二个帐号：</p><ul><li>必须要在所属的仓库目录下执行<figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-54oyj7mfcwb3cs"></i><span>PGSQL</span><div class="collapse show" id="collapse-54oyj7mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>git config <span class="hljs-keyword">user</span>.name &quot;zy_name&quot; ; git config <span class="hljs-keyword">user</span>.email &quot;zy_email&quot;<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="可以用下面命令测试是否边接正常"><a href="#可以用下面命令测试是否边接正常" class="headerlink" title="可以用下面命令测试是否边接正常"></a>可以用下面命令测试是否边接正常</h2><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-d4xzhfmfcwb3cs"></i><span>VIM</span><div class="collapse show" id="collapse-d4xzhfmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ssh -T <span class="hljs-keyword">lb</span>.github.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></div></figure><p>第二个帐号同样</p><figure class="highlight excel"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-c2lwwxmfcwb3cs"></i><span>EXCEL</span><div class="collapse show" id="collapse-c2lwwxmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh -<span class="hljs-built_in">T</span> zy.github.com<br></code></pre></td></tr></table></div></figure><p><img src="https://s2.loli.net/2024/12/20/xw58WzaFviCYZug.png" alt="image-20241220192701214"></p><p>例如上图，绿色打叉显示的是失败的,红色打钩是正常的</p><h3 id="3-下载远程仓库的所有分支"><a href="#3-下载远程仓库的所有分支" class="headerlink" title="3. 下载远程仓库的所有分支"></a>3. 下载远程仓库的所有分支</h3><p>你可以使用 <code>git fetch</code> 命令来获取远程仓库的所有分支，但不自动合并它们到本地：</p><figure class="highlight sql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-572uajmfcwb3cs"></i><span>SQL</span><div class="collapse show" id="collapse-572uajmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">fetch</span> <span class="hljs-comment">--all</span><br></code></pre></td></tr></table></div></figure><ul><li><code>git fetch --all</code> 命令会从所有配置的远程仓库获取最新的分支和更新。</li></ul><h3 id="4-查看远程分支"><a href="#4-查看远程分支" class="headerlink" title="4. 查看远程分支"></a>4. 查看远程分支</h3><p>要查看远程仓库的所有分支，可以使用以下命令：</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dquiy2mfcwb3cs"></i><span>CSS</span><div class="collapse show" id="collapse-dquiy2mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-attribute">r</span><br></code></pre></td></tr></table></div></figure><ul><li><code>git branch -r</code> 会列出所有远程分支，格式通常是 <code>origin/branch-name</code>。</li></ul><h3 id="5-切换到-main-分支"><a href="#5-切换到-main-分支" class="headerlink" title="5. 切换到 main 分支"></a>5. 切换到 <code>main</code> 分支</h3><p>通常情况下，GitHub 的默认分支是 <code>main</code>，你可以切换到本地的 <code>main</code> 分支：</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ro5esvmfcwb3cs"></i><span>CSS</span><div class="collapse show" id="collapse-ro5esvmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><ul><li><code>git checkout main</code> 会切换到本地的 <code>main</code> 分支。如果本地还没有 <code>main</code> 分支，它会自动创建一个并切换过去。</li></ul><p>如果本地没有 <code>main</code> 分支，你可以使用以下命令来创建并切换到 <code>main</code> 分支：</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qwc1v2mfcwb3cs"></i><span>CSS</span><div class="collapse show" id="collapse-qwc1v2mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">main</span> origin/<span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><ul><li><code>git checkout -b main origin/main</code> 会从远程的 <code>origin/main</code> 分支创建一个新的本地 <code>main</code> 分支并切换过去。</li></ul><h3 id="6-推送本地分支到远程仓库"><a href="#6-推送本地分支到远程仓库" class="headerlink" title="6. 推送本地分支到远程仓库"></a>6. 推送本地分支到远程仓库</h3><p>现在你已经切换到 <code>main</code> 分支，可以将本地的 <code>main</code> 分支推送到远程仓库：</p><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l6h74cmfcwb3cs"></i><span>MAXIMA</span><div class="collapse show" id="collapse-l6h74cmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></div></figure><ul><li><code>git push -u origin main</code> 会将本地的 <code>main</code> 分支推送到远程仓库的 <code>main</code> 分支。<code>-u</code> 参数会将本地分支与远程分支关联，以后可以直接使用 <code>git push</code> 和 <code>git pull</code>。</li></ul><h3 id="7-后续操作"><a href="#7-后续操作" class="headerlink" title="7. 后续操作"></a>7. 后续操作</h3><h4 id="1-修改-文件后，使用-git-add-添加更改"><a href="#1-修改-文件后，使用-git-add-添加更改" class="headerlink" title="1. 修改#文件后，使用 git add . 添加更改"></a>1. 修改#文件后，使用 <code>git add .</code> 添加更改</h4><p>在你修改了本地项目中的文件后，需要将这些修改添加到 Git 的暂存区。你可以使用以下命令：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g17tlumfcwb3cs"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-g17tlumfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></div></figure><ul><li><code>git add .</code> 会将当前目录下的所有修改过的文件（包括新增、修改和删除的文件）添加到暂存区。<code>git add .</code> 会递归地将所有子目录中的文件也加入暂存区。</li></ul><p>如果你只想添加某个特定文件，可以使用文件名替代 <code>.</code>，例如：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8f6fxumfcwb3cs"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-8f6fxumfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> filename.txt<br></code></pre></td></tr></table></div></figure><h4 id="2-提交更改"><a href="#2-提交更改" class="headerlink" title="2. 提交更改"></a>2. 提交更改</h4><p>在将文件添加到暂存区后，下一步是将这些更改提交到本地 Git 仓库。你可以使用 <code>git commit</code> 命令，并为提交添加描述信息：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-az3lc1mfcwb3cs"></i><span>NGINX</span><div class="collapse show" id="collapse-az3lc1mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;描述你的更改可以随便写&quot;</span><br></code></pre></td></tr></table></div></figure><ul><li><code>git commit -m &quot;描述你的更改&quot;</code> 会将暂存区的更改提交到本地仓库，并附上一个描述信息，帮助你和其他人理解这次提交的内容。</li></ul><h4 id="3-推送更改到远程仓库"><a href="#3-推送更改到远程仓库" class="headerlink" title="3. 推送更改到远程仓库"></a>3. 推送更改到远程仓库</h4><p>一旦你完成了本地提交，接下来就可以将更改推送到远程仓库。使用以下命令将本地的 <code>main</code> 分支推送到远程仓库：</p><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bb5pl1mfcwb3cs"></i><span>ARCADE</span><div class="collapse show" id="collapse-bb5pl1mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span><br></code></pre></td></tr></table></div></figure><ul><li><code>git push</code> 会将本地分支的最新提交推送到远程仓库。如果你之前已经使用 <code>git push -u origin main</code> 关联了本地分支和远程分支，后续的 <code>git push</code> 会默认推送到远程的 <code>main</code> 分支。</li></ul><p>如果你是第一次推送到远程仓库，或者没有设置默认推送分支，你可以使用以下命令：</p><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5fppbpmfcwb3cs"></i><span>MAXIMA</span><div class="collapse show" id="collapse-5fppbpmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></div></figure><ul><li><code>git push origin main</code> 会将本地的 <code>main</code> 分支推送到远程仓库的 <code>main</code> 分支。</li></ul><h4 id="4-后续操作的总结"><a href="#4-后续操作的总结" class="headerlink" title="4. 后续操作的总结"></a>4. 后续操作的总结</h4><ol><li><strong>修改文件后</strong>，使用 <code>git add .</code> 将所有更改添加到暂存区。</li><li><strong>提交更改</strong>，使用 <code>git commit -m &quot;描述你的更改&quot;</code> 提交更改。</li><li><strong>推送更改</strong>，使用 <code>git push</code> 将本地提交推送到远程仓库。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>初始化本地仓库：<code>git init</code></p></li><li><p>添加远程仓库：<code>git remote add origin git@github.com:yourusername/your-repository.git</code></p></li><li><p>获取远程分支：<code>git fetch --all</code></p></li><li><p>查看远程分支：<code>git branch -r</code></p></li><li><p>切换到 <code>main</code> 分支：<code>git checkout main</code> 或 <code>git checkout -b main origin/main</code></p></li><li><p>推送到远程仓库：<code>git push -u origin main</code></p></li><li><p>查看绑定的仓库：git remote -v</p></li><li><p>经常遇到这个问题：<br>解决方法</p></li><li><p>添加信任目录<br>Git 提示你可以执行以下命令，手动信任该目录：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-eb8prbmfcwb3cs"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-eb8prbmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --<span class="hljs-built_in">add</span> safe.directory <span class="hljs-string">&#x27;H:/bk/gitlab节点输入法文件仓库&#x27;</span><br><br></code></pre></td></tr></table></div></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GPT学习</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修复github-22端口不通的方法-hosts文件修改</title>
    <link href="/2024/12/16/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E4%BF%AE%E5%A4%8Dgithub-22%E7%AB%AF%E5%8F%A3%E4%B8%8D%E9%80%9A%E7%9A%84%E6%96%B9%E6%B3%95-hosts%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/"/>
    <url>/2024/12/16/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E4%BF%AE%E5%A4%8Dgithub-22%E7%AB%AF%E5%8F%A3%E4%B8%8D%E9%80%9A%E7%9A%84%E6%96%B9%E6%B3%95-hosts%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="修复github-22端口不通的方法-hosts文件修改"><a href="#修复github-22端口不通的方法-hosts文件修改" class="headerlink" title="修复github-22端口不通的方法-hosts文件修改"></a>修复github-22端口不通的方法-hosts文件修改</h1><p>. SSH连接问题<br>错误信息 ssh: connect to host github.com port 22: Connection refused 表明当前无法通过SSH连接到GitHub。这可能是由于网络环境或SSH配置的问题。</p><p>解决方法：<br>检查网络是否限制了端口22<br> 检查本地问题<br>(1) 测试端口 22 是否可用<br>使用以下命令检查本地是否能连接到 GitHub 的端口 22：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-abdxgxmfcwb3ck"></i><span>NGINX</span><div class="collapse show" id="collapse-abdxgxmfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></div></figure><p>如果出现如下的图片就是正常链接到github的</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.loli.net/2024/12/16/pSRMZHBxJVqiecl.png"></h2><p>如果出现下面这种情况就是链接失败的</p><p><img src="https://s2.loli.net/2024/12/16/RfB2SN9kOaWnvZz.png"></p><p>最后我发现在打开了加整github的加速软件「Watt Toolkit」导致的。后来我修改下面文件<br>hosts文件修改方法可以参以下：：<br>在使用 Windows 系统时，我遇到了一个无法保存修改 <code>hosts</code> 文件的情况。每次尝试保存时，都会弹出提示框，显示文件无法保存，且文件可能被保护。经过多次尝试和排查，我最终找到了一个有效的解决方案，下面是我解决这个问题的详细过程：</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>每次修改 <code>hosts</code> 文件后，尝试保存时，Notepad++ 会弹出以下错误提示：</p><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-uyrs90mfcwb3ck"></i><span>VIM</span><div class="collapse show" id="collapse-uyrs90mfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">vbnet复制代码Save failed<br>The <span class="hljs-keyword">file</span> cannot <span class="hljs-keyword">be</span> saved <span class="hljs-built_in">and</span> it may <span class="hljs-keyword">be</span> protected.<br>Do you want <span class="hljs-keyword">to</span> launch Notepad++ in Administrator <span class="hljs-keyword">mode</span>?<br></code></pre></td></tr></table></div></figure><p>尽管我已经以管理员身份运行 Notepad++，但依然无法保存文件。</p><h3 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h3><ol><li><strong>检查文件权限</strong>：<ul><li>首先，我右键点击 <code>hosts</code> 文件，选择 <strong>属性</strong>，进入 <strong>安全</strong> 选项卡，确保我的账户有 <strong>完全控制</strong> 权限。</li><li>尽管权限设置正确，但问题依旧存在。</li></ul></li><li><strong>检查文件是否被其他程序占用</strong>：<ul><li>我尝试关闭了所有可能会占用 <code>hosts</code> 文件的程序，如防火墙、杀毒软件等。</li><li>但问题依然没有解决。</li></ul></li><li><strong>尝试使用其他编辑器</strong>：<ul><li>我尝试使用 Windows 自带的 <strong>记事本</strong> 以管理员身份打开 <code>hosts</code> 文件进行修改，但同样无法保存文件。</li></ul></li><li><strong>查看 Windows 文件保护机制</strong>：<ul><li>由于 <code>hosts</code> 文件是系统文件，Windows 可能会启用文件保护机制，防止修改。</li><li>但是禁用文件保护并不是一个推荐的解决方案，因为它可能会影响系统的安全性。</li></ul></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>经过多次尝试后，我发现以下步骤有效地解决了问题：</p><ol><li><strong>重启电脑</strong>：<ul><li>首先，我重启了电脑，确保没有程序在后台占用 <code>hosts</code> 文件。</li></ul></li><li><strong>修改 <code>hosts</code> 文件</strong>：<ul><li>重启后，我重新打开 Notepad++，以管理员身份编辑 <code>hosts</code> 文件。</li><li>这一次，我能够成功修改文件并保存。</li></ul></li><li><strong>再次重启电脑</strong>：<ul><li>为确保修改生效，我再次重启了电脑。</li><li>重启后，我发现 <code>hosts</code> 文件的修改已经生效，问题完全解决。</li></ul></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过重启电脑并再次尝试修改 <code>hosts</code> 文件，我成功解决了无法保存文件的问题。这个过程表明，可能是某些程序占用了文件或系统缓存导致文件无法保存。重启后，系统会释放这些资源，使得文件可以正常编辑和保存。</p><h3 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h3><ul><li><strong>管理员权限</strong>：在修改系统文件时，确保使用管理员权限打开编辑器。</li><li><strong>重启电脑</strong>：如果遇到无法保存文件的情况，重启电脑是一个有效的解决方法，能够清理系统缓存和释放文件锁定。</li><li><strong>文件保护机制</strong>：某些系统文件可能会受到 Windows 文件保护机制的限制，修改时需要特别注意。</li></ul><p>希望这个解决方案能帮助到遇到类似问题的朋友，避免重复的排查和无效尝试。</p><hr><p>你可以将这个过程作为博客文章记录，方便以后参考。如果有其他问题，也可以随时更新这篇文章。</p><h5 id="您说："><a href="#您说：" class="headerlink" title="您说："></a>您说：</h5><p>要写明，用什么命令测试是否22端口被禁用。然后确是22端口，再修改这个文件内容，要把内容写上来作为演示</p><h6 id="ChatGPT-说："><a href="#ChatGPT-说：" class="headerlink" title="ChatGPT 说："></a>ChatGPT 说：</h6><p>ChatGPT</p><p>好的，下面是更新后的博客记录，包含了如何使用命令检查是否 22 端口被禁用，并详细描述了如何修改 <code>hosts</code> 文件的内容。</p><hr><h2 id="修复-hosts-文件无法保存问题的详细过程"><a href="#修复-hosts-文件无法保存问题的详细过程" class="headerlink" title="修复 hosts 文件无法保存问题的详细过程"></a>修复 <code>hosts</code> 文件无法保存问题的详细过程</h2><p>在使用 Windows 系统时，我遇到了一个无法保存修改 <code>hosts</code> 文件的情况。每次尝试保存时，都会弹出提示框，显示文件无法保存，且文件可能被保护。经过多次尝试和排查，我最终找到了一个有效的解决方案，下面是我解决这个问题的详细过程：</p><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>每次修改 <code>hosts</code> 文件后，尝试保存时，Notepad++ 会弹出以下错误提示：</p><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1jjjpomfcwb3ck"></i><span>VIM</span><div class="collapse show" id="collapse-1jjjpomfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">vbnet复制代码Save failed<br>The <span class="hljs-keyword">file</span> cannot <span class="hljs-keyword">be</span> saved <span class="hljs-built_in">and</span> it may <span class="hljs-keyword">be</span> protected.<br>Do you want <span class="hljs-keyword">to</span> launch Notepad++ in Administrator <span class="hljs-keyword">mode</span>?<br></code></pre></td></tr></table></div></figure><p>尽管我已经以管理员身份运行 Notepad++，但依然无法保存文件。</p><h3 id="排查步骤-1"><a href="#排查步骤-1" class="headerlink" title="排查步骤"></a>排查步骤</h3><ol><li><p><strong>检查文件权限</strong>：</p><ul><li>首先，我右键点击 <code>hosts</code> 文件，选择 <strong>属性</strong>，进入 <strong>安全</strong> 选项卡，确保我的账户有 <strong>完全控制</strong> 权限。</li><li>尽管权限设置正确，但问题依旧存在。</li></ul></li><li><p><strong>检查文件是否被其他程序占用</strong>：</p><ul><li>我尝试关闭了所有可能会占用 <code>hosts</code> 文件的程序，如防火墙、杀毒软件等。</li><li>但问题依然没有解决。</li></ul></li><li><p><strong>尝试使用其他编辑器</strong>：</p><ul><li>我尝试使用 Windows 自带的 <strong>记事本</strong> 以管理员身份打开 <code>hosts</code> 文件进行修改，但同样无法保存文件。</li></ul></li><li><p><strong>查看 Windows 文件保护机制</strong>：</p><ul><li>由于 <code>hosts</code> 文件是系统文件，Windows 可能会启用文件保护机制，防止修改。</li><li>但是禁用文件保护并不是一个推荐的解决方案，因为它可能会影响系统的安全性。</li></ul></li><li><p><strong>检查端口是否被禁用</strong>：</p><ul><li>在排查过程中，我发现可能与网络端口的访问权限有关。为了测试是否是端口问题，我使用以下命令检查 22 端口是否被禁用：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8ruc23mfcwb3ck"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-8ruc23mfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">bash<br><br><br>复制代码<br>netstat -an | <span class="hljs-built_in">find</span> <span class="hljs-string">&quot;22&quot;</span><br></code></pre></td></tr></table></div></figure><ul><li>如果 22 端口被禁用，输出结果会显示类似于以下内容：</li></ul><figure class="highlight elixir"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-09ynsymfcwb3ck"></i><span>ELIXIR</span><div class="collapse show" id="collapse-09ynsymfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">less<br><br><br>复制代码<br><span class="hljs-title class_">TCP</span>    [::]<span class="hljs-symbol">:</span><span class="hljs-number">22</span>                   [::]<span class="hljs-symbol">:</span><span class="hljs-number">0</span>                 <span class="hljs-title class_">LISTENING</span><br></code></pre></td></tr></table></div></figure><ul><li>如果没有显示任何结果，表示 22 端口被禁用了。</li></ul></li></ol><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>经过多次尝试后，我发现以下步骤有效地解决了问题：</p><ol><li><p><strong>重启电脑</strong>：</p><ul><li>首先，我重启了电脑，确保没有程序在后台占用 <code>hosts</code> 文件。</li></ul></li><li><p><strong>修改 <code>hosts</code> 文件</strong>：</p><ul><li>重启后，我重新打开 Notepad++，以管理员身份编辑 <code>hosts</code> 文件。</li><li>这一次，我能够成功修改文件并保存。以下是我修改后的 <code>hosts</code> 文件内容：</li><li>以下是原内容的其中一部份：</li></ul></li></ol><figure class="highlight accesslog"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lr366vmfcwb3ck"></i><span>ACCESSLOG</span><div class="collapse show" id="collapse-lr366vmfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># Steam++ Start<br><span class="hljs-number">127.0.0.1</span> steamcdn-a.akamaihd.net<br><span class="hljs-number">127.0.0.1</span> steamuserimages-a.akamaihd.net<br><span class="hljs-number">127.0.0.1</span> cdn.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> community.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> avatars.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> store.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> community.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> media.steampowered.com<br><span class="hljs-number">127.0.0.1</span> steamcommunity.com<br><span class="hljs-number">127.0.0.1</span> www.steamcommunity.com<br><span class="hljs-number">127.0.0.1</span> store.steampowered.com<br><span class="hljs-number">127.0.0.1</span> api.steampowered.com<br><span class="hljs-number">127.0.0.1</span> help.steampowered.com<br><span class="hljs-number">127.0.0.1</span> login.steampowered.com<br><span class="hljs-number">127.0.0.1</span> checkout.steampowered.com<br><span class="hljs-number">127.0.0.1</span> img.youtube.com<br><span class="hljs-number">127.0.0.1</span> shared.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> clan.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> store.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> avatars.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> media.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> video.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> huggingface.co<br><span class="hljs-number">127.0.0.1</span> github.dev<br><span class="hljs-number">127.0.0.1</span> api.github.com<br><span class="hljs-number">127.0.0.1</span> gist.github.com<br><span class="hljs-number">127.0.0.1</span> github.githubassets.com<br><span class="hljs-number">127.0.0.1</span> support-assets.githubassets.com<br><span class="hljs-number">127.0.0.1</span> education.github.com<br><span class="hljs-number">127.0.0.1</span> raw.github.com<br><span class="hljs-number">127.0.0.1</span> githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> raw.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> camo.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> cloud.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> avatars.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> avatars0.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> avatars1.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> avatars2.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> avatars3.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> user-images.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> objects.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> private-user-images.githubusercontent.com<br><span class="hljs-number">127.0.0.1</span> github.com<br><span class="hljs-number">127.0.0.1</span> pages.github.com<br><span class="hljs-number">127.0.0.1</span> githubapp.com<br><span class="hljs-number">127.0.0.1</span> hub.docker.com<br># Steam++ End<br></code></pre></td></tr></table></div></figure><p>把上面的肉容改成如下，也就是注释了一部份：</p><figure class="highlight accesslog"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-juhz7zmfcwb3ck"></i><span>ACCESSLOG</span><div class="collapse show" id="collapse-juhz7zmfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># Steam++ Start<br><span class="hljs-number">127.0.0.1</span> steamcdn-a.akamaihd.net<br><span class="hljs-number">127.0.0.1</span> steamuserimages-a.akamaihd.net<br><span class="hljs-number">127.0.0.1</span> cdn.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> community.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> avatars.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> store.akamai.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> community.steamstatic.com<br><span class="hljs-number">127.0.0.1</span> media.steampowered.com<br><span class="hljs-number">127.0.0.1</span> steamcommunity.com<br><span class="hljs-number">127.0.0.1</span> www.steamcommunity.com<br><span class="hljs-number">127.0.0.1</span> store.steampowered.com<br><span class="hljs-number">127.0.0.1</span> api.steampowered.com<br><span class="hljs-number">127.0.0.1</span> help.steampowered.com<br><span class="hljs-number">127.0.0.1</span> login.steampowered.com<br><span class="hljs-number">127.0.0.1</span> checkout.steampowered.com<br><span class="hljs-number">127.0.0.1</span> img.youtube.com<br><span class="hljs-number">127.0.0.1</span> shared.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> clan.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> store.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> avatars.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> media.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> video.st.dl.eccdnx.com<br><span class="hljs-number">127.0.0.1</span> huggingface.co<br># Removed GitHub entries<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> github.dev<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> api.github.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> gist.github.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> github.githubassets.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> support-assets.githubassets.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> education.github.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> raw.github.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> raw.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> camo.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> cloud.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> avatars.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> avatars0.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> avatars1.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> avatars2.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> avatars3.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> user-images.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> objects.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> private-user-images.githubusercontent.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> github.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> pages.github.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> githubapp.com<br># <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> hub.docker.com<br># Steam++ End<br><br></code></pre></td></tr></table></div></figure><p>我发现怎样改也改不了！后来发现重启解决问题！其实重启是多余，真正是关了上面说到的github加速软件！！！完美解决！</p><ol start="3"><li><p><strong>再次重启电脑</strong>：</p><ul><li>为确保修改生效，我再次重启了电脑。</li><li>重启后，我发现 <code>hosts</code> 文件的修改已经生效，问题完全解决。</li></ul></li></ol><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>通过重启电脑并再次尝试修改 <code>hosts</code> 文件，我成功解决了无法保存文件的问题。这个过程表明，可能是某些程序占用了文件或系统缓存导致文件无法保存。重启后，系统会释放这些资源，使得文件可以正常编辑和保存。</p><h3 id="经验总结-1"><a href="#经验总结-1" class="headerlink" title="经验总结"></a>经验总结</h3><ul><li><strong>管理员权限</strong>：在修改系统文件时，确保使用管理员权限打开编辑器。</li><li><strong>重启电脑</strong>：如果遇到无法保存文件的情况，重启电脑是一个有效的解决方法，能够清理系统缓存和释放文件锁定。</li><li><strong>文件保护机制</strong>：某些系统文件可能会受到 Windows 文件保护机制的限制，修改时需要特别注意。</li></ul><p>希望这个解决方案能帮助到遇到类似问题的朋友，避免重复的排查和无效尝试。</p>]]></content>
    
    
    <categories>
      
      <category>GPT问答类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>git仓库</tag>
      
      <tag>git命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RIME个性短语管理工具</title>
    <link href="/2024/12/11/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/RIME%E4%B8%AA%E6%80%A7%E7%9F%AD%E8%AF%AD%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B72024/"/>
    <url>/2024/12/11/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/RIME%E4%B8%AA%E6%80%A7%E7%9F%AD%E8%AF%AD%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B72024/</url>
    
    <content type="html"><![CDATA[<h1 id="RIME个性短语管理工具2024-1"><a href="#RIME个性短语管理工具2024-1" class="headerlink" title="RIME个性短语管理工具2024-1"></a>RIME个性短语管理工具2024-1</h1><p>今天我突发奇想，让Ai给我写一个RIME输入法的造句工具，丰常适合做电商客服用！可以将几行的语句改成一句，适合输入法脚本用！呵呵<br>这是一个用于管理RIME输入法自定义短语的图形界面工具。它可以帮助用户方便地添加、编辑、删除和管理RIME输入法中的个性短语。</p><p><img src="https://s2.loli.net/2024/12/12/jXEWYBex9ZIqVJc.png"></p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li>自动导入RIME默认短语文件</li><li>自动记住上次打开的文件路径</li><li>窗口标题栏实时显示当前文件路径</li><li>支持添加、编辑、删除短语</li><li>自动去除重复输入码</li><li>支持一键整理相同内容短语</li><li>支持调整左右面板大小</li><li>自动识别汉字的五笔编码</li><li>自动去重和格式化</li><li>支持导入&#x2F;导出短语文件</li><li>支持快速编辑和右键菜单操作</li><li>自动保存功能</li><li>操作日志记录功能</li><li>支持多种格式化方案</li><li>支持一键添加所有编码方式</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h3><ul><li><strong>导入短语</strong>：点击”导入”按钮，选择要导入的短语文件</li><li><strong>保存短语</strong>：点击”保存”按钮保存到当前文件，或使用”另存为”保存到新文件</li><li><strong>清空编辑</strong>：点击”清空编辑”按钮清除当前编辑区域的内容</li><li><strong>一键整理</strong>：点击”一键整理”按钮将相同文本内容的短语自动排列到一起</li><li><strong>添加本条所有键码</strong>：点击此按钮为当前文本自动添加所有可能的编码方式</li><li><strong>文件路径</strong>：窗口标题栏会显示当前正在编辑的文件完整路径</li><li><strong>界面调整</strong>：可以拖动中间分隔线调整左右面板的宽度比例</li></ul><h3 id="2-格式化方案选择"><a href="#2-格式化方案选择" class="headerlink" title="2. 格式化方案选择"></a>2. 格式化方案选择</h3><p>提供三种格式化方案：</p><ol><li><strong>所有行不加空格</strong>：文本内容保持原样</li><li><strong>所有行前加空格</strong>：每行文本前添加两个全角空格</li><li><strong>首行以外加空格</strong>：除第一行外，其他行前添加两个全角空格</li></ol><h3 id="3-添加新短语"><a href="#3-添加新短语" class="headerlink" title="3. 添加新短语"></a>3. 添加新短语</h3><ol><li>在右侧大文本框中输入要添加的文本内容</li><li>在”输入码”框中输入短语的编码<ul><li>可以使用以下自动识别按钮：<ul><li>“识别头2字4键”：取前2个汉字的五笔码，每字取前2码（如：改电 -&gt; ntjn）</li><li>“识别头3字6键”：取前3个汉字的五笔码，每字取前2码（如：改电车 -&gt; ntjnlg）</li><li>“识别头4字4键”：取前4个汉字的五笔码，每字取第1码（如：改电车只 -&gt; ntjk）</li><li>“识别头4字8键”：取前4个汉字的五笔码，每字取前2码（如：改电车只 -&gt; ntjnlgkm）</li><li>“识别123码6键”：取前3个汉字的五笔码，第1字取1码，第2字取2码，第3字取3码（如：改电车 -&gt; nljlggg）</li></ul></li><li>或者使用一键添加功能：<ul><li>“添加本条所有键码”：自动为当前文本添加所有可能的编码方式（最多5种编码）</li></ul></li></ul></li><li>在”权重数”框中输入权重（默认为3）</li><li>点击”确认修改”按钮添加短语</li></ol><h3 id="4-编码识别说明"><a href="#4-编码识别说明" class="headerlink" title="4. 编码识别说明"></a>4. 编码识别说明</h3><p>所有识别方法都会自动跳过非汉字字符（如标点符号、空格等），只处理有效的汉字：</p><ol><li><p><strong>识别头2字4键</strong>：</p><ul><li>需要至少2个汉字</li><li>每个字取前2码</li><li>总计4个编码键</li></ul></li><li><p><strong>识别头3字6键</strong>：</p><ul><li>需要至少3个汉字</li><li>每个字取前2码</li><li>总计6个编码键</li></ul></li><li><p><strong>识别头4字4键</strong>：</p><ul><li>需要至少4个汉字</li><li>每个字只取第1码</li><li>总计4个编码键</li></ul></li><li><p><strong>识别头4字8键</strong>：</p><ul><li>需要至少4个汉字</li><li>每个字取前2码</li><li>总计8个编码键</li></ul></li><li><p><strong>识别123码6键</strong>：</p><ul><li>需要至少3个汉字</li><li>第1个字取1码</li><li>第2个字取2码</li><li>第3个字取3码</li><li>总计6个编码键</li></ul></li></ol><h3 id="5-一键添加所有编码说明"><a href="#5-一键添加所有编码说明" class="headerlink" title="5. 一键添加所有编码说明"></a>5. 一键添加所有编码说明</h3><ul><li>功能：点击”添加本条所有键码”按钮，会自动为当前文本添加所有可能的编码方式</li><li>添加规则：<ol><li>识别头2字4键编码</li><li>识别头3字6键编码</li><li>识别头4字4键编码</li><li>识别头4字8键编码</li><li>识别123码6键编码</li></ol></li><li>特点：<ul><li>一次操作可添加最多5种不同编码的短语</li><li>所有短语共用相同的文本内容</li><li>每种编码方式独立保存为一条短语</li><li>自动跳过无法识别的编码</li><li>添加完成后自动清空编辑区</li><li>自动保存所有添加的短语</li></ul></li></ul><h3 id="6-右键菜单功能"><a href="#6-右键菜单功能" class="headerlink" title="6. 右键菜单功能"></a>6. 右键菜单功能</h3><p>在左侧列表中右键点击短语可以：</p><ul><li><strong>编辑</strong>：将选中的短语加载到编辑区</li><li><strong>复制</strong>：复制短语内容到编辑区（输入码留空）</li><li><strong>删除</strong>：从列表中删除选中的短语</li></ul><h3 id="7-日志功能"><a href="#7-日志功能" class="headerlink" title="7. 日志功能"></a>7. 日志功能</h3><ul><li>程序会自动在<code>logs</code>文件夹下生成日志文件</li><li>日志文件名格式：<code>rime_phrase_YYYYMMDD.log</code></li><li>记录内容包括：<ul><li>程序启动和关闭</li><li>文件导入和保存</li><li>短语的添加、修改、删除</li><li>一键整理操作</li><li>错误信息</li></ul></li></ul><h3 id="8-文件保存"><a href="#8-文件保存" class="headerlink" title="8. 文件保存"></a>8. 文件保存</h3><ul><li>程序会自动保存到RIME的默认目录</li><li>默认路径：<code>%USERPROFILE%\AppData\Roaming\Rime\custom_phrase.txt</code></li><li>配置文件：程序会在同目录下创建<code>config.json</code>保存上次使用的文件路径和格式化方案</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>自动去重说明：</p><ul><li>程序会自动检查并去除重复的输入码</li><li>当存在相同输入码时，只保留最后添加的那一条</li><li>相同文本内容但输入码不同的短语会被保留</li><li>去重操作在每次保存时自动执行</li></ul></li><li><p>一键整理说明：</p><ul><li>将具有相同文本内容的短语自动排列到一起</li><li>整理后会按文本内容字典序排序</li><li>确保每个短语后都有换行符，防止内容合并</li><li>自动循环检测并清理所有空行</li><li>实时刷新显示整理进度</li><li>整理完成后会自动保存</li></ul></li><li><p>特殊字符处理：</p><ul><li>全角空格(U+3000)：用于替换制表符和半角空格，使文本排版更美观</li><li>段落分隔符(U+2029)：用于连接多行文本，保持格式整洁</li><li>自动跳过非汉字字符，不影响编码识别</li></ul></li><li><p>权重说明：</p><ul><li>权重越大，短语在候选项中排序越靠前</li><li>默认权重为3</li><li>建议范围：1-10</li></ul></li></ol><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><ul><li>Windows操作系统</li><li>Python 3.6或更高版本</li><li>需要安装tkinter库</li><li>需要写入权限（用于生成日志）</li><li>需要五笔码表文件（wubi86.txt）</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>为什么自动识别功能不工作？</strong></p><ul><li>确保<code>wubi86.txt</code>文件在程序目录下</li><li>检查汉字是否在五笔码表中</li><li>确认文本中有足够的汉字数量</li></ul></li><li><p><strong>如何让修改生效？</strong></p><ul><li>保存文件后，需要在RIME输入法中重新部署才能生效</li></ul></li><li><p><strong>找不到默认文件？</strong></p><ul><li>确保已安装RIME输入法</li><li>检查RIME配置目录是否正确</li></ul></li><li><p><strong>程序没有打开上次的文件？</strong></p><ul><li>检查配置文件<code>config.json</code>是否存在且有读写权限</li><li>确认上次使用的文件路径是否依然有效</li></ul></li></ol><h2 id="更多帮助"><a href="#更多帮助" class="headerlink" title="更多帮助"></a>更多帮助</h2><p>如果您在使用过程中遇到问题，请：</p><ol><li>检查日志文件了解详细错误信息</li><li>确认文件编码为UTF-8</li><li>检查五笔码表文件是否完整</li><li>重新部署RIME输入法</li></ol><p><img src="https://s2.loli.net/2024/12/12/Y5yIbjOQRZCEfie.png" alt="image-20241212160135087"></p><p>总之有AI无什么是不可能的！呵呵</p><p>和代码py文件打包一起了！想要的可以下载</p><p>下载地址：<a href="https://app.lifu.us.kg/%E4%BF%9D%E8%AE%B0%E6%8C%87%E6%8C%A5AI%E5%86%99%E7%9A%84%E7%A8%8B%E5%BA%8F/Rime%E7%9F%AD%E8%AF%AD%E7%AE%A1%E7%90%86.rar">点这下载</a></p><p>一发现冇好使讲我听，我来叫AI改改！！！</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GPT学习</tag>
      
      <tag>hexo博客</tag>
      
      <tag>md命令</tag>
      
      <tag>hexo主页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费静态网站生成器介绍</title>
    <link href="/2024/11/28/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/%E5%85%8D%E8%B4%B9%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/11/28/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/%E5%85%8D%E8%B4%B9%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="免费静态网站生成器介绍"><a href="#免费静态网站生成器介绍" class="headerlink" title="免费静态网站生成器介绍"></a>免费静态网站生成器介绍</h1><h2 id="Publii-它是一个非常易于使用的静态网站生成器"><a href="#Publii-它是一个非常易于使用的静态网站生成器" class="headerlink" title="Publii 它是一个非常易于使用的静态网站生成器"></a>Publii 它是一个非常易于使用的静态网站生成器</h2><p> <strong>Publii</strong> 。它是一个非常易于使用的静态网站生成器，主要用于创建博客和个人网站。以下是它的一些特点： </p><ol><li><p><strong>离线使用</strong> ：Publii 是一款桌面应用程序（支持 Windows、Mac 和 Linux），用户可以离线编辑内容并生成静态网页。</p></li><li><p><strong>静态网站</strong> ：生成的站点是静态文件，加载速度快、安全性高，且无需后端支持。</p></li><li><p><strong>内置主题和插件</strong> ：提供多种免费或付费主题和插件，支持用户自定义页面外观和功能。</p></li><li><p><strong>部署方便</strong> ：支持多种发布方式，比如 GitHub Pages、Netlify、GitLab Pages、FTP、S3、Cloudflare Pages 等。</p></li><li><p><strong>SEO 和性能优化</strong> ：内置工具支持 SEO 设置、图片压缩和页面性能优化。</p></li></ol><p>如果你有关于 Publii 的具体问题，比如部署到服务器、配置主题或功能扩展，可以告诉我，我可以帮你解决！</p><p>You: </p><p>是的，我知道 Publii 这款软件。Publii 是一款用于创建和管理静态网站的桌面应用程序，特别适合博客和个人网站。它的主要特点是：</p><ol><li><p><strong>静态网站生成</strong> ：生成的页面是静态 HTML 文件，无需数据库支持，加载速度快，适合部署到静态托管平台（如 GitHub Pages、Netlify）。</p></li><li><p><strong>离线编辑</strong> ：Publii 是桌面端工具，支持离线编辑内容，然后在需要时同步到服务器。</p></li><li><p><strong>多种主题</strong> ：提供丰富的主题选择，且可自定义设计。</p></li><li><p><strong>一键部署</strong> ：支持通过 FTP、SFTP、GitHub Pages、Netlify、Amazon S3 等方式将网站发布到服务器。</p></li><li><p><strong>用户友好</strong> ：操作界面简单直观，无需复杂的技术知识，适合非技术用户。</p></li></ol><p>类似 <strong>Publii</strong>  的免费静态网站生成器还有不少，这些工具大多也可以用来创建、管理静态网站。以下是几款推荐的免费软件：</p><hr><p><strong>1. Jekyll</strong>  </p><ul><li><p><strong>简介</strong> ：一个基于 Ruby 的静态网站生成器，特别适合博客和个人网站。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>强大的 Markdown 支持。</p></li><li><p>深度自定义主题和布局。</p></li><li><p>与 GitHub Pages 无缝集成，免费托管。</p></li></ul></li><li><p><strong>适合人群</strong> ：开发者和对代码不陌生的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://jekyllrb.com/">https://jekyllrb.com/</a></p></li></ul><hr><p><strong>2. Hugo</strong>  </p><ul><li><p><strong>简介</strong> ：基于 Go 语言开发的静态网站生成器，以其构建速度闻名。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>超快的生成速度。</p></li><li><p>支持多种主题和插件。</p></li><li><p>原生支持 Markdown 和多语言网站。</p></li></ul></li><li><p><strong>适合人群</strong> ：需要快速生成复杂网站的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://gohugo.io/">https://gohugo.io/</a></p></li></ul><hr><p><strong>3. Eleventy (11ty)</strong>  </p><ul><li><p><strong>简介</strong> ：一个基于 JavaScript 的简洁静态网站生成器。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>零依赖框架，灵活性高。</p></li><li><p>支持 Markdown、Liquid、Nunjucks 等多种模板语言。</p></li><li><p>适合搭建简单快速的个人网站或博客。</p></li></ul></li><li><p><strong>适合人群</strong> ：喜欢自定义、掌握一定代码知识的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://www.11ty.dev/">https://www.11ty.dev/</a></p></li></ul><hr><p><strong>4. Grav</strong>  </p><ul><li><p><strong>简介</strong> ：一个基于文件的 CMS 系统，类似静态网站生成器。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>图形化界面，易于管理。</p></li><li><p>丰富的插件和主题支持。</p></li><li><p>强调可扩展性和模块化。</p></li></ul></li><li><p><strong>适合人群</strong> ：希望通过直观界面管理网站的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://getgrav.org/">https://getgrav.org/</a></p></li></ul><hr><p><strong>5. Netlify CMS</strong>  </p><ul><li><p><strong>简介</strong> ：一个基于 Git 的静态网站内容管理系统。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>提供简单易用的界面。</p></li><li><p>与 Git 存储库集成，无缝管理内容。</p></li><li><p>配合 Netlify 部署静态网站。</p></li></ul></li><li><p><strong>适合人群</strong> ：对 Git 和静态网站托管有基本了解的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://www.netlifycms.org/">https://www.netlifycms.org/</a></p></li></ul><hr><p><strong>6. WordPress + Static Site Generator</strong>  </p><ul><li><p><strong>简介</strong> ：使用 WordPress 管理内容，然后通过插件生成静态站点。</p></li><li><p><strong>插件推荐</strong> ：</p><ul><li><p>Simply Static</p></li><li><p>WP2Static</p></li></ul></li><li><p><strong>适合人群</strong> ：熟悉 WordPress，但希望最终发布静态网站的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://wordpress.org/">https://wordpress.org/</a></p></li></ul><hr><p><strong>7. Zola</strong>  </p><ul><li><p><strong>简介</strong> ：一个使用 Rust 编写的静态网站生成器，专注于简单和高效。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>快速构建。</p></li><li><p>支持多语言和自定义主题。</p></li><li><p>安全性高，无需第三方依赖。</p></li></ul></li><li><p><strong>适合人群</strong> ：Rust 开发者或对高效工具有需求的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://getzola.org/">https://getzola.org/</a></p></li></ul><hr><p><strong>8. Pelican</strong>  </p><ul><li><p><strong>简介</strong> ：基于 Python 的静态网站生成器。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>支持 Markdown 和 reStructuredText。</p></li><li><p>主题和插件库丰富。</p></li><li><p>强调简洁与可扩展性。</p></li></ul></li><li><p><strong>适合人群</strong> ：Python 用户。</p></li><li><p><strong>官网</strong> ：<a href="">https://blog.getpelican.com/</a></p></li></ul><hr><p><strong>9. Gatsby</strong>  </p><ul><li><p><strong>简介</strong> ：一个基于 React 的现代静态网站生成器。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>支持动态数据和丰富的前端交互。</p></li><li><p>强大的插件生态系统。</p></li><li><p>适合内容丰富、功能复杂的站点。</p></li></ul></li><li><p><strong>适合人群</strong> ：前端开发者或熟悉 React 的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://www.gatsbyjs.com/">https://www.gatsbyjs.com/</a></p></li></ul><hr><p><strong>10. Hexo</strong>  </p><ul><li><p><strong>简介</strong> ：一个基于 Node.js 的静态博客框架。</p></li><li><p><strong>特点</strong> ：</p><ul><li><p>支持快速部署和插件扩展。</p></li><li><p>丰富的主题选择。</p></li><li><p>原生支持 Markdown。</p></li></ul></li><li><p><strong>适合人群</strong> ：希望快速搭建个人博客的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://hexo.io/">https://hexo.io/</a></p></li></ul><hr><p>如果你希望生成<strong>响应式设计</strong> 的网站，能够自动适配电脑、平板和手机三端，同时具备美观的界面，这里推荐一些最适合你需求的软件和工具：</p><hr><p><strong>1. Gatsby</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>内置响应式设计支持，完美适配三端。</p></li><li><p>基于 React 框架，适合复杂的前端交互。</p></li><li><p>丰富的主题和模板，很多免费资源美观大气。</p></li><li><p>强大的插件生态（支持图片优化、SEO 等）。</p></li></ul></li><li><p><strong>适合人群</strong> ：对前端有一定了解，熟悉 React 的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://www.gatsbyjs.com/">https://www.gatsbyjs.com/</a></p></li></ul><hr><p><strong>2. Hugo</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>超快的静态网站生成速度，支持响应式主题。</p></li><li><p>拥有大量精美主题（如 Ananke、Hello Friend 等）。</p></li><li><p>支持 Markdown 编辑，简单易用。</p></li></ul></li><li><p><strong>适合人群</strong> ：需要快速生成响应式个人网站或博客的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://gohugo.io/">https://gohugo.io/</a></p></li></ul><hr><p><strong>3. Jekyll</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>集成 Bootstrap、Foundation 等响应式框架，支持自定义设计。</p></li><li><p>可从社区下载大量响应式主题。</p></li><li><p>与 GitHub Pages 无缝集成，支持免费托管。</p></li></ul></li><li><p><strong>适合人群</strong> ：对代码稍有了解的用户，特别是需要托管在 GitHub 上的个人博客或项目展示网站。</p></li><li><p><strong>官网</strong> ：<a href="https://jekyllrb.com/">https://jekyllrb.com/</a></p></li></ul><hr><p><strong>4. Publii</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>内置响应式模板，所有默认主题自动适配三端。</p></li><li><p>可视化界面，不需要编程。</p></li><li><p>一键发布到 GitHub Pages、Netlify、FTP 等。</p></li></ul></li><li><p><strong>适合人群</strong> ：零基础用户，尤其是需要快速部署响应式网站的个人或小型企业。</p></li><li><p><strong>官网</strong> ：<a href="https://getpublii.com/">https://getpublii.com/</a></p></li></ul><hr><p><strong>5. Bootstrap Studio</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>专为响应式设计优化，内置 Bootstrap 框架。</p></li><li><p>所见即所得的拖放式编辑器，快速设计美观页面。</p></li><li><p>丰富的组件库，可自定义交互效果。</p></li></ul></li><li><p><strong>适合人群</strong> ：希望通过图形化界面快速搭建专业响应式网站的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://bootstrapstudio.io/">https://bootstrapstudio.io/</a></p></li></ul><hr><p><strong>6. WordPress + 自适应主题</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>搭配响应式主题（如 Astra、GeneratePress、OceanWP），无需编码。</p></li><li><p>配合插件（如 Elementor）可拖放编辑，设计美观且灵活。</p></li><li><p>支持静态导出插件（如 WP2Static），转换成静态网站。</p></li></ul></li><li><p><strong>适合人群</strong> ：希望通过 WordPress 管理内容，但生成静态响应式网站的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://wordpress.org/">https://wordpress.org/</a></p></li></ul><hr><p><strong>7. Eleventy (11ty)</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>支持多种模板语言（Markdown、Liquid 等），灵活自由。</p></li><li><p>社区有大量响应式主题支持，可集成 Tailwind CSS 或 Bootstrap。</p></li><li><p>轻量化工具，适合性能优化。</p></li></ul></li><li><p><strong>适合人群</strong> ：对代码有一定了解，喜欢极简工具的用户。</p></li><li><p><strong>官网</strong> ：<a href="https://www.11ty.dev/">https://www.11ty.dev/</a></p></li></ul><hr><p><strong>8. SvelteKit</strong>  </p><ul><li><p><strong>特点</strong> ：</p><ul><li><p>基于 Svelte 框架，生成响应式静态网站。</p></li><li><p>支持动态交互，适合现代前端项目。</p></li><li><p>社区有很多美观模板可直接使用。</p></li></ul></li><li><p><strong>适合人群</strong> ：前端开发者或需要自定义设计的人。</p></li><li><p><strong>官网</strong> ：<a href="">https://kit.svelte.dev/</a></p></li></ul><hr><p><strong>推荐的选择</strong>  </p><ul><li><p><strong>如果你不想写代码</strong> ： </p><ul><li><p><strong>Publii</strong> （简单易用，主题美观）</p></li><li><p><strong>Bootstrap Studio</strong> （拖放式设计，适合快速搭建美观响应式页面）</p></li></ul></li><li><p><strong>如果你有一定代码能力</strong> ： </p><ul><li><p><strong>Hugo</strong> （快速、强大）</p></li><li><p><strong>Gatsby</strong> （美观现代，功能强大）</p></li><li><p><strong>Jekyll</strong> （经典博客工具，支持响应式设计）</p></li></ul></li><li><p><strong>如果想要深度自定义</strong> ： </p><ul><li><p><strong>Eleventy</strong> （灵活性高）</p></li><li><p><strong>SvelteKit</strong> （适合高交互需求）</p></li></ul></li></ul><p>根据你的技术水平和需求选择合适的工具，如果需要具体使用教程或模板推荐</p>]]></content>
    
    
    <categories>
      
      <category>网页代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网页代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如果想删除Windows其中一个引导选项</title>
    <link href="/2024/11/28/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E5%A6%82%E6%9E%9C%E6%83%B3%E5%88%A0%E9%99%A4Windows%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%BC%95%E5%AF%BC%E9%80%89%E9%A1%B9/"/>
    <url>/2024/11/28/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E5%A6%82%E6%9E%9C%E6%83%B3%E5%88%A0%E9%99%A4Windows%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%BC%95%E5%AF%BC%E9%80%89%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="如果想删除Windows其中一个引导选项"><a href="#如果想删除Windows其中一个引导选项" class="headerlink" title="如果想删除Windows其中一个引导选项"></a>如果想删除Windows其中一个引导选项</h1><img src="https://app.fekepj.com/list-tu/2024/11/28/d4fdd22aa328ec0c7ffedf147bd83a95.jpg" alt="9b51b91064832ac33d1240c38af2c37" style="zoom:50%;" /><p>如果您有一个双系统启动界面。想删除其中一个引导选项，可以按照以下步骤操作：</p><h3 id="方法一：通过系统配置工具-msconfig"><a href="#方法一：通过系统配置工具-msconfig" class="headerlink" title="方法一：通过系统配置工具 (msconfig)"></a>方法一：通过系统配置工具 (msconfig)</h3><ol><li><p><strong>启动 Windows 10</strong> 。</p></li><li><p><strong>按下 <code>Win + R</code></strong>  键，输入 <code>msconfig</code>，然后按 <strong>Enter</strong> 。</p></li><li><p>在弹出的 <strong>系统配置</strong>  窗口中，切换到 <strong>引导</strong>  选项卡。</p></li><li><p>选择您想删除的操作系统（例如 Windows 7 Enterprise）。</p></li><li><p>点击 <strong>删除</strong>  按钮，然后点击 <strong>应用</strong>  和 <strong>确定</strong> 。</p></li><li><p>重启电脑，确认修改后的启动界面。</p></li></ol><hr><h3 id="方法二：通过命令提示符删除引导项"><a href="#方法二：通过命令提示符删除引导项" class="headerlink" title="方法二：通过命令提示符删除引导项"></a>方法二：通过命令提示符删除引导项</h3><ol><li><p><strong>启动 Windows 10</strong> 。</p></li><li><p><strong>按下 <code>Win + X</code></strong> ，选择 <strong>Windows 终端（管理员）</strong>  或 <strong>命令提示符（管理员）</strong> 。</p></li><li><p>输入以下命令查看当前引导项：</p></li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-v62c2omfcwb3cp"></i><span>EBNF</span><div class="collapse show" id="collapse-v62c2omfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bcdedit</span><br></code></pre></td></tr></table></div></figure><p>这会显示一个列表，其中包含每个引导项的标识符（identifier）。</p><ol start="4"><li><p>找到与您要删除的操作系统相关的引导项。例如，Windows 7 的描述可能是 <code>Windows 7 Enterprise</code>。</p></li><li><p>使用以下命令删除对应的引导项（替换 <code>&#123;identifier&#125;</code> 为实际的标识符）：</p></li></ol><figure class="highlight arduino"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-z6xnklmfcwb3cp"></i><span>ARDUINO</span><div class="collapse show" id="collapse-z6xnklmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">bcdedit /<span class="hljs-keyword">delete</span> &#123;identifier&#125;<br></code></pre></td></tr></table></div></figure><ol start="6"><li>重启电脑，检查是否成功。</li></ol><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p><strong>备份重要数据</strong> ：在修改引导配置之前，建议先备份重要数据，以免操作失误导致系统无法启动。</p></li><li><p><strong>确认目标系统</strong> ：请确保删除的引导项是您不再需要的操作系统，避免误删常用系统。</p></li><li><p>如果操作失误导致无法启动，您可以通过系统修复工具或安装盘恢复。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过 Git 来管理文件的版本</title>
    <link href="/2024/11/26/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E9%80%9A%E8%BF%87%20Git%20%E6%9D%A5%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6%E7%9A%84%E7%89%88%E6%9C%AC/"/>
    <url>/2024/11/26/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E9%80%9A%E8%BF%87%20Git%20%E6%9D%A5%E7%AE%A1%E7%90%86%E6%96%87%E4%BB%B6%E7%9A%84%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="通过-Git-来管理文件的版本"><a href="#通过-Git-来管理文件的版本" class="headerlink" title="通过 Git 来管理文件的版本"></a>通过 Git 来管理文件的版本</h1><p>You: </p><p>我在用一款AI编程的软件，让它给我写代码，我怎样用git怎样回退的之前的版本，例如我想记录当前目录的123.py的每一次的变化，如果它改得比之前垃级，那么我就可以回退到想要的那一次</p><p>ChatGPT: </p><p>你可以通过 Git 来管理 <code>123.py</code> 文件的版本，记录每次修改的变化，并在需要时回退到之前的版本。以下是操作步骤：</p><hr><p><strong>1. 初始化 Git 仓库</strong><br>如果当前目录还没有被 Git 管理：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t6d5enmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-t6d5enmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></div></figure><hr><p><strong>2. 添加文件并提交</strong> 将 <code>123.py</code> 添加到版本控制中，并提交：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g77h5amfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-g77h5amfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 123.py<br>git commit -m <span class="hljs-string">&quot;Initial version of 123.py&quot;</span><br></code></pre></td></tr></table></div></figure><p>每次修改文件后，记得提交：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wvb3xymfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-wvb3xymfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 123.py<br>git commit -m <span class="hljs-string">&quot;Describe what you changed in this version&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>3. 查看版本历史</strong> 查看 <code>123.py</code> 的提交历史：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4eq3x1mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-4eq3x1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -- 123.py<br></code></pre></td></tr></table></div></figure><p>会显示类似下面的信息：</p><figure class="highlight ruby"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0ma4yjmfcwb3cl"></i><span>RUBY</span><div class="collapse show" id="collapse-0ma4yjmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">commit abc1234567890<span class="hljs-keyword">def</span><br><span class="hljs-title function_">Author</span>: <span class="hljs-title class_">Your</span> <span class="hljs-title class_">Name</span> &lt;your.email<span class="hljs-variable">@example</span>.com&gt;<br><span class="hljs-title class_">Date</span>:   <span class="hljs-variable constant_">YYYY</span>-<span class="hljs-variable constant_">MM</span>-<span class="hljs-variable constant_">DD</span> <span class="hljs-variable constant_">HH</span><span class="hljs-symbol">:MM</span><span class="hljs-symbol">:SS</span><br><br>    <span class="hljs-title class_">Describe</span> what you changed <span class="hljs-keyword">in</span> this version<br></code></pre></td></tr></table></div></figure><hr><p><strong>4. 回退到某个版本</strong><br>假如你发现当前版本的代码不如之前的某个版本，可以回退到那一版本：</p><ol><li><p>找到你想回退的版本的提交哈希值（<code>abc1234567890def</code>）。</p></li><li><p>使用 <code>git checkout</code> 回退：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lasajimfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-lasajimfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout abc1234567890def -- 123.py<br></code></pre></td></tr></table></div></figure><p>这会将 <code>123.py</code> 回退到指定版本的内容。</p><ol start="3"><li>如果确认需要保持回退的内容，提交新版本：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jtlci5mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-jtlci5mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add 123.py<br>git commit -m <span class="hljs-string">&quot;Reverted to a previous better version&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>5. 比较两个版本</strong> 你可以比较 <code>123.py</code> 当前版本和某个历史版本的区别：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7quj19mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-7quj19mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff abc1234567890def -- 123.py<br></code></pre></td></tr></table></div></figure><hr><p><strong>6. 恢复到最新版本</strong><br>如果你误操作了回退，可以恢复到最新提交的版本：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sczxiemfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-sczxiemfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout HEAD -- 123.py<br></code></pre></td></tr></table></div></figure><hr><p><strong>7. 自动化对比和管理</strong><br>如果你频繁使用 AI 修改代码，可以通过编写一个脚本，每次提交前自动执行测试，比较代码性能或质量，并选择是否提交。</p><hr><p>通过上述步骤，你可以轻松管理 <code>123.py</code> 的每次变化，并根据需要回退到之前的版本。</p><p>You: </p><p>为什么我用这个软件运行不了这命令PS D:\AI开发软件文件夹\20241107多版本调试&gt; git init<br>git : 无法将“git”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如<br>果包括路径，请确保路径正确，然后再试一次。<br>所在位置 行:1 字符: 1</p><ul><li>git init</li><li><pre><code class="hljs">  + CategoryInfo          : ObjectNotFound: (git:String) [], CommandNotFoundException  + FullyQualifiedErrorId : CommandNotFoundException</code></pre></li></ul><p>PS D:\AI开发软件文件夹\20241107多版本调试&gt;</p><p>ChatGPT: </p><p>从错误信息来看，你的系统未正确安装 Git，或环境变量未正确配置。以下是解决方法：</p><hr><p><strong>1. 检查是否已安装 Git</strong><br>在 PowerShell 中运行以下命令：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4zavnxmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-4zavnxmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><ul><li><p>如果显示类似 <code>git version 2.xx.x</code> 的版本信息，说明 Git 已安装。</p></li><li><p>如果显示类似 <em>如果显示类似 <code>CommandNotFoundException</code></em> 的错误，说明 Git 未安装。</p></li></ul><hr><p><strong>2. 安装 Git</strong><br>如果未安装 Git，请按照以下步骤安装：</p><ol><li><strong>下载 Git：</strong></li></ol><ul><li>前往 <a href="https://git-scm.com/downloads">Git 官方网站</a>  下载适合你操作系统的版本。</li></ul><ol start="2"><li><strong>安装：</strong></li></ol><ul><li><p>运行下载的安装包，选择默认设置即可。</p></li><li><p>在安装时确保勾选 <strong>“Add Git to PATH”</strong> （将 Git 添加到系统环境变量）。</p></li></ul><ol start="3"><li><strong>验证安装：</strong></li></ol><ul><li>安装完成后，重新打开 PowerShell，运行以下命令检查版本：</li></ul><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1znipsmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-1znipsmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>3. 检查环境变量</strong><br>如果已安装 Git，但仍然无法识别命令：</p><ol><li><strong>确认 Git 的路径：</strong></li></ol><ul><li>在 Git 的安装目录中找到 <code>git.exe</code>，通常路径是：</li></ul><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-u8yqytmfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-u8yqytmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">C:\Program Files\Git\bin\git.exe</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>添加到环境变量：</strong></li></ol><ul><li><p>按 <code>Win + S</code>，搜索并打开 <strong>“环境变量”</strong> 。</p></li><li><p>在系统变量中找到 <strong>在系统变量中找到 <code>Path</code></strong> ，点击 <strong>编辑</strong> 。</p></li><li><p>添加 Git 的路径，如：</p></li></ul><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t34n8jmfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-t34n8jmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">C:\Program Files\Git\bin</span><br><span class="hljs-section">C:\Program Files\Git\cmd</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>保存设置并重新打开 PowerShell</strong> ：</li></ol><ul><li>输入以下命令验证：</li></ul><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g6v72qmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-g6v72qmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>4. 使用 Git Bash</strong><br>如果你安装了 Git，但不熟悉配置环境变量，可以直接使用 Git 提供的终端工具：</p><ul><li>在开始菜单搜索 <strong>Git Bash</strong> ，打开后运行 Git 命令：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wffzyhmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-wffzyhmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></div></figure><hr><p><strong>5. 重启 PowerShell</strong><br>如果你完成了以上步骤，但 PowerShell 仍无法识别 Git，尝试重启系统，确保环境变量生效。<br>完成这些步骤后，你应该可以在 PowerShell 中运行 <code>git init</code> 等命令了！</p><p>You: </p><p>我已经装在这里的了D:\Program Files\Git\Git\git-bash.exe</p><p>ChatGPT: </p><p>如果你已经安装了 Git，并确认路径为 <code>D:\Program Files\Git\Git\git-bash.exe</code>，但在 PowerShell 中无法运行 Git 命令，可以通过以下步骤解决问题：</p><hr><p><strong>1. 验证 Git 是否可用</strong><br>首先，直接运行 Git Bash，检查 Git 是否工作：</p><ol><li><p>双击 <code>git-bash.exe</code>。</p></li><li><p>在打开的 Git Bash 窗口中输入：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rh4zbimfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-rh4zbimfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></div></figure><p>如果显示 Git 的版本信息，则 Git 安装是正确的。</p><hr><p><strong>2. 配置 PowerShell 的环境变量</strong> 为了在 PowerShell 中直接使用 <code>git</code> 命令，你需要将 Git 的路径添加到系统环境变量 <code>PATH</code> 中。<strong>步骤：</strong>  </p><ol><li><strong>打开环境变量设置：</strong></li></ol><ul><li><p>按 <code>Win + S</code>，搜索 <strong>“环境变量”</strong>  并打开 <strong>编辑系统环境变量</strong> 。</p></li><li><p>点击窗口底部的 <strong>“环境变量”</strong>  按钮。</p></li></ul><ol start="2"><li><strong>编辑系统变量 <code>Path</code>：</strong></li></ol><ul><li><p>在 <strong>系统变量</strong>  中找到 <code>Path</code>，然后点击 <strong>编辑</strong> 。</p></li><li><p>添加以下路径（根据你安装的位置）：</p></li></ul><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jfxcn0mfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-jfxcn0mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">D:\Program Files\Git\Git\bin</span><br><span class="hljs-section">D:\Program Files\Git\Git\cmd</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>保存设置并关闭：</strong></li></ol><ul><li>点击 <strong>确定</strong>  保存，关闭所有窗口。</li></ul><ol start="4"><li><strong>重启 PowerShell：</strong></li></ol><ul><li>关闭当前的 PowerShell，重新打开，再运行：</li></ul><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ya2kf8mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-ya2kf8mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><p>如果显示 Git 的版本信息，则配置已完成。</p><hr><p><strong>3. 快速测试是否已配置好</strong><br>在 PowerShell 中运行：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1ezp85mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-1ezp85mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:Path</span> += <span class="hljs-string">&quot;;D:\Program Files\Git\Git\bin;D:\Program Files\Git\Git\cmd&quot;</span><br>git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><p>如果能正常显示 Git 版本，说明路径已正确添加。这种方法只对当前会话有效，建议仍通过 <strong>环境变量</strong>  方法做永久配置。</p><hr><p><strong>4. 如果仍有问题，检查路径是否准确</strong><br>确认以下目录下是否有这些文件：</p><ul><li><p><code>D:\Program Files\Git\Git\bin\git.exe</code></p></li><li><p><code>D:\Program Files\Git\Git\cmd\git.exe</code></p></li></ul><p>如果没有，请检查你的 Git 安装位置，确保路径填写正确。</p><hr><p>完成上述步骤后，PowerShell 应该能正常运行 <code>git</code> 命令。如果仍有问题，请告诉我具体的报错信息，我可以进一步帮助你解决！</p><p>You: </p><p>Administrator@LIBAO MINGW64 &#x2F;d&#x2F;桌面<br>$ git –version<br>git version 2.43.0.windows.1</p><p>Administrator@LIBAO MINGW64 &#x2F;d&#x2F;桌面<br>$</p><p>ChatGPT: </p><p>从你的输出来看，Git 已经正确安装并能在 Git Bash 中使用，这说明 Git 本身工作正常。如果你希望在 <strong>PowerShell</strong>  中也能直接运行 <code>git</code> 命令，但仍遇到问题，可以按照以下步骤检查并修复：</p><hr><p><strong>1. 确保 Git 在环境变量中</strong><br>Git Bash 使用的是其自身的环境配置，但 PowerShell 需要通过系统环境变量找到 Git。<br><strong>检查步骤：</strong>  </p><ol><li><strong>打开环境变量设置：</strong></li></ol><ul><li><p>按下 <code>Win + S</code>，搜索 <strong>“环境变量”</strong>  并打开 <strong>“编辑系统环境变量”</strong> 。</p></li><li><p>点击窗口底部的 <strong>“环境变量”</strong>  按钮。</p></li></ul><ol start="2"><li><strong>检查 <code>Path</code> 系统变量：</strong></li></ol><ul><li><p>找到 <strong>系统变量</strong>  中的 <code>Path</code> 项，点击 <strong>编辑</strong> 。</p></li><li><p>检查是否包含以下路径（根据你的安装位置）：</p></li></ul><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jqgvejmfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-jqgvejmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">D:\Program Files\Git\Git\bin</span><br><span class="hljs-section">D:\Program Files\Git\Git\cmd</span><br></code></pre></td></tr></table></div></figure><p>如果没有，点击 <strong>新建</strong>  添加这些路径。</p><ol start="3"><li><strong>保存并退出：</strong></li></ol><ul><li>点击 <strong>确定</strong>  保存所有设置，关闭所有窗口。</li></ul><hr><p><strong>2. 重启 PowerShell</strong><br>环境变量的更改需要重新启动 PowerShell 才能生效。关闭所有 PowerShell 窗口，然后重新打开一个新的窗口。</p><hr><p><strong>3. 测试 PowerShell 中的 Git</strong><br>在 PowerShell 中输入以下命令：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-z9z6uxmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-z9z6uxmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><p>如果返回 Git 的版本信息，则配置成功。</p><hr><p><strong>4. 如果仍无法识别 Git</strong><br>尝试以下方法进行手动调试：<br><strong>方法 1：临时添加 Git 路径</strong><br>在 PowerShell 中直接添加路径（仅当前会话有效）：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9irnh4mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-9irnh4mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:Path</span> += <span class="hljs-string">&quot;;D:\Program Files\Git\Git\bin;D:\Program Files\Git\Git\cmd&quot;</span><br>git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><p>如果此方法可用，则说明问题出在永久环境变量配置上，重复第 1 步确保 <code>Path</code> 正确设置。<strong>方法 2：检查是否有冲突的 Git 配置</strong><br>如果安装了多个 Git 版本或软件，请确保调用的是正确版本的 Git。使用以下命令查看 Git 的路径：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8sxk6amfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-8sxk6amfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">where</span> git<br></code></pre></td></tr></table></div></figure><p>应返回：</p><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-p25wvpmfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-p25wvpmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">D:\Program Files\Git\Git\cmd\git.exe</span><br></code></pre></td></tr></table></div></figure><p>如果路径不对，可以通过修改 <code>Path</code> 环境变量来优先使用正确的 Git。</p><hr><p><strong>5. 使用 Git Bash 替代</strong> 如果你不需要在 PowerShell 中运行 <code>git</code> 命令，可以直接用 Git Bash，因为它已配置好所有环境变量，能直接使用 Git。</p><hr><p>尝试完成这些步骤后，问题应该能解决。如果仍有困难，请提供你在 PowerShell 中的具体错误信息，我可以进一步帮你排查问题！</p><p>You: </p><p>已存在D:\Program Files\Git\Git\bin</p><p>ChatGPT: </p><p>既然路径 <code>D:\Program Files\Git\Git\bin</code> 已存在，那么问题可能出在环境变量未正确加载或 PowerShell 未正确识别环境变量。按照以下步骤确保配置无误：</p><hr><p><strong>1. 确认环境变量配置</strong> 虽然 <code>D:\Program Files\Git\Git\bin</code> 已存在，但你需要确认是否已经添加到系统变量 <code>Path</code> 中：<strong>步骤：</strong>  </p><ol><li><p>按 <code>Win + S</code> 搜索并打开 <strong>“环境变量”</strong> 。</p></li><li><p>点击窗口下方的 <strong>“环境变量”</strong>  按钮。</p></li><li><p>在 <strong>系统变量</strong>  中找到 <code>Path</code>，选中后点击 <strong>编辑</strong> 。</p></li><li><p>检查 <code>Path</code> 是否包含以下条目：</p></li></ol><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rh28swmfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-rh28swmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">D:\Program Files\Git\Git\bin</span><br><span class="hljs-section">D:\Program Files\Git\Git\cmd</span><br></code></pre></td></tr></table></div></figure><ul><li>如果没有，点击 <strong>新建</strong> ，将上述路径逐一添加。</li></ul><ol start="5"><li>点击 <strong>确定</strong>  保存。</li></ol><hr><p><strong>2. 确保 PowerShell 使用最新的环境变量</strong><br>修改环境变量后，你需要重新启动 PowerShell 或重启系统，确保它能加载新的变量。</p><hr><p><strong>3. 验证 Git 路径</strong><br>重新打开 PowerShell，运行以下命令验证 Git 是否被识别：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-u3nxcqmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-u3nxcqmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>4. 手动指定 Git 路径</strong><br>如果上述步骤仍无法解决问题，可以临时手动指定 Git 路径：<br><strong>方法：临时修改环境变量</strong><br>在 PowerShell 中运行：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-62n78wmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-62n78wmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:Path</span> += <span class="hljs-string">&quot;;D:\Program Files\Git\Git\bin;D:\Program Files\Git\Git\cmd&quot;</span><br>git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><p>这将立即生效（仅当前 PowerShell 会话有效）。</p><hr><p><strong>5. 检查冲突的 Git 安装</strong><br>如果仍无法运行 Git，有可能你的系统中存在其他冲突的 Git 或路径配置。使用以下命令查找：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ei7vgnmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-ei7vgnmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">where</span> git<br></code></pre></td></tr></table></div></figure><ul><li>正常情况下，应该显示：</li></ul><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gy6dcqmfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-gy6dcqmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">D:\Program Files\Git\Git\bin\git.exe</span><br></code></pre></td></tr></table></div></figure><ul><li>如果显示其他路径，说明有冲突的 Git 安装，可以通过修改 <code>Path</code> 优先级解决问题。</li></ul><hr><p><strong>6. 使用 Git Bash</strong> 如果以上步骤仍无法解决，你可以直接使用 <code>Git Bash</code>，因为它不依赖系统环境变量配置，直接打开即可运行 <code>git</code> 命令。</p><hr><p>尝试以上步骤后，问题应能解决。如果仍有问题，请将最新的错误信息提供给我，我会继续帮你排查！</p><p>You: </p><p><img src="https://files.oaiusercontent.com/file-UAVKudGDgcHPnmjAHJ4KYQ?se=2024-11-26T15:24:27Z&sp=r&sv=2024-08-04&sr=b&rscc=max-age=299,%20immutable,%20private&rscd=attachment;%20filename=image.png&sig=21JsJuzyoANy7P4vnajTH7EYDHSow48s0mkJYr6O1h0=" alt="已上传的图片"> </p><p>这样是可以了吗？</p><p>ChatGPT: </p><p>从你提供的截图来看，你已经通过 <code>$env:Path</code> 命令临时添加了 Git 的路径，并成功运行了 <code>git --version</code> 命令，显示了 Git 的版本信息 <code>2.43.0.windows.1</code>。这说明 <strong>Git 在当前 PowerShell 会话中已经可以正常使用</strong> 。</p><hr><p><strong>接下来需要完成的操作</strong>  </p><ol><li><strong>永久配置 Git 路径</strong> ：<br>目前的路径设置只是临时生效，关闭 PowerShell 后会失效。如果需要让 Git 在所有 PowerShell 会话中都能使用，建议将路径永久添加到环境变量中。<strong>步骤：</strong></li></ol><ul><li>按照以下路径永久配置：</li></ul><figure class="highlight makefile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1odn2nmfcwb3cl"></i><span>MAKEFILE</span><div class="collapse show" id="collapse-1odn2nmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">D:\Program Files\Git\Git\bin</span><br><span class="hljs-section">D:\Program Files\Git\Git\cmd</span><br></code></pre></td></tr></table></div></figure><ul><li>参考之前的步骤在系统环境变量 <code>Path</code> 中添加上述路径。</li></ul><ol start="2"><li><strong>验证永久配置是否生效</strong> ：</li></ol><ul><li>重启 PowerShell，然后再次运行：</li></ul><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9ghvcmmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-9ghvcmmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></div></figure><ul><li>如果成功显示版本信息，说明永久配置生效。</li></ul><hr><p><strong>Git 版本管理步骤示例</strong> 完成上述配置后，你可以按照以下步骤使用 Git 管理 <code>123.py</code> 文件的每次更改： </p><ol><li><strong>初始化 Git 仓库</strong> ：<br>在 <code>123.py</code> 文件所在目录运行：</li></ol><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6iugd0mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-6iugd0mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git init<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>添加文件到 Git</strong> ：<br>添加 <code>123.py</code> 文件：</li></ol><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mjhdxemfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-mjhdxemfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git add <span class="hljs-number">123</span>.py<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>提交更改</strong> ：<br>提交当前更改并添加描述：</li></ol><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-oqjgr6mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-oqjgr6mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;描述当前更改内容&quot;</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li><strong>查看提交历史</strong> ：<br>查看 <code>123.py</code> 的所有历史提交：</li></ol><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t0vcgvmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-t0vcgvmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git log <span class="hljs-literal">--</span> <span class="hljs-number">123</span>.py<br></code></pre></td></tr></table></div></figure><ol start="5"><li><strong>回退到特定版本</strong> ：<br>根据提交记录的 <code>commit id</code> 回退到指定版本：</li></ol><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7dncrumfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-7dncrumfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git checkout &lt;commit id&gt; <span class="hljs-number">123</span>.py<br></code></pre></td></tr></table></div></figure><p><strong>注意</strong> ：这会让文件恢复到特定版本，但不会影响仓库的其他部分。</p><p>如果有其他问题或需要更详细的帮助，可以继续向我提问！</p><p>You: </p><p>git commit -m “描述当前更改内容”描述当前更改内容可用当明时间吗？</p><p>ChatGPT: </p><p>是的，你可以在提交信息中使用当前的日期和时间来描述更改内容。Git 本身不会自动将时间插入到提交信息中，但你可以通过手动或自动方式实现。</p><p>以下是几种方法：</p><hr><p><strong>1. 手动输入当前日期和时间</strong> 直接在 <code>git commit</code> 的描述信息中手动添加时间，例如：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a8gdpymfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-a8gdpymfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;更新文件，时间：2024-11-07 15:30&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>2. 自动插入当前日期和时间</strong><br>如果你希望自动生成包含当前日期和时间的提交信息，可以使用以下命令：<br>方法 1：通过 <code>date</code> 命令获取时间<br>在 PowerShell 中：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9wbjw1mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-9wbjw1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;更新文件，时间：<span class="hljs-variable">$</span>(Get-Date -Format &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&quot;</span><br></code></pre></td></tr></table></div></figure><ul><li>输出示例：</li></ul><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-grznrjmfcwb3cl"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-grznrjmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">更新文件，时间：2024<span class="hljs-string">-11</span><span class="hljs-string">-07</span> 15:30:45<br></code></pre></td></tr></table></div></figure><h4 id="方法-2：在-Git-Bash-中"><a href="#方法-2：在-Git-Bash-中" class="headerlink" title="方法 2：在 Git Bash 中"></a>方法 2：在 Git Bash 中</h4><p>Git Bash 中可以使用 <code>date</code> 命令：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o25q7jmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-o25q7jmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;更新文件，时间：<span class="hljs-subst">$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)</span>&quot;</span><br></code></pre></td></tr></table></div></figure><ul><li>输出示例：</li></ul><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cyq3iwmfcwb3cl"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-cyq3iwmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">更新文件，时间：2024<span class="hljs-string">-11</span><span class="hljs-string">-07</span> 15:30:45<br></code></pre></td></tr></table></div></figure><hr><p><strong>3. 配置提交模板（高级方法）</strong><br>如果你希望每次提交时自动包含日期时间，可以通过设置 Git 提交模板实现：</p><h4 id="设置步骤："><a href="#设置步骤：" class="headerlink" title="设置步骤："></a>设置步骤：</h4><ol><li>创建一个模板文件，例如：</li></ol><ul><li>在 <code>D:\</code> 中创建文件 <code>commit-template.txt</code>，内容如下：</li></ul><figure class="highlight handlebars"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3gydu5mfcwb3cl"></i><span>HANDLEBARS</span><div class="collapse show" id="collapse-3gydu5mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">更新文件，时间：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">datetime</span>&#125;&#125;</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>配置 Git 使用此模板：</li></ol><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wbwy95mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-wbwy95mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git config <span class="hljs-literal">--global</span> commit.template <span class="hljs-string">&quot;D:/commit-template.txt&quot;</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li>修改模板内容时动态插入时间：<br>在每次提交时，可以编辑模板并手动插入时间。</li></ol><hr><p>通过这些方法，你可以方便地在提交信息中记录当前时间，帮助你更好地管理版本历史。如需进一步定制，可以继续提问！</p><p>You: </p><p>PS D:\AI开发软件文件夹\20241107多版本调试&gt; git add 123.py<br>PS D:\AI开发软件文件夹\20241107多版本调试&gt; git commit -m “更新文件，时间：$(Get-Date -Format ‘yyyy-MM-dd HH:mm:ss’)”<br>On branch master<br>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)<br>        .vscode&#x2F;<br>        123.rar<br>        123.spec<br>        3232.ico<br>        README.md<br>        app.manifest<br>        build&#x2F;<br>        config.json<br>        dist&#x2F;<br>        version.txt<br>        “\344\275\277\347\224\250\345\221\275\344\273\244.TXT”</p><p>nothing added to commit but untracked files present (use “git add” to track)<br>PS D:\AI开发软件文件夹\20241107多版本调试&gt; 这是？</p><p>ChatGPT: </p><p>从你提供的输出来看，Git 并没有提交任何更改，主要是因为以下原因：</p><hr><p><strong>问题原因</strong>  </p><ol><li><strong><code>git add</code> 的作用范围有限</strong> ：<br>你只添加了 <code>123.py</code> 文件，而其他文件（例如 <code>.vscode/</code>, <code>123.rar</code>, <code>123.spec</code>, 等）处于未追踪状态（Untracked files）。</li></ol><ul><li>Git 默认只会提交已经被添加到索引区（staging area）的文件。如果文件没有通过 <code>git add</code> 添加，Git 不会将它们提交。</li></ul><ol start="2"><li><strong>提交信息没有更新内容</strong> ：<br><code>nothing added to commit but untracked files present</code> 表示：</li></ol><ul><li><p>当前提交中，<code>123.py</code> 文件没有发生变更，或者它没有被正确地添加到 Git 的索引区。</p></li><li><p>其他文件未被追踪（Untracked），因此它们没有包含在提交中。</p></li></ul><ol start="3"><li><strong>非 ASCII 文件名显示乱码</strong> ：<br><code>&quot;\344\275\277\347\224\250\345\221\275\344\273\244.TXT&quot;</code> 是一个包含中文名称的文件，但编码问题导致显示为乱码。</li></ol><hr><p><strong>解决方法</strong> **<br>从你提供的输出来看，Git 并没有提交任何更改，主要是因为以下原因：</p><hr><p><strong>问题原因</strong>  </p><ol><li><strong><code>git add</code> 的作用范围有限</strong> ：<br>你只添加了 <code>123.py</code> 文件，而其他文件（例如 <code>.vscode/</code>, <code>123.rar</code>, <code>123.spec</code>, 等）处于未追踪状态（Untracked files）。</li></ol><ul><li>Git 默认只会提交已经被添加到索引区（staging area）的文件。如果文件没有通过 <code>git add</code> 添加，Git 不会将它们提交。</li></ul><ol start="2"><li><strong>提交信息没有更新内容</strong> ：<br><code>nothing added to commit but untracked files present</code> 表示：</li></ol><ul><li><p>当前提交中，<code>123.py</code> 文件没有发生变更，或者它没有被正确地添加到 Git 的索引区。</p></li><li><p>其他文件未被追踪（Untracked），因此它们没有包含在提交中。</p></li></ul><ol start="3"><li><strong>非 ASCII 文件名显示乱码</strong> ：<br><code>&quot;\344\275\277\347\224\250\345\221\275\344\273\244.TXT&quot;</code> 是一个包含中文名称的文件，但编码问题导致显示为乱码。</li></ol><hr><p><strong>解决方法</strong> 1. 确认是否修改了 <code>123.py</code> 文件** 确保 <code>123.py</code> 文件已经被修改，如果没有任何更改，Git 不会重新提交。可以运行以下命令确认文件状态：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-s0bh4tmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-s0bh4tmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git status<br></code></pre></td></tr></table></div></figure><ul><li>如果 <code>123.py</code> 在 <code>Changes not staged for commit</code> 列表中，说明文件有改动但未添加到索引区，需要用 <code>git add</code> 添加。<br><strong>2. 添加所有文件（如果需要）</strong><br>如果你想同时提交所有文件（包括新文件和已修改文件），可以运行：</li></ul><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-htmfr1mfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-htmfr1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git add .<br></code></pre></td></tr></table></div></figure><p>然后再提交：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6gfegnmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-6gfegnmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;更新文件，时间：<span class="hljs-variable">$</span>(Get-Date -Format &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&quot;</span><br></code></pre></td></tr></table></div></figure><p><strong>3. 单独提交特定文件</strong> 如果你只想提交 <code>123.py</code> 文件，不涉及其他文件，确保文件已正确添加到索引区：</p><figure class="highlight powershell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ocak3nmfcwb3cl"></i><span>POWERSHELL</span><div class="collapse show" id="collapse-ocak3nmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">git add <span class="hljs-number">123</span>.py<br>git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;更新 123.py，时间：<span class="hljs-variable">$</span>(Get-Date -Format &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&quot;</span><br></code></pre></td></tr></table></div></figure><p><strong>4. 文件名乱码问题</strong><br>对于中文文件名导致的乱码问题，可以尝试以下方法解决：</p><ol><li>确保 Git 使用 UTF-8 编码：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ovxxgmmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-ovxxgmmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.quotepath <span class="hljs-literal">false</span><br></code></pre></td></tr></table></div></figure><p>这将使文件名显示为可读的中文。</p><ol start="2"><li>如果乱码仍然存在，确认你的终端（PowerShell 或 Git Bash）是否支持 UTF-8。<br><strong>5. 检查 Git 忽略文件</strong> 某些文件可能被 <code>.gitignore</code> 文件排除在版本控制之外，运行以下命令检查忽略规则：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-resjzxmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-resjzxmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git check-ignore -v *<br></code></pre></td></tr></table></div></figure><hr><p><strong>总结解决步骤</strong>  </p><ol><li><p><strong>确认文件状态</strong> ：使用 <code>git status</code>。</p></li><li><p><strong>添加文件</strong> ：使用 <code>git add</code> 将所需文件添加到索引区。</p></li><li><p><strong>提交文件</strong> ：使用 <code>git commit</code> 提交更改。</p></li><li><p><strong>解决乱码</strong> ：设置 <code>core.quotepath=false</code>。<br>如果还有问题，请提供 <code>git status</code> 的输出，我可以进一步帮你分析。</p></li></ol><p>You: </p><p>怎样回退到指定的时间版本</p><p>ChatGPT: </p><p>要回退到指定的时间版本，Git 提供了几种方式可以实现版本的回退。你需要找到符合指定时间的提交记录，然后回退到该版本。</p><hr><p><strong>1. 查看历史提交记录</strong><br>使用以下命令查看提交记录，以找到对应时间的提交：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hidoutmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-hidoutmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span><br></code></pre></td></tr></table></div></figure><ul><li>输出示例：</li></ul><figure class="highlight yaml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t04gwwmfcwb3cl"></i><span>YAML</span><div class="collapse show" id="collapse-t04gwwmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">3f47c2d</span> <span class="hljs-bullet">-</span> <span class="hljs-string">用户名,</span> <span class="hljs-attr">2 hours ago :</span> <span class="hljs-string">更新文件</span><br><span class="hljs-string">1a2b3c4</span> <span class="hljs-bullet">-</span> <span class="hljs-string">用户名,</span> <span class="hljs-attr">1 day ago :</span> <span class="hljs-string">修复</span> <span class="hljs-string">bug</span><br><span class="hljs-string">9d8f7g6</span> <span class="hljs-bullet">-</span> <span class="hljs-string">用户名,</span> <span class="hljs-attr">3 days ago :</span> <span class="hljs-string">初始化项目</span><br></code></pre></td></tr></table></div></figure><p>如果需要更详细的信息（包括时间戳），可以运行：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-z9th6qmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-z9th6qmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --since=<span class="hljs-string">&quot;2024-11-06&quot;</span> --<span class="hljs-keyword">until</span>=<span class="hljs-string">&quot;2024-11-07&quot;</span> --pretty=fuller<br></code></pre></td></tr></table></div></figure><p>通过提交的时间戳，找到匹配时间的提交哈希值（例如：<code>3f47c2d</code>）。</p><hr><p><strong>2. 回退到指定版本的方法</strong> <strong>方法 1：回退到指定版本（HEAD 指针回退，保持历史）</strong><br>如果你想保留所有历史，但将项目内容恢复到某个版本，可以使用以下命令：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vdzt4nmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-vdzt4nmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout &lt;commit-hash&gt;<br></code></pre></td></tr></table></div></figure><p>例如：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-syezplmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-syezplmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout 3f47c2d<br></code></pre></td></tr></table></div></figure><p>这会切换到一个“分离的 HEAD 状态”，项目文件将恢复到指定版本的状态，但不会更改当前分支。</p><ul><li><strong>注意</strong> ：如果需要对恢复后的内容进行修改或提交，记得创建一个新分支：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-v3ixelmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-v3ixelmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b 新分支名<br></code></pre></td></tr></table></div></figure><hr><p><strong>方法 2：回退并覆盖当前分支（历史仍然保留）</strong> 如果你希望当前分支的状态直接恢复到指定版本，可以使用 <code>reset</code> 命令：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kxudf1mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-kxudf1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard &lt;commit-hash&gt;<br></code></pre></td></tr></table></div></figure><p>例如：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-od6t6vmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-od6t6vmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard 3f47c2d<br></code></pre></td></tr></table></div></figure><p>这会将当前分支指向指定版本，并覆盖工作区和索引区的内容。</p><hr><p><strong>方法 3：回退并保留变更</strong><br>如果你想回退到某个版本，但保留之后的修改作为未提交的变更：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4xd02omfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-4xd02omfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --soft &lt;commit-hash&gt;<br></code></pre></td></tr></table></div></figure><ul><li><strong>区别</strong> ： <ul><li><p><code>--soft</code>: 仅回退 Git 历史记录，保留所有文件的改动（在暂存区）。</p></li><li><p><code>--mixed</code>: 回退历史记录并清空暂存区，但工作区文件仍保留。</p></li><li><p><code>--hard</code>: 回退历史记录，并清空暂存区和工作区。</p></li></ul></li></ul><hr><p><strong>3. 回退到时间点附近的提交</strong><br>如果只知道时间而非具体提交哈希，可以结合时间筛选提交：</p><h4 id="查看指定时间附近的提交："><a href="#查看指定时间附近的提交：" class="headerlink" title="查看指定时间附近的提交："></a>查看指定时间附近的提交：</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-x865ycmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-x865ycmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --since=<span class="hljs-string">&quot;2024-11-06 10:00&quot;</span> --<span class="hljs-keyword">until</span>=<span class="hljs-string">&quot;2024-11-07 18:00&quot;</span><br></code></pre></td></tr></table></div></figure><h4 id="回退到最接近的提交："><a href="#回退到最接近的提交：" class="headerlink" title="回退到最接近的提交："></a>回退到最接近的提交：</h4><p>找到时间点最近的哈希值后，使用 <code>reset</code> 或 <code>checkout</code> 命令切换到该版本。</p><hr><p><strong>4. 强制回退到时间点</strong> 如果希望直接强制 Git 回退到一个时间点的最新提交，可以结合 <code>reflog</code>（Git 引用日志）找到目标版本：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-57amk4mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-57amk4mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog<br></code></pre></td></tr></table></div></figure><p>输出示例：</p><figure class="highlight kotlin"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0hzzo3mfcwb3cl"></i><span>KOTLIN</span><div class="collapse show" id="collapse-0hzzo3mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">3f47c2d (HEAD -&gt; master) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">0</span>&#125;: commit: 更新文件<br>1a2b3c4 <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">1</span>&#125;: commit: 修复 bug<br>9d8f7g6 <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">2</span>&#125;: commit: 初始化项目<br></code></pre></td></tr></table></div></figure><p>然后执行以下命令回退：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lldvh4mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-lldvh4mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard HEAD@&#123;1&#125;<br></code></pre></td></tr></table></div></figure><hr><p><strong>5. 提交一个回退点的快照</strong><br>如果你不希望破坏分支历史，可以在回退之前创建一个新的分支：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2oyhflmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-2oyhflmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch backup-branch<br>git reset --hard &lt;commit-hash&gt;<br></code></pre></td></tr></table></div></figure><p>这样，即使回退了，原始的提交历史仍然可以从 <code>backup-branch</code> 中找到。</p><hr><p><strong>总结</strong>  </p><ol><li>找到提交记录：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l3lsr1mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-l3lsr1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --since=<span class="hljs-string">&quot;指定时间&quot;</span> --<span class="hljs-keyword">until</span>=<span class="hljs-string">&quot;指定时间&quot;</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>根据需要选择回退方法：</li></ol><ul><li><p>保留所有历史：<code>git checkout &lt;commit-hash&gt;</code></p></li><li><p>覆盖当前分支：<code>git reset --hard &lt;commit-hash&gt;</code></p></li><li><p>保留修改：<code>git reset --soft &lt;commit-hash&gt;</code><br>如有进一步问题，可以提供具体的时间点或 <code>git log</code> 输出，我可以帮你分析回退到哪个版本更合适。</p></li></ul><p>You: </p><p>这是什么意思PS D:\AI开发软件文件夹\20241107多版本调试&gt; git commit -m<br>“更新 123.py，时间：$(Get-Date -Format ‘yyyy-MM-dd HH:mm:ss’)”<br>git : 无法将“git”项识别为 cmdlet、函数、脚本文件或可运<br>行程序的名称。请检查名称的拼写，如果包括路径，请确保路径<br>正确，然后再试一次。<br>所在位置 行:1 字符: 1</p><ul><li>git commit -m “更新 123.py，时间：$(Get-Date -Format ‘<br>yyyy-MM-dd HH:mm:ss’) …</li><li><pre><code class="hljs">  + CategoryInfo          : ObjectNotFound: (git:Stri   ng) [], CommandNotFoundException  + FullyQualifiedErrorId : CommandNotFoundException</code></pre></li></ul><p>PS D:\AI开发软件文件夹\20241107多版本调试&gt;</p><p>ChatGPT: </p><p>这个错误表明 PowerShell 无法识别 <code>git</code> 命令，可能的原因如下：</p><hr><p><strong>1. 环境变量配置问题</strong> 尽管之前已经通过 <code>$env:Path</code> 临时添加了 Git 的路径，但这个路径可能没有正确生效或者丢失。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>确保 Git 的路径正确并且已经永久添加到系统环境变量中：</p><ol><li>打开 <strong>系统环境变量</strong>  设置：</li></ol><ul><li><p>按 <code>Win + S</code> 搜索 <strong>环境变量</strong> 。</p></li><li><p>点击 <strong>环境变量</strong> ，在 <strong>系统变量</strong>  下找到 <code>Path</code>。</p></li></ul><ol start="2"><li>检查以下路径是否存在于 <code>Path</code> 中：</li></ol><ul><li><p><code>D:\Program Files\Git\Git\bin</code></p></li><li><p><code>D:\Program Files\Git\Git\cmd</code></p></li></ul><ol start="3"><li><p>如果不存在，则添加它们并保存。</p></li><li><p>重新启动 PowerShell 并输入以下命令，验证 Git 是否可用：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ypfzhrmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-ypfzhrmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></div></figure><hr><p><strong>2. PowerShell 命令解析问题</strong> 在 PowerShell 中，<code>$(...)</code> 是子表达式的语法，用于运行命令并将其输出嵌入到字符串中。你的命令中：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gg1hmamfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-gg1hmamfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;更新 123.py，时间：<span class="hljs-subst">$(Get-Date -Format &#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span>&quot;</span><br></code></pre></td></tr></table></div></figure><p>PowerShell 会先运行 <code>$(Get-Date -Format &#39;yyyy-MM-dd HH:mm:ss&#39;)</code>，将结果嵌入到字符串中。<br>如果 Git 无法识别，可能是环境变量未正确配置或者子表达式解析出错。</p><h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4><p>使用双引号内的子表达式，在 PowerShell 中执行以下命令：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7c6zx7mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-7c6zx7mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;更新 123.py，时间：<span class="hljs-subst">$(Get-Date -Format &#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span>&quot;</span><br></code></pre></td></tr></table></div></figure><p>如果问题仍然存在，可以改为手动插入时间：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8uafy9mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-8uafy9mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;更新 123.py，时间：2024-11-07 12:34:56&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>3. Git 未正确安装</strong> 如果 <code>git --version</code> 显示正确版本，但在 PowerShell 中提示 <code>CommandNotFoundException</code>，可能是安装路径问题导致的 PowerShell 环境不兼容。</p><h4 id="解决方法：-2"><a href="#解决方法：-2" class="headerlink" title="解决方法："></a>解决方法：</h4><p>尝试运行 <code>git</code> 的完整路径：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-uevms2mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-uevms2mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;D:\Program Files\Git\Git\cmd\git.exe&quot;</span> commit -m <span class="hljs-string">&quot;更新 123.py，时间：<span class="hljs-subst">$(Get-Date -Format &#x27;yyyy-MM-dd HH:mm:ss&#x27;)</span>&quot;</span><br></code></pre></td></tr></table></div></figure><p>如果这条命令成功，说明 PowerShell 未能正确识别 Git 的路径。请返回第 1 步，检查路径设置。</p><hr><p><strong>4. 临时解决方法</strong><br>你也可以切换到 Git Bash（Git 自带的终端）来运行命令：</p><ol><li>打开 Git Bash：</li></ol><ul><li>找到 <code>D:\Program Files\Git\Git\git-bash.exe</code> 并启动。</li></ul><ol start="2"><li>切换到项目目录：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-izf4nemfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-izf4nemfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /d/AI开发软件文件夹/20241107多版本调试<br></code></pre></td></tr></table></div></figure><ol start="3"><li>手动运行提交命令：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-neiyjfmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-neiyjfmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;更新 123.py，时间：<span class="hljs-subst">$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)</span>&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>总结</strong>  </p><ol><li><p><strong>优先检查环境变量</strong> ：确保 <code>D:\Program Files\Git\Git\bin</code> 和 <code>cmd</code> 路径已添加到 <code>Path</code> 中。</p></li><li><p>在 PowerShell 中，确保使用正确的语法或改用完整路径运行 <code>git</code>。</p></li><li><p>如果问题仍然存在，可以切换到 Git Bash 作为临时解决方案。</p></li></ol><p>试完以上方法后，如果问题依旧，请告诉我你的具体尝试情况和输出，我会进一步帮你排查！</p><p>You: </p><p>commit be187f4cd870d11cbb2a55d298d9fc521879a461 (HEAD -&gt; master)<br>Author: lifuaini2019 <a href="mailto:&#x6c;&#105;&#102;&#x75;&#x61;&#x69;&#110;&#x69;&#50;&#48;&#49;&#x39;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#105;&#102;&#x75;&#x61;&#x69;&#110;&#x69;&#50;&#48;&#49;&#x39;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a><br>Date:   Tue Nov 26 17:27:30 2024 +0800</p><pre><code class="hljs">更新 123.py，时间：2024-11-26 17:27:30</code></pre><p>commit 049cb9aa756d14ec07961d522c443e61cede5cda<br>Author: lifuaini2019 <a href="mailto:&#x6c;&#x69;&#x66;&#x75;&#x61;&#105;&#x6e;&#x69;&#50;&#48;&#x31;&#x39;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x6c;&#x69;&#x66;&#x75;&#x61;&#105;&#x6e;&#x69;&#50;&#48;&#x31;&#x39;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a><br>Date:   Tue Nov 26 17:21:06 2024 +0800</p><p>:这两个，我想回到Date:   Tue Nov 26 17:21:06 2024 +0800这个怎样操作写命令</p><p>ChatGPT: </p><p>要回退到某个特定的提交，可以使用 <code>git reset</code> 命令。具体操作如下：</p><h3 id="回退到特定提交："><a href="#回退到特定提交：" class="headerlink" title="回退到特定提交："></a>回退到特定提交：</h3><ol><li><p><strong>首先</strong> ，你可以使用 <code>git log</code> 查看提交历史，确定你想回退到的提交哈希（在你的例子中是 <code>049cb9aa756d14ec07961d522c443e61cede5cda</code>）。</p></li><li><p><strong>使用 <code>git reset</code> 命令回退到该提交</strong> ：<br>你可以选择使用 <code>--hard</code> 或 <code>--soft</code> 参数来回退。</p></li></ol><h4 id="回退到指定提交（完全回退）："><a href="#回退到指定提交（完全回退）：" class="headerlink" title="回退到指定提交（完全回退）："></a>回退到指定提交（完全回退）：</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-y2gtxdmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-y2gtxdmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard 049cb9aa756d14ec07961d522c443e61cede5cda<br></code></pre></td></tr></table></div></figure><ul><li>这样会<strong>完全回退</strong> 到 <code>049cb9aa</code> 提交的状态，所有在此之后的更改将会丢失（包括工作区的更改）。</li></ul><h4 id="回退到指定提交（保留工作区更改）："><a href="#回退到指定提交（保留工作区更改）：" class="headerlink" title="回退到指定提交（保留工作区更改）："></a>回退到指定提交（保留工作区更改）：</h4><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8gce5emfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-8gce5emfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --soft 049cb9aa756d14ec07961d522c443e61cede5cda<br></code></pre></td></tr></table></div></figure><ul><li>这会将历史回退到 <code>049cb9aa</code> 提交，但<strong>保留当前文件的修改</strong> （即不丢失工作区的更改）。</li></ul><hr><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li><p><code>git reset --hard</code> 会删除未提交的更改，请确保没有重要数据未保存。</p></li><li><p>如果你已经推送了提交到远程仓库，并且想回退远程仓库的状态，可以使用 <code>git push --force</code> 强制推送。</p></li></ul><p>例如：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-imvjaomfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-imvjaomfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --force<br></code></pre></td></tr></table></div></figure><p>这个命令将会把本地仓库的历史强制推送到远程仓库，注意这可能会影响其他协作开发者。</p><hr><p><strong>总结</strong> ： </p><ul><li><p>如果你只想修改本地历史，可以使用 <code>git reset</code>。</p></li><li><p>如果需要强制同步到远程仓库，记得推送变更时使用 <code>--force</code>。</p></li></ul><p>如果有其他问题，随时告诉我！</p><p>You: </p><p>commit 049cb9aa756d14ec07961d522c443e61cede5cda<br>Author: lifuaini2019 <a href="mailto:&#x6c;&#x69;&#102;&#x75;&#97;&#x69;&#x6e;&#105;&#x32;&#x30;&#x31;&#x39;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;">&#x6c;&#x69;&#102;&#x75;&#97;&#x69;&#x6e;&#105;&#x32;&#x30;&#x31;&#x39;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a><br>Date:   Tue Nov 26 17:21:06 2024 +0800</p><pre><code class="hljs">更新 123.py，时间：2024-11-26 17:21:06</code></pre><p>commit 8ae44f72e5e1040720e3f8637d83482c36dacb8a<br>Author: lifuaini2019 <a href="mailto:&#108;&#105;&#x66;&#117;&#97;&#105;&#x6e;&#105;&#50;&#48;&#49;&#x39;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#105;&#x66;&#117;&#97;&#105;&#x6e;&#105;&#50;&#48;&#49;&#x39;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a><br>:为何一直停在这个页面？</p><p>ChatGPT: </p><p>如果你在执行 <code>git reset</code> 命令时遇到停留在某个页面，可能是因为某些原因导致命令没有正确执行。我们可以检查以下几个方面：</p><h3 id="1-确保命令执行成功："><a href="#1-确保命令执行成功：" class="headerlink" title="1. 确保命令执行成功："></a>1. 确保命令执行成功：</h3><p>首先，你可以确认是否执行了正确的 <code>git reset</code> 命令。例如： </p><ul><li>回退到提交 <code>049cb9aa</code>：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0u0p10mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-0u0p10mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard 049cb9aa756d14ec07961d522c443e61cede5cda<br></code></pre></td></tr></table></div></figure><p>如果使用 <code>git reset --hard</code>，请确保本地没有未保存的更改，否则它会丢失工作区内容。</p><h3 id="2-查看-Git-状态："><a href="#2-查看-Git-状态：" class="headerlink" title="2. 查看 Git 状态："></a>2. 查看 Git 状态：</h3><p>如果你已经回退到指定提交，可以使用 <code>git status</code> 查看当前状态。它会告诉你是否有未提交的更改或者暂存的文件。例如：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qsuh6ymfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-qsuh6ymfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></div></figure><p>如果有未提交的更改，Git 会提醒你。</p><h3 id="3-检查是否有未解决的冲突："><a href="#3-检查是否有未解决的冲突：" class="headerlink" title="3. 检查是否有未解决的冲突："></a>3. 检查是否有未解决的冲突：</h3><p>如果你在执行回退过程中遇到冲突，Git 会暂停并要求你解决冲突。你可以通过以下命令查看当前的状态并解决冲突：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cto37kmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-cto37kmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></div></figure><p>如果有冲突文件，需要手动解决并使用以下命令继续：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2acfyimfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-2acfyimfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;冲突文件&gt;<br>git reset --hard<br></code></pre></td></tr></table></div></figure><h3 id="4-检查是否是在正确的命令行界面："><a href="#4-检查是否是在正确的命令行界面：" class="headerlink" title="4. 检查是否是在正确的命令行界面："></a>4. 检查是否是在正确的命令行界面：</h3><p>确保你在正确的 Git 命令行环境下（例如 Git Bash 或者 PowerShell）。有时，命令行可能因为环境问题无法执行某些 Git 命令。</p><h3 id="5-确保没有挂起的合并或操作："><a href="#5-确保没有挂起的合并或操作：" class="headerlink" title="5. 确保没有挂起的合并或操作："></a>5. 确保没有挂起的合并或操作：</h3><p>如果在执行 <code>git reset</code> 时出现挂起的合并操作（比如之前执行过 <code>git merge</code>），可以使用以下命令取消合并并继续：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-faekdfmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-faekdfmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge --abort<br></code></pre></td></tr></table></div></figure><h3 id="6-Git-日志查看："><a href="#6-Git-日志查看：" class="headerlink" title="6. Git 日志查看："></a>6. Git 日志查看：</h3><p>你可以通过 <code>git log</code> 查看当前提交历史，确认是否已经回退到目标提交：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ziq08tmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-ziq08tmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --oneline<br></code></pre></td></tr></table></div></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li><p>使用 <code>git reset --hard</code> 确保完全回退。</p></li><li><p>确认命令是否成功执行，可以通过 <code>git status</code> 和 <code>git log</code> 查看当前状态。</p></li><li><p>检查是否有挂起的操作（合并冲突等）阻止了 Git 操作。</p></li></ol><p>如果你仍然停留在同一页面或遇到问题，请提供更多信息，我将进一步帮助你解决！</p><p>You: </p><p>Administrator@LIBAO MINGW64 &#x2F;d&#x2F;AI开发软件文件夹&#x2F;20241107多版本调试 (master)<br>$ git log – 123.py<br>commit 081890373af0454bb90a988df623927424973fd0 (HEAD -&gt; master)<br>Author: lifuaini2019 <a href="mailto:&#108;&#x69;&#x66;&#x75;&#97;&#x69;&#x6e;&#105;&#50;&#48;&#49;&#x39;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#108;&#x69;&#x66;&#x75;&#97;&#x69;&#x6e;&#105;&#50;&#48;&#49;&#x39;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;</a><br>Date:   Tue Nov 26 18:13:06 2024 +0800</p><pre><code class="hljs">更新 123.py，时间：2024-11-26 18:13:06</code></pre><p>commit 7a4b2ee777a9b9528208afbd10ad4baebc3ab0f9<br>Author: lifuaini2019 <a href="mailto:&#x6c;&#105;&#x66;&#117;&#97;&#105;&#x6e;&#x69;&#50;&#48;&#x31;&#x39;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x6c;&#105;&#x66;&#117;&#97;&#105;&#x6e;&#x69;&#50;&#48;&#x31;&#x39;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a><br>Date:   Tue Nov 26 17:55:28 2024 +0800</p><pre><code class="hljs">更新 123.py，时间：2024-11-26 17:55:28</code></pre><p>commit 049cb9aa756d14ec07961d522c443e61cede5cda<br>Author: lifuaini2019 <a href="mailto:&#x6c;&#105;&#x66;&#117;&#97;&#105;&#x6e;&#105;&#50;&#48;&#49;&#x39;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x6c;&#105;&#x66;&#117;&#97;&#105;&#x6e;&#105;&#50;&#48;&#49;&#x39;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;</a><br>Date:   Tue Nov 26 17:21:06 2024 +0800</p><pre><code class="hljs">更新 123.py，时间：2024-11-26 17:21:06</code></pre><p>commit 8ae44f72e5e1040720e3f8637d83482c36dacb8a<br>Author: lifuaini2019 <a href="mailto:&#x6c;&#x69;&#x66;&#x75;&#x61;&#x69;&#110;&#x69;&#x32;&#x30;&#x31;&#x39;&#64;&#103;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#x6c;&#x69;&#x66;&#x75;&#x61;&#x69;&#110;&#x69;&#x32;&#x30;&#x31;&#x39;&#64;&#103;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a><br>Date:   Tue Nov 26 16:52:00 2024 +0800</p><pre><code class="hljs">Initial version of 123.py</code></pre><p>: 出现这个页面，我想取消操作 ，按哪个键？</p><p>ChatGPT: </p><p>根据你提供的信息，<code>git log</code> 命令显示了一个提交日志，并且你似乎在一个查看提交历史的页面上，这通常是 Git 使用 <code>less</code> 或类似的分页工具显示的。<br>在分页查看模式中，你可以使用以下操作来退出或取消：</p><ol><li><p><strong>按 <code>q</code> 键</strong> ：退出查看模式，返回命令行提示符。</p></li><li><p><strong>按 <code>Ctrl+C</code></strong> ：如果按 <code>q</code> 无法退出，你可以尝试使用 <code>Ctrl+C</code> 来中断当前操作并返回命令行。</p></li></ol><p>如果你正在回退操作并不确定是否继续，可以尝试在执行任何更改之前确认你的操作是否正确。</p>]]></content>
    
    
    <categories>
      
      <category>GPT问答类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>git仓库</tag>
      
      <tag>git命令</tag>
      
      <tag>GPT学习</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>推荐使用的文本编辑器或工具</title>
    <link href="/2024/11/21/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E6%88%96%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/11/21/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E6%88%96%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="推荐使用的文本编辑器或工具"><a href="#推荐使用的文本编辑器或工具" class="headerlink" title="推荐使用的文本编辑器或工具"></a>推荐使用的文本编辑器或工具</h1><p>有许多开源且免费的文本编辑器或工具支持强大的查找和替换功能，并提供专门的操作窗口来输入查找和替换内容。以下是一些推荐的工具：</p><hr><ol><li><strong>Notepad++</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>免费、开源，专为 Windows 开发。</p></li><li><p>提供高级查找和替换功能，包括正则表达式支持。</p></li><li><p>查找和替换有独立窗口，易于输入和操作。</p></li></ul></li><li><p><strong>适用场景</strong> ：轻量级文本处理。</p></li><li><p><strong>下载地址</strong> ：<a href="https://notepad-plus-plus.org/">Notepad++ 官网</a></p></li></ul><ul><li>目前我所有电脑都装有这个，常用好用</li></ul><hr><ol start="2"><li><strong>VS Code (Visual Studio Code)</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>免费、开源，支持多平台（Windows、Mac、Linux）。</p></li><li><p>内置强大的查找和替换功能，支持正则表达式、跨文件查找和替换。</p></li><li><p>可安装丰富的插件扩展功能。</p></li></ul></li><li><p><strong>适用场景</strong> ：对多文件、多格式内容的查找替换。</p></li><li><p><strong>下载地址</strong> ：<a href="https://code.visualstudio.com/">VS Code 官网</a></p></li></ul><hr><ol start="3"><li><strong>Atom</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>免费、开源，由 GitHub 开发，支持跨平台。</p></li><li><p>提供强大的文本编辑功能和全局查找替换。</p></li><li><p>界面简洁，支持正则表达式查找替换。</p></li></ul></li><li><p><strong>适用场景</strong> ：需要简单操作或跨文件查找替换的场景。</p></li><li><p><strong>下载地址</strong> ：<a href="https://atom.io/">Atom 官网</a></p></li></ul><hr><ol start="4"><li><strong>Sublime Text (免费试用版)</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>跨平台，虽然是收费软件，但功能几乎完全免费使用。</p></li><li><p>提供极其高效的查找和替换功能，支持多选、正则表达式。</p></li></ul></li><li><p><strong>适用场景</strong> ：处理较大的文本文件。</p></li><li><p><strong>下载地址</strong> ：<a href="https://www.sublimetext.com/">Sublime Text 官网</a></p></li></ul><hr><ol start="5"><li><strong>Geany</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>免费、开源，轻量级文本编辑器，跨平台。</p></li><li><p>支持查找和替换、正则表达式和多文档操作。</p></li></ul></li><li><p><strong>适用场景</strong> ：适合低配置设备。</p></li><li><p><strong>下载地址</strong> ：<a href="https://www.geany.org/">Geany 官网</a></p></li></ul><hr><ol start="6"><li><strong>gEdit</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>GNOME 的默认文本编辑器，免费、开源。</p></li><li><p>提供基本的查找替换功能，也支持正则表达式。</p></li></ul></li><li><p><strong>适用场景</strong> ：Linux 用户使用的默认工具。</p></li><li><p><strong>下载地址</strong> ：<a href="">gEdit 官网</a></p></li></ul><hr><ol start="7"><li><strong>grepWin</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>专注于查找和替换功能，免费开源。</p></li><li><p>支持正则表达式，针对整个文件夹批量替换。</p></li></ul></li><li><p><strong>适用场景</strong> ：需要处理大量文件时。</p></li><li><p><strong>下载地址</strong> ：<a href="">grepWin 官网</a></p></li></ul><ul><li>目前我就是用这款来搜索批量替换-好用</li></ul><hr><ol start="8"><li><strong>KWrite &#x2F; Kate (KDE 文本编辑器)</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>免费、开源，专为 Linux KDE 桌面环境开发。</p></li><li><p>提供强大的查找和替换功能。</p></li><li><p>支持多文档、正则表达式。</p></li></ul></li><li><p><strong>适用场景</strong> ：Linux KDE 环境用户。</p></li><li><p><strong>下载地址</strong> ：<a href="https://kate-editor.org/">Kate 官网</a></p></li></ul><hr><ol start="9"><li><strong>LibreOffice Writer</strong></li></ol><ul><li><p><strong>特点</strong> ：</p><ul><li><p>免费、开源，强大的办公套件，支持查找和替换功能。</p></li><li><p>支持正则表达式。</p></li></ul></li><li><p><strong>适用场景</strong> ：需要编辑较大的文档（如 Word 文档）。</p></li><li><p><strong>下载地址</strong> ：<a href="https://www.libreoffice.org/">LibreOffice 官网</a></p></li></ul><hr><h3 id="推荐选择："><a href="#推荐选择：" class="headerlink" title="推荐选择："></a>推荐选择：</h3><ul><li><p><strong>轻量级操作</strong> ：Notepad++ 或 grepWin。</p></li><li><p><strong>跨文件查找</strong> ：VS Code 或 Atom。</p></li><li><p><strong>多平台支持</strong> ：VS Code 或 Geany。</p></li><li><p><strong>Linux 系统</strong> ：gEdit 或 Kate。</p></li></ul><p>可以根据您的具体需求选择合适的软件！</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>md命令</tag>
      
      <tag>md代码</tag>
      
      <tag>网页代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git推送常见的出错地方AI解答</title>
    <link href="/2024/11/21/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E6%8E%A8%E9%80%81git%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BA%E9%94%99%E5%9C%B0%E6%96%B9AI%E8%A7%A3%E7%AD%94/"/>
    <url>/2024/11/21/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E6%8E%A8%E9%80%81git%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BA%E9%94%99%E5%9C%B0%E6%96%B9AI%E8%A7%A3%E7%AD%94/</url>
    
    <content type="html"><![CDATA[<h2 id="推送git常见的出错地方AI解答"><a href="#推送git常见的出错地方AI解答" class="headerlink" title="推送git常见的出错地方AI解答"></a>推送git常见的出错地方AI解答</h2><details>  <summary>我的问题太垃圾不要看</summary><p>多在连接gitlab仓库时好像文件没推送上去On branch main<br>Your branch is ahead of ‘origin&#x2F;main’ by 3 commits.<br>  (use “git push” to publish your local commits)</p><p>nothing to commit, working tree clean<br><a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#108;&#97;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#108;&#97;&#98;&#x2e;&#99;&#x6f;&#109;</a>: Permission denied (publickey).<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.<br>推送完成。按回车键退出…</p></details><hr><h3 id="AI第回答："><a href="#AI第回答：" class="headerlink" title="AI第回答："></a>AI第回答：</h3><hr><p>根据您提供的信息，问题的核心在于 SSH 公钥认证失败，导致无法推送到 GitLab 仓库。以下是解决问题的步骤：</p><hr><ol><li><strong>确认 SSH 公钥是否配置正确</strong></li></ol><h4 id="检查本地是否生成了-SSH-密钥"><a href="#检查本地是否生成了-SSH-密钥" class="headerlink" title="检查本地是否生成了 SSH 密钥"></a>检查本地是否生成了 SSH 密钥</h4><p>在终端运行以下命令，检查是否有 <code>id_rsa</code> 或其他密钥文件：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7iz6b2mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-7iz6b2mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh<br></code></pre></td></tr></table></div></figure><p>如果存在类似 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 文件，说明已经生成了密钥。</p><h4 id="如果没有密钥，生成新的-SSH-密钥"><a href="#如果没有密钥，生成新的-SSH-密钥" class="headerlink" title="如果没有密钥，生成新的 SSH 密钥"></a>如果没有密钥，生成新的 SSH 密钥</h4><p>如果没有密钥文件，可以生成一个新的 SSH 密钥：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-q1fj4xmfcwb3cl"></i><span>APACHE</span><div class="collapse show" id="collapse-q1fj4xmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></div></figure><p>按提示操作后，密钥会保存在 <code>~/.ssh/id_rsa</code> 和 <code>~/.ssh/id_rsa.pub</code> 中。</p><h4 id="将公钥添加到-GitLab"><a href="#将公钥添加到-GitLab" class="headerlink" title="将公钥添加到 GitLab"></a>将公钥添加到 GitLab</h4><p>运行以下命令显示公钥内容：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9sgsd7mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-9sgsd7mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></div></figure><p>复制输出内容并登录 GitLab：</p><ol><li><p>点击头像 &gt; <strong>Settings</strong>  &gt; <strong>SSH Keys</strong> 。</p></li><li><p>将复制的公钥粘贴到文本框中，设置有效期并保存。</p></li></ol><hr><ol start="2"><li><strong>测试 SSH 连接</strong><br>确保 SSH 配置正确，运行以下命令：</li></ol><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9q3ioxmfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-9q3ioxmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><p>预期输出为：</p><figure class="highlight pf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-50dghgmfcwb3cl"></i><span>PF</span><div class="collapse show" id="collapse-50dghgmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">Welcome <span class="hljs-keyword">to</span> GitLab, <span class="hljs-variable">&lt;Your GitLab Username&gt;</span>!<br></code></pre></td></tr></table></div></figure><p>如果仍提示 <strong>Permission denied (publickey)</strong> ，请确保 SSH 配置无误。</p><hr><ol start="3"><li>**<br>根据您提供的信息，问题的核心在于 SSH 公钥认证失败，导致无法推送到 GitLab 仓库。以下是解决问题的步骤：</li></ol><hr><ol><li><strong>确认 SSH 公钥是否配置正确</strong></li></ol><h4 id="检查本地是否生成了-SSH-密钥-1"><a href="#检查本地是否生成了-SSH-密钥-1" class="headerlink" title="检查本地是否生成了 SSH 密钥"></a>检查本地是否生成了 SSH 密钥</h4><p>在终端运行以下命令，检查是否有 <code>id_rsa</code> 或其他密钥文件：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-znfjjsmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-znfjjsmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh<br></code></pre></td></tr></table></div></figure><p>如果存在类似 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 文件，说明已经生成了密钥。</p><h4 id="如果没有密钥，生成新的-SSH-密钥-1"><a href="#如果没有密钥，生成新的-SSH-密钥-1" class="headerlink" title="如果没有密钥，生成新的 SSH 密钥"></a>如果没有密钥，生成新的 SSH 密钥</h4><p>如果没有密钥文件，可以生成一个新的 SSH 密钥：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o6htx4mfcwb3cl"></i><span>APACHE</span><div class="collapse show" id="collapse-o6htx4mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></div></figure><p>按提示操作后，密钥会保存在 <code>~/.ssh/id_rsa</code> 和 <code>~/.ssh/id_rsa.pub</code> 中。</p><h4 id="将公钥添加到-GitLab-1"><a href="#将公钥添加到-GitLab-1" class="headerlink" title="将公钥添加到 GitLab"></a>将公钥添加到 GitLab</h4><p>运行以下命令显示公钥内容：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qvexhamfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-qvexhamfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></div></figure><p>复制输出内容并登录 GitLab：</p><ol><li><p>点击头像 &gt; <strong>Settings</strong>  &gt; <strong>SSH Keys</strong> 。</p></li><li><p>将复制的公钥粘贴到文本框中，设置有效期并保存。</p></li></ol><hr><ol start="2"><li><strong>测试 SSH 连接</strong><br>确保 SSH 配置正确，运行以下命令：</li></ol><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1d2k5gmfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-1d2k5gmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><p>预期输出为：</p><figure class="highlight pf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-uei8yhmfcwb3cl"></i><span>PF</span><div class="collapse show" id="collapse-uei8yhmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">Welcome <span class="hljs-keyword">to</span> GitLab, <span class="hljs-variable">&lt;Your GitLab Username&gt;</span>!<br></code></pre></td></tr></table></div></figure><p>如果仍提示 <strong>Permission denied (publickey)</strong> ，请确保 SSH 配置无误。</p><hr><ol start="3"><li>检查 <code>config</code> 文件配置** 如果使用了多个 SSH 密钥，需要为 GitLab 指定正确的密钥。在 <code>~/.ssh/config</code> 文件中添加以下内容：</li></ol><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-weckbumfcwb3cl"></i><span>CRMSH</span><div class="collapse show" id="collapse-weckbumfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host gitlab.com<br>  HostName gitlab.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa  <span class="hljs-comment"># 替换为正确的私钥路径</span><br></code></pre></td></tr></table></div></figure><p>保存后，再次测试连接：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pzfn20mfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-pzfn20mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><hr><ol start="4"><li><strong>推送代码</strong><br>确认连接正常后，推送代码：</li></ol><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mvcjibmfcwb3cl"></i><span>MAXIMA</span><div class="collapse show" id="collapse-mvcjibmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></div></figure><hr><ol start="5"><li><strong>其他可能的问题</strong></li></ol><ul><li><p><strong>仓库权限问题</strong> ：确保您在 GitLab 仓库中有推送权限。</p></li><li><p><strong>分支名称错误</strong> ：如果远程分支不是 <code>main</code>，请检查实际分支名称。</p></li></ul><hr><p>如果按照以上步骤操作后问题仍未解决，请分享具体的报错信息以便进一步协助。</p><details>  <summary>我的问题太垃圾不要看</summary><p>Administrator@LIBAO MINGW64 &#x2F;g&#x2F;bk&#x2F;gitlab拍照备份仓库<br>$ git config user.name “lab6435_name” ; git config user.email “lab6435_email”<br>fatal: not in a git directory<br>fatal: not in a git directory<br> 这是什么意思成功吗？</p></details><hr><h3 id="AI第回答：-1"><a href="#AI第回答：-1" class="headerlink" title="AI第回答："></a>AI第回答：</h3><hr><p>这个错误说明您当前所在的目录 <strong>这个错误说明您当前所在的目录 <code>/g/bk/gitlab拍照备份仓库</code></strong>  不是一个 Git 仓库，因此不能设置 Git 用户名和邮箱。</p><h3 id="错误原因分析"><a href="#错误原因分析" class="headerlink" title="错误原因分析"></a>错误原因分析</h3><ul><li><p><code>git config</code> 命令只能在已初始化的 Git 仓库目录中运行。</p></li><li><p>您可能忘记在该目录下初始化 Git 仓库。</p></li></ul><hr><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><strong>确认是否在 Git 仓库目录中</strong><br>运行以下命令，检查当前目录是否已初始化为 Git 仓库：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9zhdc7mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-9zhdc7mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -a<br></code></pre></td></tr></table></div></figure><p>如果输出中没有 <code>.git</code> 文件夹，说明当前目录不是 Git 仓库。2. <strong>初始化 Git 仓库</strong><br>在当前目录中运行以下命令，初始化 Git 仓库：</p><figure class="highlight csharp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-haehiamfcwb3cl"></i><span>CSHARP</span><div class="collapse show" id="collapse-haehiamfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></div></figure><p>成功后，再次运行以下命令设置用户名和邮箱：</p><figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-avp7uimfcwb3cl"></i><span>PGSQL</span><div class="collapse show" id="collapse-avp7uimfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name &quot;lab6435_name&quot;<br>git config <span class="hljs-keyword">user</span>.email &quot;lab6435_email&quot;<br></code></pre></td></tr></table></div></figure><hr><ol start="3"><li><strong>全局设置用户名和邮箱</strong><br>如果您希望对所有 Git 仓库生效，可以使用全局设置：</li></ol><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bg24ecmfcwb3cl"></i><span>STYLUS</span><div class="collapse show" id="collapse-bg24ecmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;lab6435_name&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;lab6435_email&quot;</span><br></code></pre></td></tr></table></div></figure><p>全局设置无需依赖特定的 Git 仓库目录。</p><hr><h3 id="验证设置"><a href="#验证设置" class="headerlink" title="验证设置"></a>验证设置</h3><p>您可以使用以下命令查看当前用户配置是否正确：</p><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9f0ftfmfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-9f0ftfmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-built_in">--global</span> <span class="hljs-built_in">--list</span>  <span class="hljs-comment"># 查看全局设置</span><br><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-built_in">--list</span>           <span class="hljs-comment"># 查看当前仓库的设置（如果在 Git 仓库中）</span><br></code></pre></td></tr></table></div></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果您没有在 Git 仓库中，先初始化仓库再配置用户信息；如果是全局设置，则无须在特定的 Git 仓库中运行命令。</p><details>  <summary>我的问题太垃圾不要看</summary><p>帮我看看哪步出错了？$ git config user.name “lab6435_name” ; git config user.email “lab6435_email”</p><p>Administrator@LIBAO MINGW64 &#x2F;g&#x2F;bk&#x2F;gitlab拍照备份仓库 (master)<br>$ git remote add origin <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x6c;&#x61;&#x62;&#x36;&#x34;&#x33;&#x35;&#46;&#103;&#x69;&#x74;&#x6c;&#97;&#x62;&#46;&#x63;&#111;&#109;">&#x67;&#x69;&#x74;&#64;&#x6c;&#x61;&#x62;&#x36;&#x34;&#x33;&#x35;&#46;&#103;&#x69;&#x74;&#x6c;&#97;&#x62;&#46;&#x63;&#111;&#109;</a>:libao21&#x2F;zipbefe.git<br>error: remote origin already exists.</p><p>Administrator@LIBAO MINGW64 &#x2F;g&#x2F;bk&#x2F;gitlab拍照备份仓库 (master)<br>$ git fetch –all –force<br><a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x6c;&#x61;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#x74;&#x6c;&#x61;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>: Permission denied (publickey).<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.</p><p>Administrator@LIBAO MINGW64 &#x2F;g&#x2F;bk&#x2F;gitlab拍照备份仓库 (master)<br>$ git checkout main<br>error: pathspec ‘main’ did not match any file(s) known to git</p><p>Administrator@LIBAO MINGW64 &#x2F;g&#x2F;bk&#x2F;gitlab拍照备份仓库 (master)</p></details><hr><h3 id="AI第回答：-2"><a href="#AI第回答：-2" class="headerlink" title="AI第回答："></a>AI第回答：</h3><hr><p>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><ol start="2"><li>关于 <code>git remote add origin</code>**<br>出现的错误：</li></ol><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vjgaihmfcwb3cl"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-vjgaihmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>remote origin already exists.<br></code></pre></td></tr></table></div></figure><h4 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h4><p>说明您已经为该仓库添加了一个名为 <code>origin</code> 的远程地址。</p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>您可以查看当前的远程地址：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-b1g6cimfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-b1g6cimfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>如果地址不对，可以修改或删除远程地址：</p><ul><li>修改远程地址：</li></ul><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8wfl3lmfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-8wfl3lmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><ul><li>删除并重新添加远程地址：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-992lwdmfcwb3cl"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-992lwdmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">remove</span> origin<br>git remote <span class="hljs-built_in">add</span> origin git@lab6435.gitlab.com:libao21/zipbefe.git<br></code></pre></td></tr></table></div></figure><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><ol start="2"><li>关于 <code>git remote add origin</code>**<br>出现的错误：</li></ol><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-e6r1stmfcwb3cl"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-e6r1stmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>remote origin already exists.<br></code></pre></td></tr></table></div></figure><h4 id="错误原因-1"><a href="#错误原因-1" class="headerlink" title="错误原因"></a>错误原因</h4><p>说明您已经为该仓库添加了一个名为 <code>origin</code> 的远程地址。</p><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>您可以查看当前的远程地址：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-aavelkmfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-aavelkmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>如果地址不对，可以修改或删除远程地址：</p><ul><li>修改远程地址：</li></ul><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7g3mb5mfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-7g3mb5mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><ul><li>删除并重新添加远程地址：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g5f9p2mfcwb3cl"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-g5f9p2mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">remove</span> origin<br>git remote <span class="hljs-built_in">add</span> origin git@lab6435.gitlab.com:libao21/zipbefe.git<br></code></pre></td></tr></table></div></figure><hr><ol start="3"><li>关于 <code>git fetch --all --force</code>**<br>出现的错误：</li></ol><figure class="highlight scss"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g6eydhmfcwb3cl"></i><span>SCSS</span><div class="collapse show" id="collapse-g6eydhmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">git<span class="hljs-keyword">@gitlab</span>.<span class="hljs-attribute">com</span>: Permission denied (publickey).<br><span class="hljs-attribute">fatal</span>: Could <span class="hljs-keyword">not</span> read from remote repository.<br></code></pre></td></tr></table></div></figure><h4 id="错误原因-2"><a href="#错误原因-2" class="headerlink" title="错误原因"></a>错误原因</h4><p>SSH 公钥认证失败，可能的原因包括：</p><ul><li><p>您的 SSH 密钥没有配置到 GitLab。</p></li><li><p>您的 <code>~/.ssh/config</code> 文件没有正确指定密钥。</p></li><li><p>使用了错误的 SSH 地址。</p></li></ul><h4 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="1-测试-SSH-连接"><a href="#1-测试-SSH-连接" class="headerlink" title="(1) 测试 SSH 连接"></a>(1) 测试 SSH 连接</h5><p>运行以下命令测试 SSH 是否正常：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pduojmmfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-pduojmmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><ul><li><p>如果返回 <code>Permission denied (publickey)</code>，说明认证失败。</p></li><li><p>如果返回 <code>Welcome to GitLab, &lt;YourUsername&gt;</code>，说明连接正常。</p></li></ul><h5 id="2-确保-SSH-公钥已上传到-GitLab"><a href="#2-确保-SSH-公钥已上传到-GitLab" class="headerlink" title="(2) 确保 SSH 公钥已上传到 GitLab"></a>(2) 确保 SSH 公钥已上传到 GitLab</h5><p>在 GitLab 的 <strong>Settings &gt; SSH Keys</strong>  中，确认公钥已添加。(3) 配置 <code>~/.ssh/config</code>如果您使用了多个 SSH 密钥，可以为 GitLab 指定特定的密钥。在 <code>~/.ssh/config</code> 文件中添加以下内容：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nqnccmmfcwb3cl"></i><span>CRMSH</span><div class="collapse show" id="collapse-nqnccmmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host gitlab.com<br>  HostName gitlab.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa  <span class="hljs-comment"># 替换为您的私钥路径</span><br></code></pre></td></tr></table></div></figure><p>然后重新测试连接。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><ol start="2"><li>关于 <code>git remote add origin</code>**<br>出现的错误：</li></ol><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-n7v15bmfcwb3cl"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-n7v15bmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>remote origin already exists.<br></code></pre></td></tr></table></div></figure><h4 id="错误原因-3"><a href="#错误原因-3" class="headerlink" title="错误原因"></a>错误原因</h4><p>说明您已经为该仓库添加了一个名为 <code>origin</code> 的远程地址。</p><h4 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h4><p>您可以查看当前的远程地址：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dhyfeemfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-dhyfeemfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>如果地址不对，可以修改或删除远程地址：</p><ul><li>修改远程地址：</li></ul><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t3ecgamfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-t3ecgamfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><ul><li>删除并重新添加远程地址：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-np6lyumfcwb3cl"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-np6lyumfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">remove</span> origin<br>git remote <span class="hljs-built_in">add</span> origin git@lab6435.gitlab.com:libao21/zipbefe.git<br></code></pre></td></tr></table></div></figure><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><p>**<br>从您提供的操作日志看，有以下几点需要调整或检查。问题涉及多个方面，我们逐一分析并提供解决方案。</p><hr><ol><li>关于 <code>git config</code>** <strong>命令执行没有问题</strong> ，但这仅设置了用户名和邮箱，与仓库的实际操作没有直接关联。日志显示，您已经在 Git 仓库中（提示行末有 <code>(master)</code>），因此这步设置是正确的。</li></ol><hr><ol start="2"><li>关于 <code>git remote add origin</code>**<br>出现的错误：</li></ol><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-v0gjwnmfcwb3cl"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-v0gjwnmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>remote origin already exists.<br></code></pre></td></tr></table></div></figure><h4 id="错误原因-4"><a href="#错误原因-4" class="headerlink" title="错误原因"></a>错误原因</h4><p>说明您已经为该仓库添加了一个名为 <code>origin</code> 的远程地址。</p><h4 id="解决方法-5"><a href="#解决方法-5" class="headerlink" title="解决方法"></a>解决方法</h4><p>您可以查看当前的远程地址：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g8fyi4mfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-g8fyi4mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>如果地址不对，可以修改或删除远程地址：</p><ul><li>修改远程地址：</li></ul><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6knntvmfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-6knntvmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><ul><li>删除并重新添加远程地址：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vnppp7mfcwb3cl"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-vnppp7mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">remove</span> origin<br>git remote <span class="hljs-built_in">add</span> origin git@lab6435.gitlab.com:libao21/zipbefe.git<br></code></pre></td></tr></table></div></figure><hr><ol start="3"><li>关于 <code>git fetch --all --force</code>**<br>出现的错误：</li></ol><figure class="highlight scss"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-913fwwmfcwb3cl"></i><span>SCSS</span><div class="collapse show" id="collapse-913fwwmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">git<span class="hljs-keyword">@gitlab</span>.<span class="hljs-attribute">com</span>: Permission denied (publickey).<br><span class="hljs-attribute">fatal</span>: Could <span class="hljs-keyword">not</span> read from remote repository.<br></code></pre></td></tr></table></div></figure><h4 id="错误原因-5"><a href="#错误原因-5" class="headerlink" title="错误原因"></a>错误原因</h4><p>SSH 公钥认证失败，可能的原因包括：</p><ul><li><p>您的 SSH 密钥没有配置到 GitLab。</p></li><li><p>您的 <code>~/.ssh/config</code> 文件没有正确指定密钥。</p></li><li><p>使用了错误的 SSH 地址。</p></li></ul><h4 id="解决方法-6"><a href="#解决方法-6" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="1-测试-SSH-连接-1"><a href="#1-测试-SSH-连接-1" class="headerlink" title="(1) 测试 SSH 连接"></a>(1) 测试 SSH 连接</h5><p>运行以下命令测试 SSH 是否正常：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0zk5b3mfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-0zk5b3mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><ul><li><p>如果返回 <code>Permission denied (publickey)</code>，说明认证失败。</p></li><li><p>如果返回 <code>Welcome to GitLab, &lt;YourUsername&gt;</code>，说明连接正常。</p></li></ul><h5 id="2-确保-SSH-公钥已上传到-GitLab-1"><a href="#2-确保-SSH-公钥已上传到-GitLab-1" class="headerlink" title="(2) 确保 SSH 公钥已上传到 GitLab"></a>(2) 确保 SSH 公钥已上传到 GitLab</h5><p>在 GitLab 的 <strong>Settings &gt; SSH Keys</strong>  中，确认公钥已添加。(3) 配置 <code>~/.ssh/config</code>如果您使用了多个 SSH 密钥，可以为 GitLab 指定特定的密钥。在 <code>~/.ssh/config</code> 文件中添加以下内容：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-njtqgsmfcwb3cl"></i><span>CRMSH</span><div class="collapse show" id="collapse-njtqgsmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host gitlab.com<br>  HostName gitlab.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa  <span class="hljs-comment"># 替换为您的私钥路径</span><br></code></pre></td></tr></table></div></figure><p>然后重新测试连接。</p><hr><ol start="4"><li>关于 <code>git checkout main</code>**<br>出现的错误：</li></ol><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1jjyjemfcwb3cl"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-1jjyjemfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>pathspec &#x27;main&#x27; did not match any file(s) known to git<br></code></pre></td></tr></table></div></figure><h4 id="错误原因-6"><a href="#错误原因-6" class="headerlink" title="错误原因"></a>错误原因</h4><p>本地分支可能仍然是 <code>master</code>，而不是 <code>main</code>。</p><h4 id="解决方法-7"><a href="#解决方法-7" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="1-查看分支列表"><a href="#1-查看分支列表" class="headerlink" title="(1) 查看分支列表"></a>(1) 查看分支列表</h5><p>运行以下命令查看本地分支：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-s9g4wumfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-s9g4wumfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></div></figure><p>如果本地分支为 <code>master</code>，可以将其重命名为 <code>main</code>：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7yh2ccmfcwb3cl"></i><span>CRMSH</span><div class="collapse show" id="collapse-7yh2ccmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git branch -m <span class="hljs-keyword">master</span> <span class="hljs-title">main</span><br></code></pre></td></tr></table></div></figure><h5 id="2-更新远程分支的默认名称"><a href="#2-更新远程分支的默认名称" class="headerlink" title="(2) 更新远程分支的默认名称"></a>(2) 更新远程分支的默认名称</h5><p>确保远程仓库的默认分支名称也为 <code>main</code>，您可以运行以下命令查看远程分支：</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bs1qrrmfcwb3cl"></i><span>ADA</span><div class="collapse show" id="collapse-bs1qrrmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git ls-remote <span class="hljs-comment">--heads origin</span><br></code></pre></td></tr></table></div></figure><p>如果远程分支确实为 <code>main</code>，需要将本地分支与远程分支关联：</p><figure class="highlight delphi"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7aou90mfcwb3cl"></i><span>DELPHI</span><div class="collapse show" id="collapse-7aou90mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">git branch --<span class="hljs-keyword">set</span>-upstream-<span class="hljs-keyword">to</span>=origin/main main<br></code></pre></td></tr></table></div></figure><hr><p><strong>总结您的操作改进顺序</strong><br>按照以下步骤逐步排查和解决：</p><ol><li>检查远程地址是否正确：</li></ol><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tsj63amfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-tsj63amfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> -<span class="hljs-string">v</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>测试 SSH 连接并修复 SSH 配置（如有问题）。</li></ol><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-87046omfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-87046omfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><ol start="3"><li>确保本地分支与远程分支一致：</li></ol><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-st3h6kmfcwb3cl"></i><span>CRMSH</span><div class="collapse show" id="collapse-st3h6kmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git branch -m <span class="hljs-keyword">master</span> <span class="hljs-title">main</span><br>git branch --<span class="hljs-attr">set-upstream-to=</span>origin/main main<br></code></pre></td></tr></table></div></figure><ol start="4"><li>重新同步代码：</li></ol><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7654ormfcwb3cl"></i><span>ARCADE</span><div class="collapse show" id="collapse-7654ormfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git fetch --<span class="hljs-built_in">all</span><br>git <span class="hljs-built_in">push</span> origin main<br></code></pre></td></tr></table></div></figure><p>如有进一步问题，请提供更多错误信息，我可以帮您继续分析！</p><details>  <summary>我的问题太垃圾不要看</summary><p>Administrator@LIBAO MINGW64 &#x2F;g&#x2F;bk&#x2F;gitlab拍照备份仓库 (master)<br>$ ssh -T <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x6c;&#97;&#x62;&#x2e;&#99;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x6c;&#97;&#x62;&#x2e;&#99;&#x6f;&#109;</a><br><a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x6c;&#97;&#98;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#x6c;&#97;&#98;&#46;&#x63;&#x6f;&#109;</a>: Permission denied (publickey).</p><p>Admin</p></details><hr><h3 id="AI第回答：-3"><a href="#AI第回答：-3" class="headerlink" title="AI第回答："></a>AI第回答：</h3><hr><p>从日志可以确认，您的 SSH 公钥未成功用于连接 GitLab。这是导致推送或拉取失败的根本原因。以下是详细的排查与解决步骤：</p><hr><p><strong>1. 检查本地 SSH 密钥是否存在</strong><br>运行以下命令，查看是否有 SSH 密钥文件：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4gvmqjmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-4gvmqjmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh<br></code></pre></td></tr></table></div></figure><p>如果没有看到类似 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 的文件，说明您需要生成 SSH 密钥。</p><h4 id="如果没有-SSH-密钥："><a href="#如果没有-SSH-密钥：" class="headerlink" title="如果没有 SSH 密钥："></a>如果没有 SSH 密钥：</h4><p>生成一个新的 SSH 密钥对：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rgw6a3mfcwb3cl"></i><span>APACHE</span><div class="collapse show" id="collapse-rgw6a3mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></div></figure><p>按提示操作，默认保存路径为 <code>~/.ssh/id_rsa</code>，生成成功后会自动创建 <code>id_rsa.pub</code> 文件。</p><hr><p><strong>2. 将 SSH 公钥添加到 GitLab</strong><br>运行以下命令显示公钥内容：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gexn47mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-gexn47mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></div></figure><p>复制输出的内容并登录 GitLab，按照以下步骤添加公钥：</p><ol><li><p>点击头像 &gt; <strong>Settings</strong>  &gt; <strong>SSH Keys</strong> 。</p></li><li><p>将公钥粘贴到文本框中，设置有效期（或留空）。</p></li><li><p>点击 <strong>Add key</strong> 。</p></li></ol><hr><p>**<br>从日志可以确认，您的 SSH 公钥未成功用于连接 GitLab。这是导致推送或拉取失败的根本原因。以下是详细的排查与解决步骤：</p><hr><p><strong>1. 检查本地 SSH 密钥是否存在</strong><br>运行以下命令，查看是否有 SSH 密钥文件：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zkisfmmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-zkisfmmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh<br></code></pre></td></tr></table></div></figure><p>如果没有看到类似 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 的文件，说明您需要生成 SSH 密钥。</p><h4 id="如果没有-SSH-密钥：-1"><a href="#如果没有-SSH-密钥：-1" class="headerlink" title="如果没有 SSH 密钥："></a>如果没有 SSH 密钥：</h4><p>生成一个新的 SSH 密钥对：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ivdqvqmfcwb3cl"></i><span>APACHE</span><div class="collapse show" id="collapse-ivdqvqmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></div></figure><p>按提示操作，默认保存路径为 <code>~/.ssh/id_rsa</code>，生成成功后会自动创建 <code>id_rsa.pub</code> 文件。</p><hr><p><strong>2. 将 SSH 公钥添加到 GitLab</strong><br>运行以下命令显示公钥内容：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0jit95mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-0jit95mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></div></figure><p>复制输出的内容并登录 GitLab，按照以下步骤添加公钥：</p><ol><li><p>点击头像 &gt; <strong>Settings</strong>  &gt; <strong>SSH Keys</strong> 。</p></li><li><p>将公钥粘贴到文本框中，设置有效期（或留空）。</p></li><li><p>点击 <strong>Add key</strong> 。</p></li></ol><hr><ol start="3"><li>配置 SSH <code>config</code> 文件（如果需要）** 如果您使用了多个 SSH 密钥，可以在 <code>~/.ssh/config</code> 文件中明确指定 GitLab 使用的密钥：</li></ol><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tcoa1cmfcwb3cl"></i><span>CRMSH</span><div class="collapse show" id="collapse-tcoa1cmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host gitlab.com<br>  HostName gitlab.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa  <span class="hljs-comment"># 替换为正确的私钥路径</span><br></code></pre></td></tr></table></div></figure><p>保存后，运行以下命令测试连接：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i1w8mwmfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-i1w8mwmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><p>如果配置正确，您应该看到类似以下的消息：</p><figure class="highlight pf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-s53168mfcwb3cl"></i><span>PF</span><div class="collapse show" id="collapse-s53168mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">Welcome <span class="hljs-keyword">to</span> GitLab, <span class="hljs-variable">&lt;YourUsername&gt;</span>!<br></code></pre></td></tr></table></div></figure><hr><p><strong>4. 检查 Git 配置中的远程地址</strong><br>确保您的远程仓库地址是 SSH 格式（不是 HTTPS）。运行以下命令查看：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-aevzzjmfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-aevzzjmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>如果显示的地址是 HTTPS，比如：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l7v7s6mfcwb3cl"></i><span>AWK</span><div class="collapse show" id="collapse-l7v7s6mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tlab.com<span class="hljs-regexp">/username/</span>repo.git<br></code></pre></td></tr></table></div></figure><p>需要修改为 SSH 格式：</p><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cv37m7mfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-cv37m7mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:username/</span><span class="hljs-string">repo</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>5. 重新尝试推送或拉取</strong><br>配置完成后，重新运行以下命令测试操作：</p><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3lq56umfcwb3cl"></i><span>ARCADE</span><div class="collapse show" id="collapse-3lq56umfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git fetch --<span class="hljs-built_in">all</span><br>git <span class="hljs-built_in">push</span> origin main<br></code></pre></td></tr></table></div></figure><hr><p><strong>排查结果验证</strong>  </p><ol><li>如果仍然提示 <code>Permission denied (publickey)</code>，说明：</li></ol><ul><li><p>公钥未正确添加到 GitLab。</p></li><li><p><code>~/.ssh/config</code> 文件配置错误。</p></li><li><p>使用的 SSH 密钥路径错误。</p></li></ul><ol start="2"><li>如果问题解决，您应该可以正常访问仓库。<br>请按以上步骤操作，完成后再次运行 <code>ssh -T git@gitlab.com</code> 验证连接。如有任何进一步问题，请随时告诉我！</li></ol><details>  <summary>我的问题太垃圾不要看</summary><p>我的密钥在这C:\Users\Administrator.ssh\id_rsa_lab6435.pub。我也填到网上SSH里面了,配置文件里也这样写了# GitHub 帐号 one<br>Host lb.github.com<br>    HostName github.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa<br>    User git  # 统一改成 git</p><h1 id="GitHub-帐号-two"><a href="#GitHub-帐号-two" class="headerlink" title="GitHub 帐号 two"></a>GitHub 帐号 two</h1><p>Host zy.github.com<br>    HostName github.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_zy<br>    User git  # 统一改成 git</p><h1 id="GitLab-帐号-lab6435"><a href="#GitLab-帐号-lab6435" class="headerlink" title="GitLab 帐号 lab6435"></a>GitLab 帐号 lab6435</h1><p>Host lab6435.gitlab.com<br>    HostName gitlab.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_lab6435<br>    User git  # 统一改成 git</p><h1 id="GitLab-谷歌帐号-gg"><a href="#GitLab-谷歌帐号-gg" class="headerlink" title="GitLab 谷歌帐号 gg"></a>GitLab 谷歌帐号 gg</h1><p>Host gg.gitlab.com<br>    HostName gitlab.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_gg<br>    User git  # 统一改成 git</p></details><hr><h3 id="AI第回答：-4"><a href="#AI第回答：-4" class="headerlink" title="AI第回答："></a>AI第回答：</h3><hr><p>从您提供的信息看，您已经正确设置了 SSH 密钥和配置文件，且密钥文件位于 <code>C:\Users\Administrator\.ssh\id_rsa_lab6435</code>。但仍然无法连接 <code>lab6435.gitlab.com</code>，可能的原因包括以下几点：</p><hr><p><strong>排查步骤</strong> </p><h4 id="1-确认-SSH-配置文件的路径和格式"><a href="#1-确认-SSH-配置文件的路径和格式" class="headerlink" title="1. 确认 SSH 配置文件的路径和格式"></a>1. 确认 SSH 配置文件的路径和格式</h4><p>确保 SSH 客户端能够找到正确的 <code>config</code> 文件： </p><ul><li><p>配置文件路径应为 <code>C:\Users\Administrator\.ssh\config</code>。</p></li><li><p>确认文件格式无误，确保每个 <code>Host</code> 块的缩进一致，无多余的空格。</p></li></ul><p>您可以通过以下命令检查是否正确加载配置文件：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-r6q950mfcwb3cl"></i><span>NGINX</span><div class="collapse show" id="collapse-r6q950mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -vT lab6435.gitlab.com<br></code></pre></td></tr></table></div></figure><p><strong>输出重点分析：</strong>  </p><ul><li><p>如果提示 <code>debug1: identity file C:/Users/Administrator/.ssh/id_rsa_lab6435 type 0</code>，说明密钥加载成功。</p></li><li><p>如果提示 <code>debug1: No such file or directory</code>，说明路径配置错误，需要确保 <code>IdentityFile</code> 使用的是 <strong>绝对路径</strong> 。</p></li></ul><h4 id="修改配置文件（如果路径存在问题）："><a href="#修改配置文件（如果路径存在问题）：" class="headerlink" title="修改配置文件（如果路径存在问题）："></a>修改配置文件（如果路径存在问题）：</h4><p>将 <code>IdentityFile</code> 设置为绝对路径：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6o25ammfcwb3cl"></i><span>AWK</span><div class="collapse show" id="collapse-6o25ammfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">IdentityFile C:<span class="hljs-regexp">/Users/</span>Administrator<span class="hljs-regexp">/.ssh/i</span>d_rsa_lab6435<br></code></pre></td></tr></table></div></figure><hr><h4 id="2-验证密钥权限"><a href="#2-验证密钥权限" class="headerlink" title="2. 验证密钥权限"></a>2. 验证密钥权限</h4><p>SSH 要求私钥文件权限严格。确保 <code>id_rsa_lab6435</code> 文件权限正确： </p><ol><li><p>找到 <code>C:\Users\Administrator\.ssh\id_rsa_lab6435</code>。</p></li><li><p>右键文件 &gt; 属性 &gt; <strong>安全</strong> 。</p></li><li><p>确保只有当前用户（<code>Administrator</code>）有读写权限，删除其他用户或组的权限。</p></li></ol><hr><h4 id="3-检查公钥是否正确添加到-GitLab"><a href="#3-检查公钥是否正确添加到-GitLab" class="headerlink" title="3. 检查公钥是否正确添加到 GitLab"></a>3. 检查公钥是否正确添加到 GitLab</h4><p>在 GitLab 网站中：</p><ol><li><p><strong>登录 GitLab</strong>  &gt; 点击头像 &gt; <strong>Settings</strong>  &gt; <strong>SSH Keys</strong> 。</p></li><li><p>确认您上传的公钥内容正确，对应的是 <code>id_rsa_lab6435.pub</code> 文件。</p></li><li><p>确保没有多余的空格或换行。</p></li></ol><hr><h4 id="4-测试-SSH-连接"><a href="#4-测试-SSH-连接" class="headerlink" title="4. 测试 SSH 连接"></a>4. 测试 SSH 连接</h4><p>运行以下命令测试连接：</p><figure class="highlight excel"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ivowltmfcwb3cl"></i><span>EXCEL</span><div class="collapse show" id="collapse-ivowltmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh -<span class="hljs-built_in">T</span> lab6435.gitlab.com<br></code></pre></td></tr></table></div></figure><p><strong>预期结果：</strong>  </p><ul><li>成功时，返回类似：</li></ul><figure class="highlight pf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-91p2v1mfcwb3cl"></i><span>PF</span><div class="collapse show" id="collapse-91p2v1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">Welcome <span class="hljs-keyword">to</span> GitLab, <span class="hljs-variable">&lt;YourUsername&gt;</span>!<br></code></pre></td></tr></table></div></figure><ul><li>失败时，根据报错信息进一步分析。</li></ul><hr><h4 id="5-确认远程仓库地址"><a href="#5-确认远程仓库地址" class="headerlink" title="5. 确认远程仓库地址"></a>5. 确认远程仓库地址</h4><p>如果 SSH 配置和连接正常，但仍无法操作远程仓库，检查远程仓库地址：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zikw6lmfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-zikw6lmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>如果地址不符合 SSH 格式（如 HTTPS 地址），修改为 SSH 地址：</p><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xcwwo9mfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-xcwwo9mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>总结操作顺序</strong>  </p><ol><li><p>检查 SSH 配置文件路径和内容，必要时将 <code>IdentityFile</code> 设置为绝对路径。</p></li><li><p>验证私钥文件权限，确保仅当前用户可访问。</p></li><li><p>确认公钥是否正确添加到 GitLab。</p></li><li><p>测试 SSH 连接：<code>ssh -T lab6435.gitlab.com</code>。</p></li><li><p>确保远程仓库地址是 SSH 格式，且指向正确的项目。<br>按以上步骤操作后，如果仍然有问题，可以提供 <code>ssh -vT lab6435.gitlab.com</code> 的详细输出，我可以进一步帮您分析！</p></li></ol><details>  <summary>我的问题太垃圾不要看</summary><p>Administrator@LIBAO MINGW64 &#x2F;g&#x2F;bk&#x2F;gitlab拍照备份仓库 (master)<br>$<br>ssh -vT lab6435.gitlab.com<br>OpenSSH_9.5p1, OpenSSL 3.1.4 24 Oct 2023<br>debug1: Reading configuration data &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;config<br>debug1: &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;config line 16: Applying options for lab6435.gitlab.com<br>debug1: Reading configuration data &#x2F;etc&#x2F;ssh&#x2F;ssh_config<br>debug1: Connecting to gitlab.com [172.65.251.78] port 22.<br>debug1: Connection established.<br>debug1: identity file &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa_lab6435 type 0<br>debug1: identity file &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa_lab6435-cert type -1<br>debug1: Local version string SSH-2.0-OpenSSH_9.5<br>debug1: Remote protocol version 2.0, remote software version GitLab-SSHD<br>debug1: compat_banner: no match: GitLab-SSHD<br>debug1: Authenticating to gitlab.com:22 as ‘git’<br>debug1: load_hostkeys: fopen &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;known_hosts2: No such file or directory<br>debug1: load_hostkeys: fopen &#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts: No such file or directory<br>debug1: load_hostkeys: fopen &#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts2: No such file or directory<br>debug1: SSH2_MSG_KEXINIT sent<br>debug1: SSH2_MSG_KEXINIT received<br>debug1: kex: algorithm: curve25519-sha256<br>debug1: kex: host key algorithm: ssh-ed25519<br>debug1: kex: server-&gt;client cipher: <a href="mailto:&#x63;&#104;&#97;&#x63;&#x68;&#x61;&#50;&#x30;&#45;&#x70;&#111;&#x6c;&#x79;&#x31;&#51;&#x30;&#x35;&#x40;&#111;&#x70;&#101;&#110;&#115;&#x73;&#x68;&#46;&#x63;&#111;&#109;">&#x63;&#104;&#97;&#x63;&#x68;&#x61;&#50;&#x30;&#45;&#x70;&#111;&#x6c;&#x79;&#x31;&#51;&#x30;&#x35;&#x40;&#111;&#x70;&#101;&#110;&#115;&#x73;&#x68;&#46;&#x63;&#111;&#109;</a> MAC: <implicit> compression: none<br>debug1: kex: client-&gt;server cipher: <a href="mailto:&#x63;&#104;&#x61;&#99;&#x68;&#97;&#50;&#x30;&#x2d;&#112;&#111;&#x6c;&#121;&#x31;&#x33;&#x30;&#x35;&#64;&#111;&#112;&#x65;&#110;&#115;&#x73;&#x68;&#46;&#99;&#x6f;&#x6d;">&#x63;&#104;&#x61;&#99;&#x68;&#97;&#50;&#x30;&#x2d;&#112;&#111;&#x6c;&#121;&#x31;&#x33;&#x30;&#x35;&#64;&#111;&#112;&#x65;&#110;&#115;&#x73;&#x68;&#46;&#99;&#x6f;&#x6d;</a> MAC: <implicit> compression: none<br>debug1: expecting SSH2_MSG_KEX_ECDH_REPLY<br>debug1: SSH2_MSG_KEX_ECDH_REPLY received<br>debug1: Server host key: ssh-ed25519 SHA256:eUXGGm1YGsMAS7vkcx6JOJdOGHPem5gQp4taiCfCLB8<br>debug1: load_hostkeys: fopen &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;known_hosts2: No such file or directory<br>debug1: load_hostkeys: fopen &#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts: No such file or directory<br>debug1: load_hostkeys: fopen &#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts2: No such file or directory<br>debug1: Host ‘gitlab.com’ is known and matches the ED25519 host key.<br>debug1: Found key in &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;known_hosts:1<br>debug1: rekey out after 134217728 blocks<br>debug1: SSH2_MSG_NEWKEYS sent<br>debug1: expecting SSH2_MSG_NEWKEYS<br>debug1: SSH2_MSG_NEWKEYS received<br>debug1: rekey in after 134217728 blocks<br>debug1: Will attempt key: &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa_lab6435 RSA SHA256:sVD+wAFCKI4ILse8urYx4gmff05W8GsfNwXSjVPl7I0 explicit<br>debug1: SSH2_MSG_EXT_INFO received<br>debug1: kex_input_ext_info: server-sig-algs&#x3D;&lt;ssh-ed25519,<a href="mailto:&#x73;&#107;&#x2d;&#x73;&#115;&#x68;&#45;&#101;&#100;&#x32;&#53;&#53;&#x31;&#57;&#x40;&#111;&#x70;&#x65;&#x6e;&#115;&#x73;&#x68;&#46;&#99;&#111;&#109;">&#x73;&#107;&#x2d;&#x73;&#115;&#x68;&#45;&#101;&#100;&#x32;&#53;&#53;&#x31;&#57;&#x40;&#111;&#x70;&#x65;&#x6e;&#115;&#x73;&#x68;&#46;&#99;&#111;&#109;</a>,<a href="mailto:&#115;&#x6b;&#x2d;&#101;&#x63;&#100;&#115;&#x61;&#x2d;&#115;&#x68;&#97;&#50;&#x2d;&#x6e;&#105;&#x73;&#116;&#x70;&#50;&#53;&#54;&#x40;&#111;&#x70;&#x65;&#110;&#115;&#x73;&#x68;&#46;&#99;&#x6f;&#x6d;">&#115;&#x6b;&#x2d;&#101;&#x63;&#100;&#115;&#x61;&#x2d;&#115;&#x68;&#97;&#50;&#x2d;&#x6e;&#105;&#x73;&#116;&#x70;&#50;&#53;&#54;&#x40;&#111;&#x70;&#x65;&#110;&#115;&#x73;&#x68;&#46;&#99;&#x6f;&#x6d;</a>,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,rsa-sha2-256,rsa-sha2-512,ssh-rsa,ssh-dss&gt;<br>debug1: kex_ext_info_check_ver: <a href="mailto:&#112;&#x69;&#110;&#x67;&#64;&#x6f;&#112;&#x65;&#110;&#115;&#x73;&#104;&#x2e;&#x63;&#x6f;&#109;">&#112;&#x69;&#110;&#x67;&#64;&#x6f;&#112;&#x65;&#110;&#115;&#x73;&#104;&#x2e;&#x63;&#x6f;&#109;</a>&#x3D;&lt;0&gt;<br>debug1: SSH2_MSG_SERVICE_ACCEPT received<br>debug1: Authentications that can continue: publickey<br>debug1: Next authentication method: publickey<br>debug1: Offering public key: &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa_lab6435 RSA SHA256:sVD+wAFCKI4ILse8urYx4gmff05W8GsfNwXSjVPl7I0 explicit<br>debug1: Server accepts key: &#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;.ssh&#x2F;id_rsa_lab6435 RSA SHA256:sVD+wAFCKI4ILse8urYx4gmff05W8GsfNwXSjVPl7I0 explicit<br>Authenticated to gitlab.com ([172.65.251.78]:22) using “publickey”.<br>debug1: channel 0: new session [client-session] (inactive timeout: 0)<br>debug1: Entering interactive session.<br>debug1: pledge: filesystem<br>debug1: client_input_channel_req: channel 0 rtype exit-status reply 0<br>Welcome to GitLab, @libao2!<br>debug1: channel 0: free: client-session, nchannels 1<br>Transferred: sent 3512, received 2020 bytes, in 1.5 seconds<br>Bytes per second: sent 2326.5, received 1338.1<br>debug1: Exit status 0</p></details><hr><h3 id="AI第回答：-5"><a href="#AI第回答：-5" class="headerlink" title="AI第回答："></a>AI第回答：</h3><hr><p>从日志来看，您的 SSH 连接测试是 <strong>成功的</strong> ，关键点如下： </p><ol><li><strong>成功验证公钥：</strong></li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vxuxrsmfcwb3cl"></i><span>AWK</span><div class="collapse show" id="collapse-vxuxrsmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Server accepts key: <span class="hljs-regexp">/c/</span>Users<span class="hljs-regexp">/Administrator/</span>.ssh/id_rsa_lab6435<br></code></pre></td></tr></table></div></figure><p>说明 GitLab 已正确识别并接受了您配置的 SSH 密钥。</p><ol start="2"><li><strong>认证成功：</strong></li></ol><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-aklplbmfcwb3cl"></i><span>APACHE</span><div class="collapse show" id="collapse-aklplbmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Authenticated</span> to gitlab.com ([<span class="hljs-number">172.65.251.78</span>]:<span class="hljs-number">22</span>) using <span class="hljs-string">&quot;publickey&quot;</span>.<br></code></pre></td></tr></table></div></figure><p>这表明您的 SSH 密钥配置没有问题，已经成功连接到 GitLab。</p><ol start="3"><li><strong>返回欢迎信息：</strong></li></ol><figure class="highlight autoit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-11xosemfcwb3cl"></i><span>AUTOIT</span><div class="collapse show" id="collapse-11xosemfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">Welcome <span class="hljs-keyword">to</span> GitLab, <span class="hljs-symbol">@libao2</span>!<br></code></pre></td></tr></table></div></figure><p>GitLab 成功响应并确认身份。</p><hr><h3 id="当前问题分析"><a href="#当前问题分析" class="headerlink" title="当前问题分析"></a>当前问题分析</h3><p>您的 SSH 连接没有问题，但您在推送代码时仍然遇到问题，可能是以下原因：</p><ol><li><strong>本地分支和远程分支名称不一致</strong> 从之前的信息来看，您的本地分支是 <code>master</code>，而 GitLab 的默认分支通常是 <code>main</code>。尝试以下步骤解决分支问题：</li></ol><figure class="highlight mipsasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4kkj1imfcwb3cl"></i><span>MIPSASM</span><div class="collapse show" id="collapse-4kkj1imfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>-M main  <span class="hljs-comment"># 将本地分支重命名为 main</span><br>git push -u <span class="hljs-keyword">origin </span>main  <span class="hljs-comment"># 推送到远程仓库并设置跟踪</span><br></code></pre></td></tr></table></div></figure><hr><ol start="2"><li><strong>远程地址配置错误</strong><br>虽然您的远程地址已经是 SSH 格式，但您可能误操作过，建议检查并重新设置：</li></ol><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0ua8w7mfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-0ua8w7mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><p>之后，验证远程地址：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-f1z834mfcwb3cl"></i><span>EBNF</span><div class="collapse show" id="collapse-f1z834mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>确保输出如下：</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ipdpommfcwb3cl"></i><span>STYLUS</span><div class="collapse show" id="collapse-ipdpommfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">origin  git@lab6435<span class="hljs-selector-class">.gitlab</span><span class="hljs-selector-class">.com</span>:libao21/zipbefe<span class="hljs-selector-class">.git</span> (fetch)<br>origin  git@lab6435<span class="hljs-selector-class">.gitlab</span><span class="hljs-selector-class">.com</span>:libao21/zipbefe<span class="hljs-selector-class">.git</span> (push)<br></code></pre></td></tr></table></div></figure><hr><ol start="3"><li><strong>推送操作冲突</strong><br>如果远程仓库已有内容（如 README.md 或其他文件），而您的本地仓库是独立初始化的，可能会出现冲突。解决方法：</li></ol><figure class="highlight mipsasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hzjk8vmfcwb3cl"></i><span>MIPSASM</span><div class="collapse show" id="collapse-hzjk8vmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git pull <span class="hljs-keyword">origin </span>main --rebase  <span class="hljs-comment"># 同步远程分支内容到本地</span><br>git push <span class="hljs-keyword">origin </span>main           <span class="hljs-comment"># 再次推送代码</span><br></code></pre></td></tr></table></div></figure><hr><ol start="4"><li><strong>权限问题或缓存错误</strong><br>即使 SSH 配置正常，有时会因缓存导致问题。清除 SSH 缓存后重试：</li></ol><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-y2vek6mfcwb3cl"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-y2vek6mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">ssh-<span class="hljs-keyword">add</span><span class="language-bash"> -D  <span class="hljs-comment"># 删除当前已加载的所有 SSH 密钥</span></span><br>ssh-<span class="hljs-keyword">add</span><span class="language-bash"> ~/.ssh/id_rsa_lab6435  <span class="hljs-comment"># 重新加载指定的 SSH 密钥</span></span><br></code></pre></td></tr></table></div></figure><p>验证密钥加载是否正确：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-281li6mfcwb3cl"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-281li6mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ssh-<span class="hljs-built_in">add</span> -l<br></code></pre></td></tr></table></div></figure><p>应该显示类似以下内容：</p><figure class="highlight basic"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-uf1avimfcwb3cl"></i><span>BASIC</span><div class="collapse show" id="collapse-uf1avimfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2048 </span>SHA256:sVD+wAFCKI4ILse8urYx4gmff05W8GsfNwXSjVPl7I0 /c/Users/Administrator/.ssh/id_rsa_lab6435 (RSA)<br></code></pre></td></tr></table></div></figure><hr><h3 id="总结解决方案"><a href="#总结解决方案" class="headerlink" title="总结解决方案"></a>总结解决方案</h3><p>按以下顺序操作，逐步排查问题：</p><ol><li><strong>确保本地分支与远程分支名称一致：</strong></li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-r4ij0mmfcwb3cl"></i><span>CSS</span><div class="collapse show" id="collapse-r4ij0mmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -M <span class="hljs-selector-tag">main</span><br>git push -u origin <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>检查并重设远程地址：</strong></li></ol><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-f6rt4gmfcwb3cl"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-f6rt4gmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">lab6435</span>.<span class="hljs-string">gitlab</span>.<span class="hljs-string">com:libao21/</span><span class="hljs-string">zipbefe</span>.<span class="hljs-string">git</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>同步远程仓库内容：</strong></li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5yq1rtmfcwb3cl"></i><span>CSS</span><div class="collapse show" id="collapse-5yq1rtmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git pull origin <span class="hljs-selector-tag">main</span> <span class="hljs-attr">--rebase</span><br>git push origin <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li><strong>清除并重新加载 SSH 密钥：</strong></li></ol><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-31pvn7mfcwb3cl"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-31pvn7mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ssh-<span class="hljs-built_in">add</span> -D<br>ssh-<span class="hljs-built_in">add</span> ~/.ssh/id_rsa_lab6435<br>ssh-<span class="hljs-built_in">add</span> -l<br></code></pre></td></tr></table></div></figure><p>完成以上步骤后再尝试推送代码，如果仍有问题，请提供完整的错误信息，我可以进一步帮助！</p>]]></content>
    
    
    <categories>
      
      <category>GPT问答类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>git仓库</tag>
      
      <tag>git命令</tag>
      
      <tag>GPT学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑本地新建一个仓库到摄推送成功</title>
    <link href="/2024/11/21/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%94%B5%E8%84%91%E6%9C%AC%E5%9C%B0%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%88%B0%E6%91%84%E6%8E%A8%E9%80%81%E6%88%90%E5%8A%9F/"/>
    <url>/2024/11/21/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%94%B5%E8%84%91%E6%9C%AC%E5%9C%B0%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E5%88%B0%E6%91%84%E6%8E%A8%E9%80%81%E6%88%90%E5%8A%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="电脑本地新建一个仓库到摄推送成功"><a href="#电脑本地新建一个仓库到摄推送成功" class="headerlink" title="电脑本地新建一个仓库到摄推送成功"></a>电脑本地新建一个仓库到摄推送成功</h3><hr><p>以下是一个详细的 Git 教程，适用于在一台电脑绑定多个 Git 仓库的情况，涵盖从 <code>git init</code> 到推送代码的完整流程，带示例和错误排查提示。</p><hr><p><strong>1. 初始化本地仓库</strong> </p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>进入你的项目目录：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3nda8cmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-3nda8cmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /path/to/your/project<br></code></pre></td></tr></table></div></figure><ol start="2"><li>初始化 Git 仓库：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6om7yzmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-6om7yzmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></div></figure><ol start="3"><li>添加项目文件并提交：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7wiuwomfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-7wiuwomfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;Initial commit&quot;</span><br></code></pre></td></tr></table></div></figure><hr><p><strong>2. 配置 SSH 多账户支持</strong> 在 <code>.ssh</code> 目录中为每个账户生成不同的密钥对（如果尚未生成）</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sx00fhmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-sx00fhmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></div></figure><p>为每个账户指定文件名，例如：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-llhu66mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-llhu66mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/.ssh/id_rsa_github_one<br>~/.ssh/id_rsa_github_two<br>~/.ssh/id_rsa_gitlab<br></code></pre></td></tr></table></div></figure><p>编辑 <code>~/.ssh/config</code>在 <code>~/.ssh/config</code> 中配置多账户，示例如下：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bbhug9mfcwb3cl"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-bbhug9mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># GitHub 账户 One<br>Host github_one<br>    HostName github.com<br>    User git<br>    IdentityFile ~/.ssh/id_rsa_github_one<br><br># GitHub 账户 Two<br>Host github_two<br>    HostName github.com<br>    User git<br>    IdentityFile ~/.ssh/id_rsa_github_two<br><br># GitLab 账户<br>Host gitlab<br>    HostName gitlab.com<br>    User git<br>    IdentityFile ~/.ssh/id_rsa_gitlab<br></code></pre></td></tr></table></div></figure><p>使用以下命令测试：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-s5ro97mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-s5ro97mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github_one<br>ssh -T git@github_two<br>ssh -T git@gitlab<br></code></pre></td></tr></table></div></figure><p><strong>输出示例：</strong> </p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dpa6u9mfcwb3cl"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-dpa6u9mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Welcome to GitHub, @yourusername!<br></code></pre></td></tr></table></div></figure><hr><p><strong>3. 绑定远程仓库</strong>  </p><ol><li>添加远程仓库：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-aqkwgdmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-aqkwgdmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin git@&lt;<span class="hljs-built_in">alias</span>&gt;:&lt;username&gt;/&lt;repository&gt;.git<br></code></pre></td></tr></table></div></figure><p>示例：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hqkmvvmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-hqkmvvmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin git@gitlab:&lt;username&gt;/&lt;repository&gt;.git<br></code></pre></td></tr></table></div></figure><ol start="2"><li>检查绑定是否成功：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8eiklqmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-8eiklqmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>常见错误</strong> ：</li></ol><ul><li><strong><code>remote origin already exists</code></strong> ：表示远程仓库已存在，可以重新设置：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mcdhqymfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-mcdhqymfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote set-url origin git@&lt;<span class="hljs-built_in">alias</span>&gt;:&lt;username&gt;/&lt;repository&gt;.git<br></code></pre></td></tr></table></div></figure><hr><p><strong>4. 获取远程仓库内容</strong><br>如果远程仓库已有内容（例如 README 文件），需同步：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8a8m2imfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-8a8m2imfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main --rebase<br></code></pre></td></tr></table></div></figure><p><strong>常见错误</strong> ： </p><ul><li><strong><code>error: pathspec &#39;main&#39; did not match</code></strong> ：可能远程分支是 <code>master</code> 而不是 <code>main</code>，先列出远程分支：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2r2zrxmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-2r2zrxmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -r<br></code></pre></td></tr></table></div></figure><p>切换到正确分支：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bfryllmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-bfryllmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -M main<br></code></pre></td></tr></table></div></figure><hr><p><strong>5. 合并本地和远程内容</strong><br>若有冲突，会显示类似以下内容：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1iptfrmfcwb3cl"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-1iptfrmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">CONFLICT (content): Merge conflict in &lt;file&gt;<br></code></pre></td></tr></table></div></figure><p>解决冲突后：</p><ol><li><p>编辑冲突的文件以保留正确内容。</p></li><li><p>标记冲突已解决：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jt0u0imfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-jt0u0imfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;file&gt;<br></code></pre></td></tr></table></div></figure><ol start="3"><li>完成合并：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7fgui6mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-7fgui6mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit<br></code></pre></td></tr></table></div></figure><hr><p><strong>6. 推送代码到远程仓库</strong><br>首次推送时，需设置本地分支与远程分支关联：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-r9u82tmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-r9u82tmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin main<br></code></pre></td></tr></table></div></figure><p>后续推送可直接使用：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-agrka0mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-agrka0mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></div></figure><hr><p><strong>7. 总结完整流程</strong><br>以下是完整流程代码示例：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a9c7mjmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-a9c7mjmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入项目目录</span><br><span class="hljs-built_in">cd</span> /path/to/your/project<br><br><span class="hljs-comment"># 初始化 Git 仓库</span><br>git init<br><br><span class="hljs-comment"># 添加项目文件并提交</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;Initial commit&quot;</span><br><br><span class="hljs-comment"># 配置远程仓库</span><br>git remote add origin git@gitlab:&lt;username&gt;/&lt;repository&gt;.git<br><br><span class="hljs-comment"># 获取远程仓库内容并合并</span><br>git pull origin main --rebase<br><br><span class="hljs-comment"># 推送本地代码到远程</span><br>git push -u origin main<br></code></pre></td></tr></table></div></figure><hr><p><strong>8. 注意事项与错误排查</strong>  </p><ol><li><strong>分支名称不同</strong> ：</li></ol><ul><li>GitLab 默认分支为 <code>main</code>，但有时会是 <code>master</code>。检查远程分支：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i08v9fmfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-i08v9fmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -r<br></code></pre></td></tr></table></div></figure><ul><li>统一分支名称：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pxa8p2mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-pxa8p2mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -M main<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>SSH 密钥未加载</strong> ：</li></ol><ul><li>确保已加载正确的 SSH 密钥：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ds6hr1mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-ds6hr1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add ~/.ssh/id_rsa_gitlab<br></code></pre></td></tr></table></div></figure><ul><li>检查已加载的密钥：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6sfioamfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-6sfioamfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add -l<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>权限问题</strong> ：</li></ol><ul><li>确认公钥已添加到远程仓库的 SSH 设置中。</li></ul><ol start="4"><li><strong>配置文件未生效</strong> ：</li></ol><ul><li>确保 <code>~/.ssh/config</code> 的文件格式正确，关键字段如 <code>HostName</code> 和 <code>IdentityFile</code> 无误。</li></ul><hr><h3 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a>示例输出</h3><p><strong>测试 SSH 连接：</strong> </p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dyl9w1mfcwb3cl"></i><span>BASH</span><div class="collapse show" id="collapse-dyl9w1mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@gitlab<br></code></pre></td></tr></table></div></figure><p>输出：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qc11xxmfcwb3cl"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-qc11xxmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Welcome to GitLab, @yourusername!<br></code></pre></td></tr></table></div></figure><p><strong>推送成功：</strong> </p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qndgf8mfcwb3cl"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-qndgf8mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Enumerating objects: 5, done.<br>Counting objects: 100% (5/5), done.<br>Writing objects: 100% (5/5), 500 bytes | 500.00 KiB/s, done.<br>Total 5 (delta 0), reused 0 (delta 0), pack-reused 0<br>To git@gitlab.com:&lt;username&gt;/&lt;repository&gt;.git<br> * [new branch]      main -&gt; main<br></code></pre></td></tr></table></div></figure><p>希望这个教程能帮助到您！</p>]]></content>
    
    
    <categories>
      
      <category>GPT问答类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>git仓库</tag>
      
      <tag>git命令</tag>
      
      <tag>GPT学习</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>将 HEIC 格式的图片批量转换为 JPG 格式</title>
    <link href="/2024/11/21/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E5%B0%86%20HEIC%20%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%20JPG%20%E6%A0%BC%E5%BC%8F/"/>
    <url>/2024/11/21/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E5%B0%86%20HEIC%20%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%20JPG%20%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="将-HEIC-格式的图片批量转换为-JPG-格式"><a href="#将-HEIC-格式的图片批量转换为-JPG-格式" class="headerlink" title="将 HEIC 格式的图片批量转换为 JPG 格式"></a>将 HEIC 格式的图片批量转换为 JPG 格式</h1><hr><p>有多种开源免费工具可以将 HEIC 格式的图片批量转换为 JPG 格式。以下是一些推荐的工具和方法：</p><hr><h3 id="1-ImageMagick"><a href="#1-ImageMagick" class="headerlink" title="1. ImageMagick"></a>1. <strong>ImageMagick</strong></h3><p><strong>支持平台</strong>：Windows、macOS、Linux<br><strong>特点</strong>：功能强大，支持批量处理。</p><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><ul><li>在系统中安装 ImageMagick（<a href="https://imagemagick.org/">官网下载</a>）。</li><li>确保安装时勾选 HEIC 支持模块。</li></ul><h4 id="转换命令："><a href="#转换命令：" class="headerlink" title="转换命令："></a>转换命令：</h4><p>在终端或命令提示符中运行以下命令将 HEIC 批量转换为 JPG：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5u44kumfcwb3ck"></i><span>NONE</span><div class="collapse show" id="collapse-5u44kumfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">bashmagick mogrify -format jpg *.heic<br></code></pre></td></tr></table></div></figure><ul><li>该命令会将当前文件夹中所有的 <code>.heic</code> 文件转换为 <code>.jpg</code> 文件，并覆盖原始文件。</li></ul><hr><h3 id="2-libheif-ffmpeg"><a href="#2-libheif-ffmpeg" class="headerlink" title="2. libheif + ffmpeg"></a>2. <strong>libheif + ffmpeg</strong></h3><p><strong>支持平台</strong>：Windows、macOS、Linux<br><strong>特点</strong>：灵活适配 HEIC，使用 ffmpeg 脚本可实现批量处理。</p><h4 id="安装：-1"><a href="#安装：-1" class="headerlink" title="安装："></a>安装：</h4><ul><li>安装 libheif（<a href="https://github.com/strukturag/libheif">GitHub地址</a>）以支持 HEIC 格式。</li><li>安装 ffmpeg（<a href="https://ffmpeg.org/">官网下载</a>）。</li></ul><h4 id="转换命令：-1"><a href="#转换命令：-1" class="headerlink" title="转换命令："></a>转换命令：</h4><p>运行以下脚本：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-31nxu7mfcwb3ck"></i><span>NONE</span><div class="collapse show" id="collapse-31nxu7mfcwb3ck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">bashfor file in *.heic; do<br>    ffmpeg -i &quot;$file&quot; &quot;$&#123;file%.heic&#125;.jpg&quot;<br>done<br></code></pre></td></tr></table></div></figure><hr><h3 id="3-XnConvert"><a href="#3-XnConvert" class="headerlink" title="3. XnConvert"></a>3. <strong>XnConvert</strong></h3><p><strong>支持平台</strong>：Windows、macOS、Linux<br><strong>特点</strong>：图形化界面，易用且支持批量操作。</p><h4 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h4><ul><li><a href="">官网下载</a></li></ul><h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h4><ol><li>打开 XnConvert。</li><li>将 HEIC 文件批量拖入窗口。</li><li>设置输出格式为 JPG。</li><li>点击“转换”即可。</li></ol><hr><h3 id="4-heic2jpg（Python脚本）"><a href="#4-heic2jpg（Python脚本）" class="headerlink" title="4. heic2jpg（Python脚本）"></a>4. <strong>heic2jpg（Python脚本）</strong></h3><p><strong>支持平台</strong>：Windows、macOS、Linux<br><strong>特点</strong>：开源轻量，通过 Python 实现批量转换。</p><h4 id="安装：-2"><a href="#安装：-2" class="headerlink" title="安装："></a>安装：</h4><ol><li>安装 Python 和 pip。</li><li>安装依赖：<figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vxx0n2mfcwb3cl"></i><span>NONE</span><div class="collapse show" id="collapse-vxx0n2mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs none">bashpip install pillow pyheif<br></code></pre></td></tr></table></div></figure></li><li>下载脚本：<a href="https://github.com/TacticalTechHeicToJpg">GitHub地址</a></li></ol><h4 id="使用脚本："><a href="#使用脚本：" class="headerlink" title="使用脚本："></a>使用脚本：</h4><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ukfokpmfcwb3cl"></i><span>NONE</span><div class="collapse show" id="collapse-ukfokpmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs none">pythonimport os<br>from PIL import Image<br>import pyheif<br><br>def convert_heic_to_jpg(input_dir, output_dir):<br>    os.makedirs(output_dir, exist_ok=True)<br>    for file in os.listdir(input_dir):<br>        if file.endswith(&quot;.heic&quot;):<br>            heif_file = pyheif.read(os.path.join(input_dir, file))<br>            image = Image.frombytes(<br>                heif_file.mode, <br>                heif_file.size, <br>                heif_file.data,<br>                &quot;raw&quot;,<br>                heif_file.mode,<br>                heif_file.stride,<br>            )<br>            jpg_file = os.path.splitext(file)[0] + &quot;.jpg&quot;<br>            image.save(os.path.join(output_dir, jpg_file), &quot;JPEG&quot;)<br><br>convert_heic_to_jpg(&quot;path/to/input&quot;, &quot;path/to/output&quot;)<br></code></pre></td></tr></table></div></figure><hr><h3 id="5-Online-Tools"><a href="#5-Online-Tools" class="headerlink" title="5. Online Tools"></a>5. <strong>Online Tools</strong></h3><p>如果文件量较少，也可以使用一些免费的在线工具（例如 CloudConvert 或 Zamzar）。但需要注意隐私安全性。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>如果需要命令行工具，推荐 <strong>ImageMagick</strong> 或 <strong>libheif+ffmpeg</strong>。</li><li>如果需要 GUI 界面工具，推荐 <strong>XnConvert</strong>。</li><li>如果想完全定制，可以选择 Python 脚本实现。</li></ul><p>你可以根据使用场景选择最适合自己的工具！如果需要安装指导，欢迎继续询问。</p><p>Export</p>]]></content>
    
    
    <categories>
      
      <category>GPT问答类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GPT学习</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git分支切换问题-强制获取所有远程更新</title>
    <link href="/2024/11/19/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/git%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-%E5%BC%BA%E5%88%B6%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/"/>
    <url>/2024/11/19/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/git%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-%E5%BC%BA%E5%88%B6%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="git分支切换问题-强制获取所有远程更新"><a href="#git分支切换问题-强制获取所有远程更新" class="headerlink" title="git分支切换问题-强制获取所有远程更新"></a>git分支切换问题-强制获取所有远程更新</h1><details>  <summary>我的-一问</summary> <p>我在连接git时出现admin@DESKTOP-DABFHG1 MINGW64 &#x2F;d&#x2F;git软件备份 (master)<br>$ git checkout main<br>error: pathspec ‘main’ did not match any file(s) known to git</p><p>admin@DESKTOP-DABFHG1 MINGW64 &#x2F;d&#x2F;git软件备份 (master)<br>$ git fetch origingit checkout main<br>fatal: ‘origingit’ does not appear to be a git repository<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.</p><p>admin@DESKTOP-DABFHG1 MINGW64 &#x2F;d&#x2F;git软件备份 (master)<br>$</p></details><hr><h2 id="AI第-1回答："><a href="#AI第-1回答：" class="headerlink" title="AI第-1回答："></a>AI第-1回答：</h2><hr><p>看起来您在执行 <code>git checkout main</code> 时遇到了一些问题。以下是可能的原因和解决方法： </p><ol><li><strong><code>main</code> 分支不存在</strong> ：错误信息 <code>error: pathspec &#39;main&#39; did not match any file(s) known to git</code> 表明您的仓库中可能没有 <code>main</code> 分支。可以通过以下命令查看当前仓库中的所有分支：</li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2ip0mbmfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-2ip0mbmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></div></figure><p>如果没有看到 <code>main</code> 分支，而是看到 <code>master</code> 分支，那么您可以切换到 <code>master</code> 分支：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-na2q6fmfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-na2q6fmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>拼写错误</strong> ：您在执行 <code>git fetch origingit checkout main</code> 时可能误拼写了 <code>origin</code>，导致错误。可以按照以下步骤修正：</li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mlvco9mfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-mlvco9mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git fetch origin<br>git checkout <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>远程仓库配置问题</strong> ：如果您发现仓库中确实有 <code>main</code> 分支，但仍无法切换，可以检查远程仓库是否配置正确：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cqsxx6mfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-cqsxx6mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>确保输出中有 <code>origin</code> 指向正确的远程仓库地址。如果没有，可以用以下命令添加：</p><figure class="highlight livecodeserver"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7mly5xmfcwb3cr"></i><span>LIVECODESERVER</span><div class="collapse show" id="collapse-7mly5xmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git remote <span class="hljs-built_in">add</span> origin &lt;仓库的<span class="hljs-built_in">URL</span>&gt;<br></code></pre></td></tr></table></div></figure><p>试试上述步骤，看看能否解决您的问题。</p><details>  <summary>我的-二问</summary> <p>admin@DESKTOP-DABFHG1 MINGW64 &#x2F;d&#x2F;git软件备份 (master)<br>$ git remote -v<br>origin  <a href="mailto:&#x67;&#105;&#x74;&#64;&#108;&#98;&#x2e;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#64;&#108;&#98;&#x2e;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:lifuaini2019&#x2F;stcbk.git (fetch)<br>origin  <a href="mailto:&#x67;&#105;&#x74;&#x40;&#108;&#x62;&#46;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#46;&#x63;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#108;&#x62;&#46;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#46;&#x63;&#111;&#109;</a>:lifuaini2019&#x2F;stcbk.git (push)</p><p>admin@DESKTOP-DABFHG1 MINGW64 &#x2F;d&#x2F;git软件备份 (master)<br>$ 如果我想强制接取仓库到本地，怎怎样做？</p></details><hr><h2 id="AI第-2回答："><a href="#AI第-2回答：" class="headerlink" title="AI第-2回答："></a>AI第-2回答：</h2><hr><p>要强制获取远程仓库的所有更新，可以使用 <code>git fetch</code> 命令加上 <code>--all</code> 选项和 <code>--force</code> 参数。以下是具体步骤： </p><ol><li><strong>强制获取所有远程更新</strong> ：</li></ol><figure class="highlight brainfuck"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-80tfn1mfcwb3cr"></i><span>BRAINFUCK</span><div class="collapse show" id="collapse-80tfn1mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git fetch</span> <span class="hljs-literal">--</span><span class="hljs-comment">all</span> <span class="hljs-literal">--</span><span class="hljs-comment">force</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>切换到目标分支</strong> （假设是 <code>main</code> 分支）：<br>先确认分支是否存在并切换。如果 <code>main</code> 不存在，而仓库使用的是 <code>master</code>，您可以切换到 <code>master</code>：</li></ol><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-c9qbcymfcwb3cr"></i><span>NGINX</span><div class="collapse show" id="collapse-c9qbcymfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout main  <span class="hljs-comment"># 如果提示不存在，改为 `git checkout master`</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>强制重置本地分支</strong> （可选）：<br>如果您想让本地分支与远程完全一致，可以强制重置本地分支到远程的最新提交。</li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-isjbaomfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-isjbaomfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git reset <span class="hljs-attr">--hard</span> origin/<span class="hljs-selector-tag">main</span>  # 将 `<span class="hljs-selector-tag">main</span>` 替换为实际分支名称<br></code></pre></td></tr></table></div></figure><p>这样可以确保您本地仓库和远程仓库同步，所有最新的更改都会强制获取并覆盖本地的状态。</p><details>  <summary>我的-三问</summary> <p>如果强制下载指定分支到本地，要怎样操作 ？</p></details><hr><h2 id="AI第-3回答："><a href="#AI第-3回答：" class="headerlink" title="AI第-3回答："></a>AI第-3回答：</h2><hr><p>要强制下载指定的分支到本地，可以使用以下步骤：</p><ol><li><strong>强制获取指定分支</strong> ：假设您要获取的是 <code>main</code> 分支，您可以使用 <code>git fetch</code> 命令：</li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-654etdmfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-654etdmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git fetch origin <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>检查本地是否有该分支</strong> ：如果本地不存在该分支，您可以使用以下命令创建并切换到该分支：</li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-igb7h7mfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-igb7h7mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">main</span> origin/<span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>强制更新本地分支以匹配远程</strong> ：<br>如果本地已经有该分支，但您想强制更新它以匹配远程的最新状态，可以使用以下命令：</li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0gl6zdmfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-0gl6zdmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout <span class="hljs-selector-tag">main</span><br>git reset <span class="hljs-attr">--hard</span> origin/<span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><p>这样可以确保您本地的 <code>main</code> 分支与远程的 <code>main</code> 分支完全一致。</p><details>  <summary>我的-四问</summary> <p>git fetch origin main 这个命令和这个git checkout main  有什么不同</p></details><hr><h2 id="AI第-4回答："><a href="#AI第-4回答：" class="headerlink" title="AI第-4回答："></a>AI第-4回答：</h2><hr><p><code>git fetch origin main</code> 和 <code>git checkout main</code> 这两个命令有不同的作用： </p><ol><li><strong><code>git fetch origin main</code></strong> ：</li></ol><ul><li><p>这个命令从远程仓库 <code>origin</code> 获取 <code>main</code> 分支的最新内容，并将其下载到本地的远程跟踪分支 <code>origin/main</code>，但不会更改您的本地分支。</p></li><li><p>简单来说，它只会同步远程仓库的最新状态到本地的远程跟踪分支，但不会合并或应用到您的本地分支上。</p></li><li><p>您可以把 <code>fetch</code> 想象成下载最新代码到一个缓存区，本地代码还不受影响。</p></li></ul><ol start="2"><li><strong><code>git checkout main</code></strong> ：</li></ol><ul><li><p>这个命令用于切换到本地的 <code>main</code> 分支。</p></li><li><p>如果 <code>main</code> 分支已经存在，这条命令只是让您在本地的 <code>main</code> 分支上工作。</p></li><li><p>如果本地的 <code>main</code> 分支不存在，而远程仓库有一个 <code>origin/main</code>，执行 <code>git checkout main</code> 可能会自动创建一个与 <code>origin/main</code> 同步的本地分支 <code>main</code>。</p></li></ul><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h3><p>通常，您可以先 <code>git fetch origin main</code> 获取远程的最新状态，再用 <code>git checkout main</code> 切换到 <code>main</code> 分支。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git命令</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>保记文本内容替换助手 - 使用说明</title>
    <link href="/2024/11/18/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E4%BF%9D%E8%AE%B0%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E6%9B%BF%E6%8D%A2%E5%8A%A9%E6%89%8B%20-%20%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2024/11/18/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E4%BF%9D%E8%AE%B0%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E6%9B%BF%E6%8D%A2%E5%8A%A9%E6%89%8B%20-%20%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="保记文本内容替换助手-使用说明"><a href="#保记文本内容替换助手-使用说明" class="headerlink" title="保记文本内容替换助手 - 使用说明"></a>保记文本内容替换助手 - 使用说明</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>保记文本内容替换助手是一款强大的文本处理工具，通过定义特定的变量标记和替换规则，用户可以在大批量文本中实现内容自动替换和动态生成。该工具特别适合需要批量替换或自动化生成编号的场景。</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://app.lifu.us.kg/%E4%BF%9D%E8%AE%B0%E6%8C%87%E6%8C%A5AI%E5%86%99%E7%9A%84%E7%A8%8B%E5%BA%8F/%E4%BF%9D%E8%AE%B0%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E6%9B%BF%E6%8D%A2%E5%8A%A9%E6%89%8B.rar">下载地址-</a></p><h2 id="初次运行"><a href="#初次运行" class="headerlink" title="初次运行"></a>初次运行</h2><p>首次运行保记文本内容替换助手时，工具会自动生成一个初始的配置文件（<code>.json</code> ），该文件用于保存用户的默认设置和变量定义，以便后续快速加载配置、简化操作。首次运行时界面将自动加载并显示初始化成功的提示信息，提醒用户可以开始配置变量和替换规则。</p><h2 id="文件名带空格或特殊符的"><a href="#文件名带空格或特殊符的" class="headerlink" title="文件名带空格或特殊符的"></a>文件名带空格或特殊符的</h2><p>这也是这程序唯一的，带空格或者特殊字符必须手动选择到窗口内，不能以拖拉的方式丢进来！我觉得是不够完美的地方，暂时不折腾它了，例如这里两个文件，不能识别带空格的 </p><p><img src="https://app.fekepj.com/list-tu/2024/11/19/565c3b70afead4411094b2b904b7e2ef.png" alt="image-20241119123622098"></p><p>必须手动选择导入:例如下图</p><p><img src="https://app.fekepj.com/list-tu/2024/11/19/c6a9eadfa9e45ca5c0822e25bf8b676b.png" alt="image-20241119123713992"></p><h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><p>初次生成的配置文件记录了程序的默认参数以及每个变量的初始设置，如变量的计数起始值、递增步长等信息。用户可以通过直接修改该配置文件或使用工具界面进行设置，以调整后续运行的输出效果。常见配置项包括：</p><ul><li><strong>初始计数值</strong>：定义 <code>-&#123;countzhcn&#125;</code> 和 <code>-&#123;counter&#125;</code> 等变量的起始值。</li><li><strong>递增步长</strong>：设置计数值的增量，默认为 1。</li><li><strong>变量格式</strong>：指定变量格式（中文数字或阿拉伯数字）。</li></ul><p>修改配置文件后，保存并重新运行程序即可生效。</p><hr><h2 id="工具界面操作指南"><a href="#工具界面操作指南" class="headerlink" title="工具界面操作指南"></a>工具界面操作指南</h2><p>保记文本内容替换助手提供了直观的用户界面，简化了文本的导入、变量设置和替换执行。以下是各个主要操作的详细说明：</p><h3 id="1-导入原始文本"><a href="#1-导入原始文本" class="headerlink" title="1. 导入原始文本"></a>1. 导入原始文本</h3><p>在界面中点击“导入文本”按钮，选择需要进行替换的文件，支持多种格式（如 <code>.txt</code> 或 <code>.md</code> 文件）。导入的文本将显示在预览窗口中，便于用户确认内容。</p><h3 id="2-设置变量和替换规则"><a href="#2-设置变量和替换规则" class="headerlink" title="2. 设置变量和替换规则"></a>2. 设置变量和替换规则</h3><p>在工具界面中，用户可以设置各种变量和替换规则，具体包括以下内容：</p><ul><li><strong>变量定义</strong>：界面上会列出 <code>-&#123;countzhcn&#125;</code> 和 <code>-&#123;counter&#125;</code> 等常用变量，用户可以点击选择并设置其参数。</li><li><strong>起始值和步长</strong>：用户可以指定每个变量的初始值和步长，工具将根据这些参数递增或递减输出。</li><li><strong>替换格式</strong>：支持选择计数输出格式，如 <code>-&#123;countzhcn&#125;</code> 会以中文数字输出，<code>-&#123;counter&#125;</code> 则以阿拉伯数字输出。</li></ul><h3 id="3-执行替换"><a href="#3-执行替换" class="headerlink" title="3. 执行替换"></a>3. 执行替换</h3><p>配置完替换规则后，点击“开始替换”按钮，程序会自动扫描文本并替换指定变量。替换后的文本将在预览窗口中展示，用户可以确认是否符合预期。</p><h3 id="4-保存替换结果"><a href="#4-保存替换结果" class="headerlink" title="4. 保存替换结果"></a>4. 保存替换结果</h3><p>替换完成后，用户可以点击“保存为文件”按钮，将处理后的文本保存为新文件。同时，也可以选择覆盖原始文件。</p><hr><h2 id="关键变量说明"><a href="#关键变量说明" class="headerlink" title="关键变量说明"></a>关键变量说明</h2><h3 id="countzhcn"><a href="#countzhcn" class="headerlink" title="-{countzhcn}"></a><code>-&#123;countzhcn&#125;</code></h3><p>此变量用于在文本中生成以中文数字格式显示的动态计数，适用于需要中文格式编号的场景。</p><ul><li><strong>作用</strong>：<code>-&#123;countzhcn&#125;</code> 会将每次递增的计数值以“一、二、三”等中文数字显示。</li><li><strong>计数逻辑</strong>：起始值由配置文件决定或手动设置，适合用于列出带有中文编号的任务或步骤。</li></ul><h4 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h4><p><img src="https://app.fekepj.com/list-tu/2024/11/19/fc2eb7e262e75e67cecb8fad77ce31c4.png" alt="image-20241119124354338"></p><figure class="highlight dust"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-uwlm4bmfcwb3cp"></i><span>DUST</span><div class="collapse show" id="collapse-uwlm4bmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">复制代码</span><br><span class="language-xml">第 -</span><span class="hljs-template-variable">&#123;countzhcn&#125;</span><span class="language-xml"> 项任务。</span><br></code></pre></td></tr></table></div></figure><p>替换结果：</p><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fveirgmfcwb3cp"></i><span>DUST</span><div class="collapse show" id="collapse-fveirgmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">复制代码<br>第一项任务。<br></code></pre></td></tr></table></figure><h3 id="counter"><a href="#counter" class="headerlink" title="-{counter}"></a><code>-&#123;counter&#125;</code></h3><p>此变量用于以阿拉伯数字格式进行计数，非常适合需要精确数字的场景。</p><ul><li><strong>作用</strong>：生成的计数结果为阿拉伯数字，例如 “1, 2, 3…”。</li><li><strong>计数逻辑</strong>：初始值和步长均可设置，方便自定义序列。</li></ul><h4 id="示例-图片"><a href="#示例-图片" class="headerlink" title="示例:图片"></a>示例:图片</h4><p><img src="https://app.fekepj.com/list-tu/2024/11/19/53e270108f8ba2aa93b111f4c9642ce5.png" alt="image-20241119124454894"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">复制代码</span><br><span class="language-xml">编号：-</span><span class="hljs-template-variable">&#123;counter&#125;</span><br></code></pre></td></tr></table></div></figure><p>替换结果：</p><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-d33ytsmfcwb3cp"></i><span>DIFF</span><div class="collapse show" id="collapse-d33ytsmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">复制代码<br>编号：1<br></code></pre></td></tr></table></figure><hr><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><h3 id="批量变量替换"><a href="#批量变量替换" class="headerlink" title="批量变量替换"></a>批量变量替换</h3><p>允许在同一文本中使用多个相同或不同的变量标记，程序会逐个识别并替换，极大提高了文本处理效率。</p><h3 id="自定义变量格式"><a href="#自定义变量格式" class="headerlink" title="自定义变量格式"></a>自定义变量格式</h3><p>提供变量的格式化选项，例如 <code>-&#123;countzhcn&#125;</code> 可选择大写中文数字、简写等不同输出格式，便于满足不同文本风格需求。</p><h3 id="一键预览与撤销"><a href="#一键预览与撤销" class="headerlink" title="一键预览与撤销"></a>一键预览与撤销</h3><p>替换前支持实时预览，用户可以确认替换效果；如需更改，支持撤销替换，恢复原始内容。</p><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="任务清单示例"><a href="#任务清单示例" class="headerlink" title="任务清单示例"></a>任务清单示例</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff">diff复制代码任务清单：<br><span class="hljs-deletion">-&#123;countzhcn&#125;：准备数据</span><br><span class="hljs-deletion">-&#123;countzhcn&#125;：编写文档</span><br><span class="hljs-deletion">-&#123;countzhcn&#125;：代码测试</span><br></code></pre></td></tr></table></div></figure><p>替换后：</p><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ushub9mfcwb3cp"></i><span>DUST</span><div class="collapse show" id="collapse-ushub9mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">复制代码任务清单：<br>一：准备数据<br>二：编写文档<br>三：代码测试<br></code></pre></td></tr></table></figure><h3 id="项目序号示例"><a href="#项目序号示例" class="headerlink" title="项目序号示例"></a>项目序号示例</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">复制代码项目 -</span><span class="hljs-template-variable">&#123;counter&#125;</span><span class="language-xml">：完成需求分析</span><br><span class="language-xml">项目 -</span><span class="hljs-template-variable">&#123;counter&#125;</span><span class="language-xml">：开始开发</span><br><span class="language-xml">项目 -</span><span class="hljs-template-variable">&#123;counter&#125;</span><span class="language-xml">：测试部署</span><br></code></pre></td></tr></table></div></figure><p>替换后：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">复制代码项目 1：完成需求分析<br>项目 2：开始开发<br>项目 3：测试部署<br></code></pre></td></tr></table></figure><hr><h2 id="一些常规的替换也是可以的"><a href="#一些常规的替换也是可以的" class="headerlink" title="一些常规的替换也是可以的"></a>一些常规的替换也是可以的</h2><p>例如:</p><img src="https://app.fekepj.com/list-tu/2024/11/19/7dc1aed3e09ecd68b3df9aaeed442548.png" alt="image-20241119124656986" style="zoom:50%;" /><hr><h2 id="转换结果对比"><a href="#转换结果对比" class="headerlink" title="转换结果对比"></a>转换结果对比</h2><p>转换后-                                                            –                                                                                  -转换前</p><img src="https://app.fekepj.com/list-tu/2024/11/19/00b6f951e488d40af8d1e1a5fc78cb7a.png" alt="image-20241119103054085" style="zoom: 50%;" /><p>然后加个标是：git分支切换问题  一键发布到hexo博客，就成为这样的文单网页了可点下图进入看效果，也可以：<a href="https://保.us.kg/2024/11/19/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/git%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-%E5%BC%BA%E5%88%B6%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/">点此浏览网页效果</a></p><p>问的题可以折叠收缩起来，效果杆杆的！！</p><p><a href="https://保.us.kg/2024/11/19/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/git%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-%E5%BC%BA%E5%88%B6%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/"><img src="https://app.fekepj.com/list-tu/2024/11/19/c3b75dc1a58c1f2004faec0bf011337f.png" alt="image-20241119103356213"></a></p><p>上面为折叠效果</p><p>下面为展开效果</p><p><a href="https://保.us.kg/2024/11/19/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/git%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E9%97%AE%E9%A2%98-%E5%BC%BA%E5%88%B6%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/"><img src="https://app.fekepj.com/list-tu/2024/11/19/baf2f54823ff8097dcd8b32e217da746.png" alt="image-20241119103541401"></a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>变量语法</strong>：变量必须严格按照 <code>&#123;&#125;</code> 内格式编写，确保准确识别。</li><li><strong>文件备份</strong>：建议在执行替换前对原文件备份，避免误操作。</li><li><strong>配置文件编辑</strong>：手动修改配置文件后需重启程序使其生效。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>保记文本内容替换助手是我用我的想法，让Ai给我写的代码！虽然市面上有很多程序，但，，，，始终都没有我订制用得舒服！！！！再说：这通过强大的变量标记和自动替换功能，帮助用户在复杂文本中快速实现内容替换和编号管理，特别适合批量文档处理场景。</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>md命令</tag>
      
      <tag>md代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成程序时打包图标的执行命令</title>
    <link href="/2024/11/15/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F%E6%97%B6%E6%89%93%E5%8C%85%E5%9B%BE%E6%A0%87%E7%9A%84%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/11/15/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%94%9F%E6%88%90%E7%A8%8B%E5%BA%8F%E6%97%B6%E6%89%93%E5%8C%85%E5%9B%BE%E6%A0%87%E7%9A%84%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="生成程序时打包图标的执行命令"><a href="#生成程序时打包图标的执行命令" class="headerlink" title="生成程序时打包图标的执行命令"></a>生成程序时打包图标的执行命令</h1><h2 id="问"><a href="#问" class="headerlink" title="问:"></a>问:<br><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-eizjxnmfcwb3cl"></i><span>STYLUS</span><div class="collapse show" id="collapse-eizjxnmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>我平时是用这行命令生成exe程序的python -m PyInstaller <span class="hljs-attr">--onefile</span> <span class="hljs-attr">--windowed</span> <span class="hljs-attr">--uac-admin</span> hexo_manager<span class="hljs-selector-class">.py</span>  如果在本目录下有个<span class="hljs-number">3232</span><span class="hljs-selector-class">.ico</span> 图标，要怎样一起将个图标打包到程序里？<br><br></code></pre></td></tr></table></div></figure></h2><h2 id="AI回答："><a href="#AI回答：" class="headerlink" title="AI回答："></a>AI回答：</h2><p>要将图标 <code>3232.ico</code> 一起打包到生成的 <code>.exe</code> 文件中，你可以使用 <code>PyInstaller</code> 的 <code>--icon</code> 参数来指定图标文件。修改你的命令如下：</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fia6vpmfcwb3cl"></i><span>STYLUS</span><div class="collapse show" id="collapse-fia6vpmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python -m PyInstaller <span class="hljs-attr">--onefile</span> <span class="hljs-attr">--windowed</span> <span class="hljs-attr">--uac-admin</span> <span class="hljs-attr">--icon</span>=<span class="hljs-number">3232</span><span class="hljs-selector-class">.ico</span> hexo_manager.py<br></code></pre></td></tr></table></div></figure><p>这个命令会将 <code>3232.ico</code> 图标文件包含在生成的 <code>hexo_manager.exe</code> 文件中。确保 <code>3232.ico</code> 文件与 <code>hexo_manager.py</code> 脚本在同一目录下，或者提供图标文件的完整路径。</p><h2 id="问-1"><a href="#问-1" class="headerlink" title="问:"></a>问:<br><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-frgwdpmfcwb3cl"></i><span>STYLUS</span><div class="collapse show" id="collapse-frgwdpmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>你能详细说说这行命令的每一个的作用吗？<br><br></code></pre></td></tr></table></figure></h2><h2 id="AI回答：-1"><a href="#AI回答：-1" class="headerlink" title="AI回答："></a>AI回答：</h2><p>当然可以！以下是这行命令的详细解释：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python -m PyInstaller <span class="hljs-attr">--onefile</span> <span class="hljs-attr">--windowed</span> <span class="hljs-attr">--uac-admin</span> <span class="hljs-attr">--icon</span>=<span class="hljs-number">3232</span><span class="hljs-selector-class">.ico</span> hexo_manager.py<br></code></pre></td></tr></table></div></figure><ol><li><code>python -m PyInstaller</code></li></ol><ul><li><p><strong>作用</strong> ：调用 Python 解释器并通过 <code>-m</code> 参数以模块方式运行 <code>PyInstaller</code>。</p></li><li><p><code>PyInstaller</code> 是一个打包工具，能够将 Python 脚本转换为独立的可执行文件（<code>.exe</code> 文件）。</p></li></ul><ol start="2"><li><code>--onefile</code></li></ol><ul><li><p><strong>作用</strong> ：将整个程序打包成一个单独的可执行文件。</p></li><li><p>如果不使用这个选项，<code>PyInstaller</code> 会将程序打包成多个文件，包含依赖库、资源文件等。使用 <code>--onefile</code> 选项后，所有内容都被打包成一个 <code>.exe</code> 文件，方便分发和部署。</p></li></ul><ol start="3"><li><code>--windowed</code></li></ol><ul><li><p><strong>作用</strong> ：在生成的可执行文件中禁用控制台窗口。</p></li><li><p>这个选项通常用于图形界面的程序。如果你的程序是 GUI 程序（比如使用 <code>Tkinter</code>、<code>PyQt</code> 等），使用这个选项可以避免在运行时显示一个黑色的控制台窗口。如果你是做命令行程序，应该去掉这个选项。</p></li></ul><ol start="4"><li><code>--uac-admin</code></li></ol><ul><li><p><strong>作用</strong> ：请求以管理员权限运行程序。</p></li><li><p>在 Windows 上，某些操作可能需要管理员权限（比如修改系统设置或访问受保护的文件）。使用 <code>--uac-admin</code> 选项，程序会在启动时要求用户授予管理员权限（通过 UAC 提示）。</p></li></ul><ol start="5"><li><code>--icon=3232.ico</code></li></ol><ul><li><p><strong>作用</strong> ：将指定的图标文件 <code>3232.ico</code> 打包进生成的可执行文件中。</p></li><li><p><code>--icon</code> 参数允许你指定一个图标文件，该文件将成为生成的 <code>.exe</code> 文件的图标。这里的 <code>3232.ico</code> 是你要使用的图标文件。确保图标文件与 Python 脚本在同一目录，或者你可以指定图标文件的完整路径。</p></li></ul><ol start="6"><li><code>hexo_manager.py</code></li></ol><ul><li><p><strong>作用</strong> ：这是你要打包的 Python 脚本文件。</p></li><li><p><code>hexo_manager.py</code> 是你要打包成 <code>.exe</code> 文件的 Python 脚本名。你需要确保该文件路径正确，或者将命令执行时的当前目录切换到包含该文件的目录。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这行命令的作用是：</p><ul><li><p>使用 <code>PyInstaller</code> 将 <code>hexo_manager.py</code> 脚本打包成一个单文件的可执行程序（<code>.exe</code>）。</p></li><li><p>程序启动时不会显示控制台窗口（适用于 GUI 程序）。</p></li><li><p>在程序启动时请求管理员权限。</p></li><li><p>将 <code>3232.ico</code> 图标作为 <code>.exe</code> 文件的图标。</p></li></ul><p>希望这能帮助你更好地理解这行命令！</p>]]></content>
    
    
    <categories>
      
      <category>GPT问答类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sh脚本</tag>
      
      <tag>代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序转成exe后运行图标出错的处理方法</title>
    <link href="/2024/11/15/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%A8%8B%E5%BA%8F%E8%BD%AC%E6%88%90exe%E5%90%8E%E8%BF%90%E8%A1%8C%E5%9B%BE%E6%A0%87%E5%87%BA%E9%94%99%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <url>/2024/11/15/GPT%E9%97%AE%E7%AD%94%E7%B1%BB/%E7%A8%8B%E5%BA%8F%E8%BD%AC%E6%88%90exe%E5%90%8E%E8%BF%90%E8%A1%8C%E5%9B%BE%E6%A0%87%E5%87%BA%E9%94%99%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="程序转成exe后运行图标出错的处理方法"><a href="#程序转成exe后运行图标出错的处理方法" class="headerlink" title="程序转成exe后运行图标出错的处理方法"></a>程序转成exe后运行图标出错的处理方法</h1><h2 id="问"><a href="#问" class="headerlink" title="问:"></a>问:<br><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jw5jj5mfcwb3cl"></i><span>VIM</span><div class="collapse show" id="collapse-jw5jj5mfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>这程序我打包成<span class="hljs-keyword">exe</span>运行出错，没打包前用<span class="hljs-keyword">py</span>运行正常ipkhTraceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>): <br>  File <span class="hljs-string">&quot;txtok.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">138</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>  File <span class="hljs-string">&quot;txtok.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">15</span>, in __init__<br>  File <span class="hljs-string">&quot;tkinter\__init__.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">2155</span>, in wm_iconbitmap<br>_tkinter.TclError: bitmap <span class="hljs-string">&quot;D:\aa\dist\3232.ico&quot;</span> not defined这是什么问题给我讲解并教我处理<br><br></code></pre></td></tr></table></div></figure></h2><h2 id="AI回答："><a href="#AI回答：" class="headerlink" title="AI回答："></a>AI回答：</h2><p>这个错误提示说明程序在运行时无法正确加载 <code>.ico</code> 文件作为图标。错误信息中的 <code>_tkinter.TclError: bitmap &quot;D:\aa\dist\3232.ico&quot; not defined</code> 意味着 <code>Tkinter</code> 尝试加载图标文件时出错了，找不到该文件或文件格式不正确。</p><h3 id="解决问题的步骤"><a href="#解决问题的步骤" class="headerlink" title="解决问题的步骤"></a>解决问题的步骤</h3><ol><li><p><strong>确认图标路径</strong> ：<br>打包后的 <code>.exe</code> 程序中的路径和源代码中的路径不同。使用 <code>os.getcwd()</code> 获取当前工作目录，在打包后的程序中，<code>os.getcwd()</code> 会指向 <code>dist</code> 文件夹，而不是你源代码所在的目录。因此，你需要确保打包后的图标文件在正确的位置。</p></li><li><p><strong>使用相对路径</strong> ：<br>你可以通过 <code>sys._MEIPASS</code> 获取 PyInstaller 在运行时临时解压文件的路径，这个路径指向 <code>.exe</code> 文件所在的临时目录。你可以在程序中动态调整图标文件的路径，以确保程序能够在不同环境下都能找到图标。</p></li><li><p><strong>修改代码</strong> ：<br>修改图标路径的部分，确保在打包后程序能找到图标文件。你可以使用以下代码来处理：</p></li></ol><h3 id="关键改动："><a href="#关键改动：" class="headerlink" title="关键改动："></a>关键改动：</h3><ol><li><strong>图标路径的处理</strong> ：</li></ol><ul><li><p>在打包后的程序中，<code>sys._MEIPASS</code> 指向解压后的临时目录，<code>sys._MEIPASS</code> 在打包时自动创建。如果你的 <code>.ico</code> 文件和 <code>.exe</code> 文件一起打包，使用 <code>sys._MEIPASS</code> 来获取图标路径。</p></li><li><p>在源码中，则使用 <code>os.getcwd()</code> 获取当前工作目录。</p></li></ul><ol start="2"><li><strong>打包命令</strong> ：<br>使用 <code>PyInstaller</code> 打包时，确保将 <code>.ico</code> 文件一同打包：</li></ol><p>根据你提供的代码，<code>_tkinter.TclError: bitmap &quot;D:\aa\dist\3232.ico&quot; not defined</code> 错误通常发生在使用 <code>root.iconbitmap()</code> 设置窗口图标时，程序无法正确加载指定的 <code>.ico</code> 文件。这个错误通常有几个原因： </p><ol><li><p><strong>路径问题</strong> ：当你打包成 <code>.exe</code> 文件后，程序的工作目录会发生变化，可能导致 <code>3232.ico</code> 图标文件无法找到。你当前的代码使用的是 <code>os.getcwd()</code> 来获取当前工作目录，这可能在运行时不再是预期的目录。</p></li><li><p><strong>ICO 文件缺失</strong> ：如果在打包过程中没有将图标文件一起打包，程序在执行时会找不到这个文件。</p></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>确保图标文件在打包时包含</strong> ：<br>使用 PyInstaller 或 cx_Freeze 打包程序时，确保将 <code>.ico</code> 文件包含在打包的文件中。可以在打包命令中添加 <code>--add-data</code> 参数来确保 <code>.ico</code> 文件被包含。比如，如果你使用 PyInstaller 打包，可以像这样添加图标文件：</li></ol><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2b99iwmfcwb3cl"></i><span>VIM</span><div class="collapse show" id="collapse-2b99iwmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">pyinstaller --<span class="hljs-built_in">add</span>-data <span class="hljs-string">&quot;3232.ico;.&quot;</span> your_script.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>修改代码以适应打包后的路径</strong> ：<br>在打包后，你不能直接使用 <code>os.getcwd()</code> 来获取图标文件的路径，因为执行 <code>.exe</code> 文件时工作目录不再是源代码所在目录。你可以使用 <code>sys._MEIPASS</code> 来处理这种情况，<code>sys._MEIPASS</code> 是 PyInstaller 在打包时创建的临时文件夹路径。<br>修改代码如下：</li></ol><figure class="highlight python"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-d5eeqdmfcwb3cl"></i><span>PYTHON</span><div class="collapse show" id="collapse-d5eeqdmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> filedialog, messagebox, Listbox, Frame, BooleanVar<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextModifierApp</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-variable language_">self</span>.root = root<br>        <span class="hljs-variable language_">self</span>.root.title(<span class="hljs-string">&quot;文本修改器&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.root.geometry(<span class="hljs-string">&quot;600x400&quot;</span>)<br><br>        <span class="hljs-comment"># 设置窗口图标</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(sys, <span class="hljs-string">&#x27;_MEIPASS&#x27;</span>):<br>            <span class="hljs-comment"># 获取打包后的路径</span><br>            icon_path = os.path.join(sys._MEIPASS, <span class="hljs-string">&quot;3232.ico&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 获取当前工作目录的路径</span><br>            icon_path = os.path.join(os.getcwd(), <span class="hljs-string">&quot;3232.ico&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.root.iconbitmap(icon_path)  <span class="hljs-comment"># 设置程序窗口图标</span><br><br>        <span class="hljs-variable language_">self</span>.create_widgets()<br><br>    <span class="hljs-comment"># 其他代码保持不变...</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>确保图标文件存在</strong> ：<br>确保在程序的目录中确实存在 <code>3232.ico</code> 文件。如果图标文件丢失或路径错误，也会导致此错误。</li></ol><h3 id="进一步说明："><a href="#进一步说明：" class="headerlink" title="进一步说明："></a>进一步说明：</h3><ul><li><p>在 <code>sys._MEIPASS</code> 目录下查找图标是 PyInstaller 在运行时解压资源文件的临时路径。如果你的程序未打包，使用的是 <code>os.getcwd()</code>，这样可以在开发环境中正常运行。</p></li><li><p>使用 <code>sys._MEIPASS</code> 能够确保无论是从源代码运行还是打包后运行，程序都能正确加载图标。</p></li></ul><p>试着按照这个思路修改你的代码，并重新打包程序。这样应该可以解决图标加载的问题。</p><p>最后 我是用这行命令打包程序  <code>txtok.py</code> 是我的程序代码名</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zfjw0jmfcwb3cl"></i><span>STYLUS</span><div class="collapse show" id="collapse-zfjw0jmfcwb3cl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python -m PyInstaller <span class="hljs-attr">--onefile</span> <span class="hljs-attr">--windowed</span> <span class="hljs-attr">--uac-admin</span> <span class="hljs-attr">--icon</span>=<span class="hljs-number">3232</span><span class="hljs-selector-class">.ico</span> <span class="hljs-attr">--add-data</span> <span class="hljs-string">&quot;3232.ico;.&quot;</span> txtok.py<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>GPT问答类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt系统查看路由器的硬件详细信息</title>
    <link href="/2024/11/14/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/OpenWrt%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E7%A1%AC%E4%BB%B6%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/"/>
    <url>/2024/11/14/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/OpenWrt%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E7%A1%AC%E4%BB%B6%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenWrt系统查看路由器的硬件详细信息"><a href="#OpenWrt系统查看路由器的硬件详细信息" class="headerlink" title="OpenWrt系统查看路由器的硬件详细信息"></a>OpenWrt系统查看路由器的硬件详细信息</h1><details>  <summary>我的-第一问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fafaufmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-fafaufmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>我有个路由器openwrt,现在连上ssh，用什么命令查看硬件详细信息<br><br></code></pre></td></tr></table></figure>---AI第-1回答：--- <p>在 OpenWrt 系统上，你可以使用以下命令来查看路由器的硬件详细信息：</p><ol><li><strong>查看 CPU 信息</strong> ：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/cpuinfo<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>查看内存信息</strong> ：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9304qemfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-9304qemfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/meminfo<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>查看闪存（存储）使用情况</strong> ：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-734zkemfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-734zkemfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><ol start="4"><li><strong>查看网络接口信息</strong> ：</li></ol><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g0as71mfcwb3cq"></i><span>CSS</span><div class="collapse show" id="collapse-g0as71mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ifconfig -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></div></figure><ol start="5"><li><strong>查看硬件设备列表</strong> ：</li></ol><figure class="highlight 1c"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l22i9bmfcwb3cq"></i><span>1C</span><div class="collapse show" id="collapse-l22i9bmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dmesg <span class="hljs-string">| grep -i hardware</span><br></code></pre></td></tr></table></div></figure><ol start="6"><li><strong>查看详细的硬件和系统信息</strong> （如果已经安装了 <code>lshw</code> 命令）：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i3hddamfcwb3cq"></i><span>EBNF</span><div class="collapse show" id="collapse-i3hddamfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lshw</span><br></code></pre></td></tr></table></div></figure><blockquote><p>注意：某些命令可能需要先安装相应的包，例如 <code>lshw</code> 可以通过 <code>opkg update &amp;&amp; opkg install lshw</code> 安装。</p></blockquote><details>  <summary>我的-第二问</summary><figure class="highlight tcl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nct6djmfcwb3cq"></i><span>TCL</span><div class="collapse show" id="collapse-nct6djmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><br>帮我分析一下[root@Kwrt:<span class="hljs-number">10</span>:<span class="hljs-number">51</span> AM ~] # cat /<span class="hljs-keyword">proc</span>/cpuinfo<span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 0<span class="hljs-title"></span><br><span class="hljs-title">model</span> name      :<span class="hljs-title"> ARMv7</span> Processor<span class="hljs-title"> rev</span> 1 (v7l)<span class="hljs-title"></span><br><span class="hljs-title">BogoMIPS</span>        : 3.87<span class="hljs-title"></span><br><span class="hljs-title">Features</span>        :<span class="hljs-title"> half</span> thumb<span class="hljs-title"> fastmult</span> vfp<span class="hljs-title"> edsp</span> thumbee<span class="hljs-title"> neon</span> vfpv3<span class="hljs-title"> tls</span> vfpv4<span class="hljs-title"> vfpd32</span> <span class="hljs-title"></span><br><span class="hljs-title">CPU</span> implementer : 0x41<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> architecture: 7<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> variant     : 0x0<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> part        : 0xc05<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> revision    : 1<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 1<span class="hljs-title"></span><br><span class="hljs-title">model</span> name      :<span class="hljs-title"> ARMv7</span> Processor<span class="hljs-title"> rev</span> 1 (v7l)<span class="hljs-title"></span><br><span class="hljs-title">BogoMIPS</span>        : 3.87<span class="hljs-title"></span><br><span class="hljs-title">Features</span>        :<span class="hljs-title"> half</span> thumb<span class="hljs-title"> fastmult</span> vfp<span class="hljs-title"> edsp</span> thumbee<span class="hljs-title"> neon</span> vfpv3<span class="hljs-title"> tls</span> vfpv4<span class="hljs-title"> vfpd32</span> <span class="hljs-title"></span><br><span class="hljs-title">CPU</span> implementer : 0x41<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> architecture: 7<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> variant     : 0x0<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> part        : 0xc05<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> revision    : 1<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 2<span class="hljs-title"></span><br><span class="hljs-title">model</span> name      :<span class="hljs-title"> ARMv7</span> Processor<span class="hljs-title"> rev</span> 1 (v7l)<span class="hljs-title"></span><br><span class="hljs-title">BogoMIPS</span>        : 3.87<span class="hljs-title"></span><br><span class="hljs-title">Features</span>        :<span class="hljs-title"> half</span> thumb<span class="hljs-title"> fastmult</span> vfp<span class="hljs-title"> edsp</span> thumbee<span class="hljs-title"> neon</span> vfpv3<span class="hljs-title"> tls</span> vfpv4<span class="hljs-title"> vfpd32</span> <span class="hljs-title"></span><br><span class="hljs-title">CPU</span> implementer : 0x41<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> architecture: 7<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> variant     : 0x0<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> part        : 0xc05<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> revision    : 1<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">processor</span>       : 3<span class="hljs-title"></span><br><span class="hljs-title">model</span> name      :<span class="hljs-title"> ARMv7</span> Processor<span class="hljs-title"> rev</span> 1 (v7l)<span class="hljs-title"></span><br><span class="hljs-title">BogoMIPS</span>        : 3.87<span class="hljs-title"></span><br><span class="hljs-title">Features</span>        :<span class="hljs-title"> half</span> thumb<span class="hljs-title"> fastmult</span> vfp<span class="hljs-title"> edsp</span> thumbee<span class="hljs-title"> neon</span> vfpv3<span class="hljs-title"> tls</span> vfpv4<span class="hljs-title"> vfpd32</span> <span class="hljs-title"></span><br><span class="hljs-title">CPU</span> implementer : 0x41<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> architecture: 7<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> variant     : 0x0<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> part        : 0xc05<span class="hljs-title"></span><br><span class="hljs-title">CPU</span> revision    : 1<span class="hljs-title"></span><br><span class="hljs-title"></span><br><span class="hljs-title">Hardware</span>        :<span class="hljs-title"> Amlogic</span> Meson<span class="hljs-title"> platform</span><br>Revision        : 0000<span class="hljs-title"></span><br><span class="hljs-title">Serial</span>          : 0000000000000000<br>[root@Kwrt:10:53<span class="hljs-title"> AM</span> ~] #<span class="hljs-title"> cat</span> /<span class="hljs-keyword">proc</span>/meminfo<span class="hljs-title"></span><br><span class="hljs-title">MemTotal:</span>        1025060<span class="hljs-title"> kB</span><br>MemFree:          430128<span class="hljs-title"> kB</span><br>MemAvailable:     856992<span class="hljs-title"> kB</span><br>Buffers:            9116<span class="hljs-title"> kB</span><br>Cached:           476284<span class="hljs-title"> kB</span><br>SwapCached:            0<span class="hljs-title"> kB</span><br>Active:           258268<span class="hljs-title"> kB</span><br>Inactive:         274316<span class="hljs-title"> kB</span><br>Active(anon):      48380<span class="hljs-title"> kB</span><br>Inactive(anon):     3444<span class="hljs-title"> kB</span><br>Active(file):     209888<span class="hljs-title"> kB</span><br>Inactive(file):   270872<span class="hljs-title"> kB</span><br>Unevictable:           0<span class="hljs-title"> kB</span><br>Mlocked:               0<span class="hljs-title"> kB</span><br>HighTotal:        262144<span class="hljs-title"> kB</span><br>HighFree:           1568<span class="hljs-title"> kB</span><br>LowTotal:         762916<span class="hljs-title"> kB</span><br>LowFree:          428560<span class="hljs-title"> kB</span><br>SwapTotal:        340988<span class="hljs-title"> kB</span><br>SwapFree:         340988<span class="hljs-title"> kB</span><br>Dirty:                60<span class="hljs-title"> kB</span><br>Writeback:             0<span class="hljs-title"> kB</span><br>AnonPages:         47340<span class="hljs-title"> kB</span><br>Mapped:           140816<span class="hljs-title"> kB</span><br>Shmem:              4728<span class="hljs-title"> kB</span><br>KReclaimable:       8404<span class="hljs-title"> kB</span><br>Slab:              25904<span class="hljs-title"> kB</span><br>SReclaimable:       8404<span class="hljs-title"> kB</span><br>SUnreclaim:        17500<span class="hljs-title"> kB</span><br>KernelStack:        1376<span class="hljs-title"> kB</span><br>PageTables:         1604<span class="hljs-title"> kB</span><br>NFS_Unstable:          0<span class="hljs-title"> kB</span><br>Bounce:                0<span class="hljs-title"> kB</span><br>WritebackTmp:          0<span class="hljs-title"> kB</span><br>CommitLimit:      853516<span class="hljs-title"> kB</span><br>Committed_AS:     162680<span class="hljs-title"> kB</span><br>VmallocTotal:     245760<span class="hljs-title"> kB</span><br>VmallocUsed:       12820<span class="hljs-title"> kB</span><br>VmallocChunk:          0<span class="hljs-title"> kB</span><br>Percpu:              336<span class="hljs-title"> kB</span><br>CmaTotal:          16384<span class="hljs-title"> kB</span><br>CmaFree:              68<span class="hljs-title"> kB</span><br>[root@Kwrt:10:53<span class="hljs-title"> AM</span> ~] #<span class="hljs-title"> lshw</span><br>-bash:<span class="hljs-title"> lshw:</span> command<span class="hljs-title"> not</span> found<br>[root@Kwrt:10:53<span class="hljs-title"> AM</span> ~] #<span class="hljs-title"> dmesg</span> |<span class="hljs-title"> grep</span> -i<span class="hljs-title"> hardware</span><br>[root@Kwrt:10:54<span class="hljs-title"> AM</span> ~] #<br><br></code></pre></td></tr></table></div></figure>---AI第-2回答：--- <p>从输出内容中可以分析出以下几点信息：</p><h3 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a>CPU 信息</h3><ul><li><p>你的设备搭载的是 <strong>ARMv7 处理器</strong> ，具有 <strong>4 个核心</strong> （<code>processor : 0</code> 到 <code>processor : 3</code> 表示 4 个处理器核心）。</p></li><li><p><strong>BogoMIPS</strong>  值为 3.87，这是一个粗略的计算能力指标，主要用于时间延迟校准。这个值比较低，表明处理器的计算性能有限，适合嵌入式设备。</p></li><li><p><strong>支持的特性</strong> 包括多种浮点和向量运算扩展（如 <code>vfp</code>, <code>vfpv3</code>, <code>vfpv4</code>, <code>neon</code>），这表明处理器可以在一定程度上支持多媒体和浮点运算。</p></li><li><p><strong>CPU implementer</strong>  和 <strong>CPU part</strong>  表示处理器的制造商（<code>0x41</code> 代表 ARM 公司）以及型号。</p></li><li><p><strong>硬件平台</strong> 是 <strong>Amlogic Meson 平台</strong> ，Amlogic 是常见的用于嵌入式设备的处理器制造商，尤其适用于电视盒、路由器等设备。</p></li></ul><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><ul><li><p><strong>总内存</strong> 为 1025060 kB（约 1GB），对于大部分嵌入式设备来说是较为合适的配置。</p></li><li><p><strong>空闲内存</strong> 为 430128 kB（约 430MB），显示出当前系统有大部分内存空闲，这样的设备使用情况表明系统压力不大。</p></li><li><p><strong>缓存内存</strong> 和 <strong>可用内存</strong> 也表明系统的内存资源充足： </p><ul><li><p><strong>Cached：476284 kB</strong>  表示系统在磁盘缓存中的数据量。</p></li><li><p><strong>MemAvailable：856992 kB</strong>  显示了大约 856MB 的内存仍然可以随时供系统使用。</p></li></ul></li></ul><h3 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h3><ul><li><p><strong>Swap</strong> ：Swap 分区的总大小为 340988 kB（约 340MB），当前未被使用（SwapFree 与 SwapTotal 相等）。</p></li><li><p><strong>内存的分布</strong> ：显示系统将内存分为高位和低位区域（<code>HighTotal</code> 和 <code>LowTotal</code>），主要用于区分物理地址的不同使用方式。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个设备的硬件配置显示出它是一款基于 ARM 的嵌入式系统，适合轻量级的网络或媒体应用。它具有四核 CPU 和 1GB 内存，配置良好，适合运行 OpenWrt 系统及一般的路由器任务。如果你需要更多系统信息，可以尝试安装 <code>lshw</code> 或其他硬件分析工具，但在嵌入式系统上不一定总是有必要。</p><details>  <summary>我的-第三问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kt0krjmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-kt0krjmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>如果我想看一下www这个文件夹还有多少容量可用，用什么命令<br><br></code></pre></td></tr></table></figure>---AI第-3回答：--- <p>你可以使用以下命令来查看 <code>www</code> 文件夹的可用容量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /www<br></code></pre></td></tr></table></div></figure><p>这条命令会显示 <code>/www</code> 文件夹所在的分区的总容量、已用容量和可用容量。<code>-h</code> 参数让输出以人类可读的格式显示（例如 MB、GB）。</p><details>  <summary>我的-第四问</summary><figure class="highlight coffeescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7278j0mfcwb3cq"></i><span>COFFEESCRIPT</span><div class="collapse show" id="collapse-7278j0mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>Filesystem                Size      Used Available Use% Mounted <span class="hljs-literal">on</span><br><span class="hljs-regexp">/dev/root               971.3M    938.0M     17.3M  98% /</span><br>[root@Kwrt:<span class="hljs-number">10</span>:<span class="hljs-number">56</span> AM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-4回答：--- <p>从输出来看，<code>/</code> 根分区的总容量为 971.3 MB，已用 938.0 MB，剩余可用空间仅有 17.3 MB，使用率达到了 98%。这表示可用空间非常少了，尤其是对于存储日志、缓存或新增文件来说可能已经不足。<br>要腾出一些空间，你可以考虑：</p><ol><li><strong>清理缓存或临时文件</strong> ：查看 <code>/tmp</code> 或 <code>/var/log</code> 中是否有可删除的文件。</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ne9xs9mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-ne9xs9mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /tmp/*<br></code></pre></td></tr></table></div></figure><ol start="2"><li><p><strong>卸载不必要的软件包</strong> ：如果有安装不再需要的软件包，使用 <code>opkg remove &lt;package-name&gt;</code> 卸载。</p></li><li><p><strong>清理软件包缓存</strong> ：OpenWrt 会缓存安装包，可以用以下命令清理。</p></li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rxh6edmfcwb3cq"></i><span>EBNF</span><div class="collapse show" id="collapse-rxh6edmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">opkg clean</span><br></code></pre></td></tr></table></div></figure><p>如果这些措施不足以腾出所需的空间，可能需要扩展存储，例如通过挂载外部存储设备或扩展根分区。</p><details>  <summary>我的-第五问</summary><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yuk0c6mfcwb3cq"></i><span>APACHE</span><div class="collapse show" id="collapse-yuk0c6mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">MemAvailable</span>：<span class="hljs-number">856992</span> kB 显示了大约 <span class="hljs-number">856</span>MB 的内存仍然可以随时供系统使用。这个可用空间在哪里？<br><br></code></pre></td></tr></table></div></figure>---AI第-5回答：--- <p><code>MemAvailable</code> 显示的约 856MB 可用空间指的是 <strong>内存</strong>  (RAM) 中的可用空间，而不是存储空间。它表示在当前系统负载下，系统还有多少 <strong>内存</strong>  可以被新的应用或进程使用，并不涉及硬盘或闪存的可用存储容量。<br>在你的系统上：</p><ul><li><p><strong>MemAvailable</strong>  是内存中的可用空间，可以随时为应用程序分配使用，比如加载程序、缓存数据等。</p></li><li><p><strong>&#x2F;dev&#x2F;root 的 Available</strong>  则是根文件系统（即硬盘或闪存）的可用存储空间，这个值反映了系统剩余的存储空间，可用于保存文件、安装新软件等。<br>总之，<code>MemAvailable</code> 是 RAM 可用容量，与文件存储无关；而 <code>df -h</code> 中的 <code>Available</code> 才是存储空间的剩余量。</p></li></ul><details>  <summary>我的-第六问</summary><figure class="highlight vhdl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tk6hbimfcwb3cq"></i><span>VHDL</span><div class="collapse show" id="collapse-tk6hbimfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><br>这是[root@Kwrt:<span class="hljs-number">02</span>:<span class="hljs-number">58</span> AM ~] # opkg clean<br>opkg: unknown sub-command clean<br>usage: opkg [options...] sub-command [arguments...]<br>where sub-command <span class="hljs-keyword">is</span> one <span class="hljs-keyword">of</span>:<br><br><span class="hljs-keyword">Package</span> Manipulation:<br>        update                  Update list <span class="hljs-keyword">of</span> available packages<br>        upgrade &lt;pkgs&gt;          Upgrade packages<br>        install &lt;pkgs&gt;          Install <span class="hljs-keyword">package</span>(s)<br>        configure &lt;pkgs&gt;        Configure unpacked <span class="hljs-keyword">package</span>(s)<br>        remove &lt;pkgs|regexp&gt;    Remove <span class="hljs-keyword">package</span>(s)<br>        flag &lt;flag&gt; &lt;pkgs&gt;      Flag <span class="hljs-keyword">package</span>(s)<br>         &lt;flag&gt;=hold|noprune|user|ok|installed|unpacked (one per invocation)<br><br>Informational Commands:<br>        list                    List available packages<br>        list-installed          List installed packages<br>        list-upgradable         List installed <span class="hljs-keyword">and</span> upgradable packages<br>        list-changed-conffiles  List user modified <span class="hljs-keyword">configuration</span> files<br>        files &lt;pkg&gt;             List files belonging <span class="hljs-keyword">to</span> &lt;pkg&gt;<br>        search &lt;<span class="hljs-keyword">file</span>|regexp&gt;    List <span class="hljs-keyword">package</span> providing &lt;<span class="hljs-keyword">file</span>&gt;<br>        find &lt;regexp&gt;           List packages whose name <span class="hljs-keyword">or</span> description matches &lt;regexp&gt;<br>        info [pkg|regexp]       Display <span class="hljs-keyword">all</span> info <span class="hljs-keyword">for</span> &lt;pkg&gt;<br>        status [pkg|regexp]     Display <span class="hljs-keyword">all</span> status <span class="hljs-keyword">for</span> &lt;pkg&gt;<br>        download &lt;pkg&gt;          Download &lt;pkg&gt; <span class="hljs-keyword">to</span> current directory<br>        compare-versions &lt;v1&gt; &lt;op&gt; &lt;v2&gt;<br>                            compare versions using &lt;= &lt; &gt; &gt;= = &lt;&lt; &gt;&gt;<br>        print-<span class="hljs-keyword">architecture</span>      List installable <span class="hljs-keyword">package</span> architectures<br>        depends [-A] [pkgname|pat]+<br>        whatdepends [-A] [pkgname|pat]+<br>        whatdependsrec [-A] [pkgname|pat]+<br>        whatrecommends[-A] [pkgname|pat]+<br>        whatsuggests[-A] [pkgname|pat]+<br>        whatprovides [-A] [pkgname|pat]+<br>        whatconflicts [-A] [pkgname|pat]+<br>        whatreplaces [-A] [pkgname|pat]+<br><br>Options:<br>        -A                      Query <span class="hljs-keyword">all</span> packages <span class="hljs-keyword">not</span> just those installed<br>        -V[&lt;level&gt;]             Set verbosity level <span class="hljs-keyword">to</span> &lt;level&gt;.<br>        <span class="hljs-comment">--verbosity[=&lt;level&gt;]   Verbosity levels:</span><br>                                        <span class="hljs-number">0</span> errors only<br>                                        <span class="hljs-number">1</span> normal messages (<span class="hljs-keyword">default</span>)<br>                                        <span class="hljs-number">2</span> informative messages<br>                                        <span class="hljs-number">3</span> debug<br>                                        <span class="hljs-number">4</span> debug level <span class="hljs-number">2</span><br>        -f &lt;conf_file&gt;          <span class="hljs-keyword">Use</span> &lt;conf_file&gt; as the opkg <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">file</span><br>        <span class="hljs-comment">--conf &lt;conf_file&gt;</span><br>        <span class="hljs-comment">--cache &lt;directory&gt;     Use a package cache</span><br>        -d &lt;dest_name&gt;          <span class="hljs-keyword">Use</span> &lt;dest_name&gt; as the the root directory <span class="hljs-keyword">for</span><br>        <span class="hljs-comment">--dest &lt;dest_name&gt;      package installation, removal, upgrading.</span><br>                                &lt;dest_name&gt; should be a defined dest name from<br>                                the <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">file</span>, (but can also be a<br>                                directory name <span class="hljs-keyword">in</span> a pinch).<br>        -o &lt;dir&gt;                <span class="hljs-keyword">Use</span> &lt;dir&gt; as the root directory <span class="hljs-keyword">for</span><br>        <span class="hljs-comment">--offline-root &lt;dir&gt;    offline installation of packages.</span><br>        <span class="hljs-comment">--verify-program &lt;path&gt; Use the given program to verify usign signatures</span><br>        <span class="hljs-comment">--add-arch &lt;arch&gt;:&lt;prio&gt;        Register architecture with given priority</span><br>        <span class="hljs-comment">--add-dest &lt;name&gt;:&lt;path&gt;        Register destination with given path</span><br><br><span class="hljs-keyword">Force</span> Options:<br>        <span class="hljs-comment">--force-depends         Install/remove despite failed dependencies</span><br>        <span class="hljs-comment">--force-maintainer      Overwrite preexisting config files</span><br>        <span class="hljs-comment">--force-reinstall       Reinstall package(s)</span><br>        <span class="hljs-comment">--force-overwrite       Overwrite files from other package(s)</span><br>        <span class="hljs-comment">--force-downgrade       Allow opkg to downgrade packages</span><br>        <span class="hljs-comment">--force-space           Disable free space checks</span><br>        <span class="hljs-comment">--force-postinstall     Run postinstall scripts even in offline mode</span><br>        <span class="hljs-comment">--force-remove  Remove package even if prerm script fails</span><br>        <span class="hljs-comment">--force-checksum        Don&#x27;t fail on checksum mismatches</span><br>        <span class="hljs-comment">--no-check-certificate Don&#x27;t validate SSL certificates</span><br>        <span class="hljs-comment">--noaction              No action -- test only</span><br>        <span class="hljs-comment">--download-only No action -- download only</span><br>        <span class="hljs-comment">--nodeps                Do not follow dependencies</span><br>        <span class="hljs-comment">--nocase                Perform case insensitive pattern matching</span><br>        <span class="hljs-comment">--size                  Print package size when listing available packages</span><br>        <span class="hljs-comment">--strip-abi             Print package name without appended ABI version</span><br>        <span class="hljs-comment">--force-removal-of-dependent-packages</span><br>                                Remove <span class="hljs-keyword">package</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">all</span> dependencies<br>        <span class="hljs-comment">--autoremove            Remove packages that were installed</span><br>                                automatically <span class="hljs-keyword">to</span> satisfy dependencies<br>        -t                      Specify tmp-dir.<br>        <span class="hljs-comment">--tmp-dir               Specify tmp-dir.</span><br>        -l                      Specify lists-dir.<br>        <span class="hljs-comment">--lists-dir             Specify lists-dir.</span><br><br> regexp could be something like <span class="hljs-symbol">&#x27;pkgname</span>*&#x27; &#x27;*<span class="hljs-keyword">file</span>*&#x27; <span class="hljs-keyword">or</span> similar<br> e.g. opkg info <span class="hljs-symbol">&#x27;libstd</span>*&#x27; <span class="hljs-keyword">or</span> opkg search &#x27;*libop*&#x27; <span class="hljs-keyword">or</span> opkg remove <span class="hljs-symbol">&#x27;libncur</span>*&#x27;<br>[root@Kwrt:<span class="hljs-number">02</span>:<span class="hljs-number">58</span> AM ~] #<br><br></code></pre></td></tr></table></div></figure>---AI第-6回答：--- <p>在 OpenWrt 中，<code>opkg</code> 没有直接提供清理缓存的 <code>clean</code> 命令。要手动清理软件包缓存，可以删除存储更新包列表的文件。通常，缓存文件位于 <code>/var/opkg-lists/</code> 文件夹。你可以使用以下命令来清理它们：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ydahjpmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-ydahjpmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /var/opkg-lists/*<br></code></pre></td></tr></table></div></figure><p>这样就可以删除 <code>opkg update</code> 生成的缓存文件夹中的内容，释放一些存储空间。之后如果需要再次安装或更新包，你可以重新运行 <code>opkg update</code> 来刷新包列表。</p><details>  <summary>我的-第七问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ksuby2mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-ksuby2mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>我要查一个我整个机器的所有硬盘空间详细情况<br><br></code></pre></td></tr></table></figure>---AI第-7回答：--- <p>要查看整个系统的所有挂载点及其详细的硬盘空间使用情况，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><p>这个命令会显示所有分区的总容量、已用空间、可用空间和挂载位置，以人类可读的格式（MB、GB）输出。</p><details>  <summary>我的-第八问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7y6l72mfcwb3cq"></i><span>EBNF</span><div class="collapse show" id="collapse-7y6l72mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>我想查询这个机器的总空日包含所有，也带系统的详细的<br><br></code></pre></td></tr></table></figure>---AI第-8回答：--- <p>如果你想查看系统内的所有硬盘，包括挂载点和未挂载的硬盘或分区的详细信息，可以使用以下命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsblk</span><br></code></pre></td></tr></table></div></figure><p><code>lsblk</code> 会显示系统中所有的块设备（包括硬盘和分区），包含每个设备的大小、挂载点等信息。输出的格式如下： </p><ul><li><p><strong>NAME</strong> ：设备名称</p></li><li><p><strong>SIZE</strong> ：设备或分区大小</p></li><li><p><strong>MOUNTPOINT</strong> ：挂载点（如果已挂载）</p></li></ul><p>要查看更详细的空间使用情况，包括文件系统类型，你可以用：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6sbg8xmfcwb3cq"></i><span>EBNF</span><div class="collapse show" id="collapse-6sbg8xmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsblk -f</span><br></code></pre></td></tr></table></div></figure><p>或者结合 <code>fdisk</code> 来查看每个硬盘和分区的详细信息：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7ejlv2mfcwb3cq"></i><span>EBNF</span><div class="collapse show" id="collapse-7ejlv2mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fdisk -l</span><br></code></pre></td></tr></table></div></figure><p><code>fdisk -l</code> 会列出所有的物理硬盘及其分区信息，包括总大小、每个分区的大小、文件系统类型等。</p><details>  <summary>我的-第九问</summary><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fabd3dmfcwb3cq"></i><span>TAP</span><div class="collapse show" id="collapse-fabd3dmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>[root@Kwrt:11:04 AM ~] <span class="hljs-comment"># lsblk</span><br>NAME         MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>mmcblk1      179:0   <span class="hljs-number"> 0 </span> 7.3G <span class="hljs-number"> 0 </span>disk <br>├─mmcblk1p1  179:1   <span class="hljs-number"> 0 </span> 256M <span class="hljs-number"> 0 </span>part /mnt/mmcblk1p1<br>└─mmcblk1p2  179:2   <span class="hljs-number"> 0 </span>   7G <span class="hljs-number"> 0 </span>part /opt/docker<br>                                      /<br>mmcblk1boot0 179:32  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk <br>mmcblk1boot1 179:64  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk <br>zram0        254:0   <span class="hljs-number"> 0 </span> 333M <span class="hljs-number"> 0 </span>disk [SWAP]<br>[root@Kwrt:11:05 AM ~] <span class="hljs-comment">#  这是？</span><br><br></code></pre></td></tr></table></div></figure>---AI第-9回答：--- <p>从输出信息可以看出，你的设备主要存储在一张容量为 <strong>7.3 GB</strong>  的 <strong>MMC（eMMC或MicroSD卡）</strong>  上，其详细分区如下： </p><ul><li><p><strong>mmcblk1</strong> ：主存储设备，大小为 7.3 GB。 </p><ul><li><p><strong>mmcblk1p1</strong> ：第一个分区，大小为 <strong>256 MB</strong> ，挂载在 <code>/mnt/mmcblk1p1</code>。可能用作启动或备份分区。</p></li><li><p><strong>mmcblk1p2</strong> ：第二个分区，大小为 <strong>7 GB</strong> ，挂载在 <code>/opt/docker</code> 和 <code>/</code>，即用于主要的根文件系统和 Docker 目录。</p></li></ul></li><li><p><strong>mmcblk1boot0</strong>  和 <strong>mmcblk1boot1</strong> ：每个大小为 4 MB，这是 eMMC 的特殊引导分区，通常用于存放启动加载程序或启动相关数据，不会用于一般存储。</p></li><li><p><strong>zram0</strong> ：大小为 <strong>333 MB</strong> ，属于一个虚拟的压缩交换分区（SWAP），用来增加内存空间。<br>这个系统的主要存储都集中在 <strong>7.3 GB 的 mmcblk1</strong>  上，根目录 <code>/</code> 和 <code>/opt/docker</code> 共享第二个分区 mmcblk1p2。</p></li></ul><details>  <summary>我的-第十问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kft8pqmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-kft8pqmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>能不能分3G空间来到这个www文件夹下用<br><br></code></pre></td></tr></table></figure>---AI第-10回答：--- <p>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vmw2klmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-vmw2klmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 **要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bjw7ybmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-bjw7ybmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a9scbpmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-a9scbpmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 <code>mmcblk1p2</code>**  分区的空间，而不影响到系统的其他部分。方案二：在 <code>/</code> 分区内创建一个新文件夹，并绑定到 <code>/www</code> </p><ol><li><p>先在 <strong>先在 <code>/opt/docker</code></strong>  中创建一个子目录，比如 <code>www_data</code>。</p></li><li><p>使用 <code>mount</code> 命令将其挂载到 <strong>使用 <code>mount</code> 命令将其挂载到 <code>/www</code></strong>  下。</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-n0qwcimfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-n0qwcimfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www_data 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www_data<br><br><span class="hljs-comment"># 将 /opt/docker/www_data 绑定到 /www</span><br>mount --<span class="hljs-built_in">bind</span> /opt/docker/www_data /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vz0tw2mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-vz0tw2mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fhlti6mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-fhlti6mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 **要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-186ea3mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-186ea3mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wd7gimmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-wd7gimmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 <code>mmcblk1p2</code>**  分区的空间，而不影响到系统的其他部分。方案二：在 <code>/</code> 分区内创建一个新文件夹，并绑定到 <code>/www</code> </p><ol><li><p>先在 <strong>先在 <code>/opt/docker</code></strong>  中创建一个子目录，比如 <code>www_data</code>。</p></li><li><p>使用 <code>mount</code> 命令将其挂载到 <strong>使用 <code>mount</code> 命令将其挂载到 <code>/www</code></strong>  下。</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5y41j0mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-5y41j0mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www_data 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www_data<br><br><span class="hljs-comment"># 将 /opt/docker/www_data 绑定到 /www</span><br>mount --<span class="hljs-built_in">bind</span> /opt/docker/www_data /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  将会直接使用 **要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-e382r7mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-e382r7mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-smu8wvmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-smu8wvmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 **要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zhkibpmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-zhkibpmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vyfqe5mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-vyfqe5mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 <code>mmcblk1p2</code>**  分区的空间，而不影响到系统的其他部分。方案二：在 <code>/</code> 分区内创建一个新文件夹，并绑定到 <code>/www</code> </p><ol><li><p>先在 <strong>先在 <code>/opt/docker</code></strong>  中创建一个子目录，比如 <code>www_data</code>。</p></li><li><p>使用 <code>mount</code> 命令将其挂载到 <strong>使用 <code>mount</code> 命令将其挂载到 <code>/www</code></strong>  下。</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6o7zrymfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-6o7zrymfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www_data 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www_data<br><br><span class="hljs-comment"># 将 /opt/docker/www_data 绑定到 /www</span><br>mount --<span class="hljs-built_in">bind</span> /opt/docker/www_data /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-afjl1qmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-afjl1qmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1k9o4vmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-1k9o4vmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 **要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cig8ggmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-cig8ggmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，**要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <strong>要在 <strong>要在 <code>/www</code></strong>  下分配 3GB 的空间，可以采用以下几种方案：方案一：将 <code>/www</code> 指向 <code>/opt/docker</code> 的目录因为 <code>/opt/docker</code> 已经包含在 <code>mmcblk1p2</code></strong>  上，并且该分区有 7GB 空间，你可以将 <code>/www</code> 作为一个符号链接指向 <code>/opt/docker/www</code></strong> 。这样可以不占用其他分区的空间。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hbavqamfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-hbavqamfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www<br><br><span class="hljs-comment"># 将 /www 指向 /opt/docker/www</span><br><span class="hljs-built_in">ln</span> -s /opt/docker/www /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  实际上会使用 <code>mmcblk1p2</code>**  分区的空间，而不影响到系统的其他部分。方案二：在 <code>/</code> 分区内创建一个新文件夹，并绑定到 <code>/www</code> </p><ol><li><p>先在 <strong>先在 <code>/opt/docker</code></strong>  中创建一个子目录，比如 <code>www_data</code>。</p></li><li><p>使用 <code>mount</code> 命令将其挂载到 <strong>使用 <code>mount</code> 命令将其挂载到 <code>/www</code></strong>  下。</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-be9w77mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-be9w77mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建 /opt/docker/www_data 目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/docker/www_data<br><br><span class="hljs-comment"># 将 /opt/docker/www_data 绑定到 /www</span><br>mount --<span class="hljs-built_in">bind</span> /opt/docker/www_data /www<br></code></pre></td></tr></table></div></figure><p>这样，<code>/www</code>**  将会直接使用 <code>/opt/docker/www_data</code>**  的空间，相当于独立的存储区域。</p><h3 id="方案三：调整分区或创建一个-zram-压缩分区"><a href="#方案三：调整分区或创建一个-zram-压缩分区" class="headerlink" title="方案三：调整分区或创建一个 zram 压缩分区"></a>方案三：调整分区或创建一个 zram 压缩分区</h3><p>如果以上方法不适用，或者你想创建压缩分区，请告诉我详细需求，我可以进一步提供帮助。</p><details>  <summary>我的-第十一问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hv2u2mmfcwb3cq"></i><span>AWK</span><div class="collapse show" id="collapse-hv2u2mmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>我想调整分区大小怎操作<br><br></code></pre></td></tr></table></figure>---AI第-11回答：--- <p>要调整分区大小，你可以按照以下步骤进行。但请注意，调整分区可能会有数据丢失的风险，因此在开始操作之前请务必备份重要数据。</p><h3 id="1-确保系统可以进行分区调整"><a href="#1-确保系统可以进行分区调整" class="headerlink" title="1. 确保系统可以进行分区调整"></a>1. 确保系统可以进行分区调整</h3><p>首先，通常需要在系统外对分区进行调整。你可以使用支持分区调整的 Live CD 或 USB 镜像（如 GParted Live CD），或者在支持 OpenWrt 的系统中尝试。</p><h3 id="2-使用-GParted-工具调整分区大小"><a href="#2-使用-GParted-工具调整分区大小" class="headerlink" title="2. 使用 GParted 工具调整分区大小"></a>2. 使用 GParted 工具调整分区大小</h3><p>如果你有一个 Live CD 或 USB 镜像：</p><ol><li><p>使用 Live CD 启动系统，进入 GParted 工具。</p></li><li><p>选择目标磁盘（例如 <code>mmcblk1</code>），查看现有分区。</p></li><li><p>将 <code>mmcblk1p2</code> 缩小到合适的大小，释放 3GB 空间。</p></li><li><p>创建新的分区，格式化为 EXT4 或其他支持的文件系统，作为 <code>/www</code> 的新存储位置。</p></li><li><p>调整分区并挂载到 <code>/www</code>如果 GParted 不能使用，可以在 OpenWrt 中尝试 <code>fdisk</code> 工具，但操作较为复杂： </p></li><li><p><strong>使用 <code>fdisk</code> 缩小分区</strong> ：</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">fdisk <span class="hljs-regexp">/dev/mm</span>cblk1<br></code></pre></td></tr></table></div></figure><p>然后删除现有的 <code>mmcblk1p2</code>，并重新创建一个小一些的分区。</p><ol start="2"><li><strong>格式化新分区</strong> ：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5bsi5nmfcwb3cq"></i><span>AWK</span><div class="collapse show" id="collapse-5bsi5nmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs.ext4 <span class="hljs-regexp">/dev/mm</span>cblk1p3<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>挂载新分区到 <code>/www</code></strong> ：<br>创建目录并挂载：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fuem7mmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-fuem7mmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /www<br>mount /dev/mmcblk1p3 /www<br></code></pre></td></tr></table></div></figure><ol start="4"><li>更新 <code>fstab</code> 保持挂载编辑 <code>/etc/fstab</code> 文件，确保每次启动时 <code>/www</code> 都能自动挂载到新的分区。<br>请注意，调整分区操作非常危险，建议在备份数据的情况下进行。</li></ol><details>  <summary>我的-第十二问</summary><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i23vuimfcwb3cq"></i><span>TAP</span><div class="collapse show" id="collapse-i23vuimfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>[root@Kwrt:07:42 PM ~] <span class="hljs-comment"># curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; bash quick_start.sh</span><br>开始下载 1Panel v1.10.20-lts 版本在线安装包<br>安装包下载地址： https://resource.fit2cloud.com/1panel/package/stable/v1.10.20-lts/release/1panel-v1.10.20-lts-linux-armv7.tar.gz<br>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                 Dload  Upload   Total   Spent    Left  Speed<br> <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>  <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>  <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>--:--:-- --:--:-- --:--:-- <span class="hljs-number"> 0 </span>40.0M   <span class="hljs-number"> 0 </span>31873   <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span>  293k     <span class="hljs-number"> 0 </span> 0:02:19 --:--:--  0:02:19<span class="hljs-number"> 42 </span>40.0M  <span class="hljs-number"> 42 </span>16.9M   <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span> 15.1M     <span class="hljs-number"> 0 </span> 0:00:02  0:00:01  0:00:01<span class="hljs-number"> 43 </span>40.0M  <span class="hljs-number"> 43 </span>17.5M   <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 0 </span> 11.2M     <span class="hljs-number"> 0 </span> 0:00:03  0:00:01  0:00:02 11.2M<br>curl: (56) Failure writing output to destination, passed<span class="hljs-number"> 8174 </span>returned 0<br>Warning: Got more output options than URLs<br>1panel-v1.10.20-lts-linux-armv7/1panel.service<br>tar: can&#x27;t create directory &#x27;1panel-v1.10.20-lts-linux-armv7&#x27;: No space left on device<br>tar: can&#x27;t open &#x27;1panel-v1.10.20-lts-linux-armv7/1panel.service&#x27;: No such file or directory<br>下载安装包失败，请稍候重试。<br>[root@Kwrt:07:43 PM ~] <span class="hljs-comment"># df -h 你觉得要怎样才能装</span><br><br></code></pre></td></tr></table></div></figure>---AI第-12回答：--- <p>从错误信息来看，你的设备存储空间不足，导致无法解压和安装 <code>1Panel</code> 包。下面是几个可以解决空间不足问题的方法：</p><h3 id="1-清理系统缓存"><a href="#1-清理系统缓存" class="headerlink" title="1. 清理系统缓存"></a>1. 清理系统缓存</h3><p>通过清理缓存和临时文件，可能可以释放出一些空间：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i9qoxemfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-i9qoxemfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">opkg remove &lt;unused-package&gt;<br><span class="hljs-built_in">rm</span> -rf /tmp/*<br></code></pre></td></tr></table></div></figure><h3 id="2-使用外部存储来安装"><a href="#2-使用外部存储来安装" class="headerlink" title="2. 使用外部存储来安装"></a>2. 使用外部存储来安装</h3><p>如果系统支持外部存储（例如 USB 闪存或 SD 卡），你可以将安装目录转移到外部存储设备上：</p><ol><li><strong>插入外部存储并挂载</strong> ：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2dtcg9mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-2dtcg9mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /mnt/external<br>mount /dev/sdX1 /mnt/external  <span class="hljs-comment"># 根据实际设备名更改 sdX1</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>下载并安装到外部存储</strong> ：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-c9er6cmfcwb3cq"></i><span>AWK</span><div class="collapse show" id="collapse-c9er6cmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -sSL https:<span class="hljs-regexp">//</span>resource.fit2cloud.com<span class="hljs-regexp">/1panel/</span>package<span class="hljs-regexp">/quick_start.sh -o /m</span>nt<span class="hljs-regexp">/external/</span>quick_start.sh<br>bash <span class="hljs-regexp">/mnt/</span>external/quick_start.sh<br></code></pre></td></tr></table></div></figure><h3 id="3-重新分区（高级方法）"><a href="#3-重新分区（高级方法）" class="headerlink" title="3. 重新分区（高级方法）"></a>3. 重新分区（高级方法）</h3><p>如果设备的分区表中有未分配空间，可以尝试重新分区，并将新的分区挂载到需要的目录。不过这种方法可能会导致数据丢失，因此建议备份重要数据，谨慎操作。</p><details>  <summary>我的-第十三问</summary><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qn63uamfcwb3cq"></i><span>TAP</span><div class="collapse show" id="collapse-qn63uamfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>[root@Kwrt:07:45 PM ~] <span class="hljs-comment"># fdisk -l</span><br>Disk /dev/mmcblk1: 7.28 GiB,<span class="hljs-number"> 7818182656 </span>bytes,<span class="hljs-number"> 15269888 </span>sectors<br>Units: sectors of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>Sector size (logical/physical):<span class="hljs-number"> 512 </span>bytes /<span class="hljs-number"> 512 </span>bytes<br>I/O size (minimum/optimal):<span class="hljs-number"> 512 </span>bytes /<span class="hljs-number"> 512 </span>bytes<br>Disklabel type: dos<br>Disk identifier: 0x00002ceb<br><br>Device         Boot  Start      End  Sectors  Size Id Type<br>/dev/mmcblk1p1 *    <span class="hljs-number"> 32768 </span> <span class="hljs-number"> 557055 </span> <span class="hljs-number"> 524288 </span> 256M  e W95 FAT16 (LBA)<br>/dev/mmcblk1p2 *   <span class="hljs-number"> 557056 </span>15269887<span class="hljs-number"> 14712832 </span>   7G<span class="hljs-number"> 83 </span>Linux<br><br><br>Disk /dev/zram0:<span class="hljs-number"> 333 </span>MiB,<span class="hljs-number"> 349175808 </span>bytes,<span class="hljs-number"> 85248 </span>sectors<br>Units: sectors of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 4096 </span>=<span class="hljs-number"> 4096 </span>bytes<br>Sector size (logical/physical):<span class="hljs-number"> 4096 </span>bytes /<span class="hljs-number"> 4096 </span>bytes<br>I/O size (minimum/optimal): 409你觉得要怎样安装<br><br></code></pre></td></tr></table></div></figure>---AI第-13回答：--- <p>你的系统安装在 <code>/dev/mmcblk1</code> 上，目前总大小为 7.28 GB，并已分为两个分区： </p><ul><li><p><code>/dev/mmcblk1p1</code>：大小为 256MB，文件系统类型为 FAT16。</p></li><li><p><code>/dev/mmcblk1p2</code>：大小为 7GB，用于 Linux 系统的根分区。<br>当前根分区（<code>/dev/mmcblk1p2</code>）几乎已满，因此可以通过以下几种方式来腾出空间以完成安装：1. 清理 <code>/dev/mmcblk1p2</code> 分区中的不必要文件<br>可以尝试查找和删除占用较多空间的文件：</p></li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t9c5qmmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-t9c5qmmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找占用空间最多的文件夹</span><br><span class="hljs-built_in">du</span> -ah / | <span class="hljs-built_in">sort</span> -rh | <span class="hljs-built_in">head</span> -n 20<br></code></pre></td></tr></table></div></figure><p>然后删除一些不再需要的文件，或清理缓存和日志。<br>2. 将 <code>/dev/mmcblk1p1</code> 分区挂载到特定目录使用你的 256MB 的 FAT16 分区 <code>/dev/mmcblk1p1</code> 可能可以用来存放一些安装包或临时文件。可以将它挂载到一个特定目录，比如 <code>/mnt</code>，并在安装时使用这个目录。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5hthm6mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-5hthm6mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建挂载目录</span><br><span class="hljs-built_in">mkdir</span> /mnt/mmcblk1p1<br><span class="hljs-comment"># 挂载分区</span><br>mount /dev/mmcblk1p1 /mnt/mmcblk1p1<br></code></pre></td></tr></table></div></figure><p>然后可以将 <code>1Panel</code> 的安装包下载到 <code>/mnt/mmcblk1p1</code>，这样不会占用根分区空间。</p><h3 id="3-使用-zram-扩展临时存储（如可行）"><a href="#3-使用-zram-扩展临时存储（如可行）" class="headerlink" title="3. 使用 zram 扩展临时存储（如可行）"></a>3. 使用 zram 扩展临时存储（如可行）</h3><p>zram 已在系统中启用，可以将一些临时文件或缓存移至 zram。创建一个挂载点并将 <code>/tmp</code> 目录链接到 zram 分区：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ti20v8mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-ti20v8mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个目录用作 zram 缓存</span><br><span class="hljs-built_in">mkdir</span> /zram-cache<br><span class="hljs-comment"># 挂载 zram 到此目录</span><br>mount -t tmpfs -o size=200M tmpfs /zram-cache<br><span class="hljs-comment"># 链接 /tmp 到 zram</span><br><span class="hljs-built_in">ln</span> -s /zram-cache /tmp<br></code></pre></td></tr></table></div></figure><p>这样 <code>/tmp</code> 中的文件将存储到 zram，而不会占用主存储空间。</p><h3 id="4-扩展分区（如有未使用空间）"><a href="#4-扩展分区（如有未使用空间）" class="headerlink" title="4. 扩展分区（如有未使用空间）"></a>4. 扩展分区（如有未使用空间）</h3><p>如有其他未分配的存储空间，你可以考虑使用它来扩展 <code>/dev/mmcblk1p2</code> 分区，但需要先备份数据并使用专业工具调整分区。</p><details>  <summary>我的-第十四问</summary><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-54jab0mfcwb3cq"></i><span>AWK</span><div class="collapse show" id="collapse-54jab0mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>我能不能装到这个目录下<span class="hljs-regexp">/dev/mm</span>cblk1p2<br><br></code></pre></td></tr></table></div></figure>---AI第-14回答：--- <p>是的，你可以将安装包直接安装到 <code>/dev/mmcblk1p2</code> 分区的挂载目录 <code>/</code>，但是前提是要确保 <code>/dev/mmcblk1p2</code> 分区上有足够的可用空间。你可以通过以下步骤来确认并尝试安装：</p><h3 id="1-检查根分区空间"><a href="#1-检查根分区空间" class="headerlink" title="1. 检查根分区空间"></a>1. 检查根分区空间</h3><p>你已经查看过根分区（<code>/dev/mmcblk1p2</code>）的空间使用情况，当前的空间几乎已满。如果你决定将 1Panel 安装到这个分区，必须先释放一些空间。<br>你可以通过删除不必要的文件、清理缓存或卸载不常用的包来腾出空间。可以使用以下命令来查看占用最多空间的文件：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-625eummfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-625eummfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看根分区上占用最多空间的文件</span><br><span class="hljs-built_in">du</span> -ah / | <span class="hljs-built_in">sort</span> -rh | <span class="hljs-built_in">head</span> -n 20<br></code></pre></td></tr></table></div></figure><p>然后，你可以删除一些不需要的文件或清理日志缓存等。</p><h3 id="2-确认足够空间后，安装到根分区"><a href="#2-确认足够空间后，安装到根分区" class="headerlink" title="2. 确认足够空间后，安装到根分区"></a>2. 确认足够空间后，安装到根分区</h3><p>如果你已经确认根分区上有足够的空间，你可以继续安装。</p><p>首先，下载并解压 1Panel 的安装包：</p><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vjqq4tmfcwb3cq"></i><span>VIM</span><div class="collapse show" id="collapse-vjqq4tmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sSL https://resource.fit2cloud.<span class="hljs-keyword">com</span>/<span class="hljs-number">1</span>panel/package/quick_start.<span class="hljs-keyword">sh</span> -<span class="hljs-keyword">o</span> quick_start.<span class="hljs-keyword">sh</span><br>bash quick_start.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></div></figure><p>如果此时仍然报错显示没有空间，建议你清理更多不需要的文件，或使用其他分区（如 <code>/mnt/mmcblk1p1</code>）来安装。3. 使用 <code>/mnt</code> 或其他挂载点安装如果根分区没有足够空间，也可以选择将 <code>/dev/mmcblk1p1</code> 或其他空闲分区挂载到某个子目录（如 <code>/opt</code>），并将安装包下载到这个目录中，避免占用根分区。<br>例如：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dk7pkjmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-dk7pkjmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 挂载 /dev/mmcblk1p1 到 /mnt</span><br>mount /dev/mmcblk1p1 /mnt<br></code></pre></td></tr></table></div></figure><p>然后你可以将安装包下载并解压到 <code>/mnt</code> 目录。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li><p><strong>释放空间</strong> ：确保 <code>/dev/mmcblk1p2</code> 根分区上有足够的可用空间。</p></li><li><p><strong>安装到合适目录</strong> ：如果根分区空间不足，考虑使用其他分区（如 <code>/mnt/mmcblk1p1</code>）来安装。</p></li><li><p><strong>挂载分区</strong> ：使用挂载点来安装软件或存储临时文件。</p></li></ol><p>通过这些步骤，你应该可以顺利安装 1Panel 或其他软件包。</p><details>  <summary>我的-第十五问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-n2coz7mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-n2coz7mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>我能不能直接下载到刚才那个空间<br><br></code></pre></td></tr></table></figure>---AI第-15回答：--- <p>是的，你可以直接下载到刚才提到的 <code>/dev/mmcblk1p2</code> 分区的挂载目录 <code>/</code>，但是前提是确保该分区有足够的可用空间。如果根分区（<code>/dev/mmcblk1p2</code>）空间不足，你可能需要通过以下步骤来解决：1. <strong>确认根分区的可用空间</strong><br>从你的输出来看，根分区几乎已经满了（已使用 98%），这意味着你无法直接下载和安装更多文件。因此，首先需要确保根分区有足够的空闲空间。你可以通过删除不必要的文件或清理缓存来腾出空间。<br>2. <strong>释放空间</strong><br>你可以通过以下方式清理不必要的文件：</p><ul><li><strong>删除不需要的日志文件</strong> ：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除系统日志文件</span><br><span class="hljs-built_in">rm</span> -rf /var/log/*<br></code></pre></td></tr></table></div></figure><ul><li><strong>删除不再使用的包</strong> ：<br>如果你使用的是 <code>opkg</code> 包管理器，可以卸载不需要的包：</li></ul><figure class="highlight lua"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8dcaa1mfcwb3cq"></i><span>LUA</span><div class="collapse show" id="collapse-8dcaa1mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">opkg <span class="hljs-built_in">remove</span> &lt;<span class="hljs-built_in">package</span>-name&gt;<br></code></pre></td></tr></table></div></figure><ul><li><strong>清理缓存文件</strong> ：<br>清理下载缓存：</li></ul><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qh6vj8mfcwb3cq"></i><span>EBNF</span><div class="collapse show" id="collapse-qh6vj8mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">opkg clean</span><br></code></pre></td></tr></table></div></figure><ul><li><strong>查找占用空间的文件</strong> ：<br>使用 <code>du</code> 命令查看哪些文件占用了最多的空间：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8dm2f8mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-8dm2f8mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -ah / | <span class="hljs-built_in">sort</span> -rh | <span class="hljs-built_in">head</span> -n 20<br></code></pre></td></tr></table></div></figure><p>你可以删除不需要的文件或目录。<br>3. <strong>下载到空闲分区</strong> 如果你决定继续使用根分区，但根分区没有足够空间，你可以考虑将软件包下载到其他挂载目录（如 <code>/mnt/mmcblk1p1</code> 或 <code>/opt</code>），然后再将其解压或安装到 <code>/</code>。例如，如果你挂载了 <code>/dev/mmcblk1p1</code> 到 <code>/mnt</code>，你可以下载到这个目录：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1m7ztbmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-1m7ztbmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载到 /mnt</span><br><span class="hljs-built_in">cd</span> /mnt<br>curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh<br>bash quick_start.sh<br></code></pre></td></tr></table></div></figure><ol start="4"><li><strong>确保挂载点有足够空间</strong> 通过 <code>lsblk</code> 或 <code>df -h</code> 命令检查挂载目录 <code>/mnt</code> 或其他目录的可用空间。如果这些目录有足够的空间，可以选择将软件包解压到这些目录。</li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><p><strong>释放根分区空间</strong> ：清理不需要的文件和缓存。</p></li><li><p><strong>下载到其他分区</strong> ：如果根分区空间不足，可以将文件下载到其他挂载的分区（例如 <code>/mnt/mmcblk1p1</code>）。</p></li><li><p><strong>挂载其他目录</strong> ：如果需要，挂载其他分区到适当目录，避免根分区空间不足影响安装。</p></li></ul><p>如果你清理了足够的空间或使用其他分区来下载，应该可以成功安装 1Panel。</p><details>  <summary>我的-第十六问</summary><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-p33kzkmfcwb3cq"></i><span>VIM</span><div class="collapse show" id="collapse-p33kzkmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>你教我怎样改这行命令curl -sSL https://resource.fit2cloud.<span class="hljs-keyword">com</span>/<span class="hljs-number">1</span>panel/package/quick_start.<span class="hljs-keyword">sh</span> -<span class="hljs-keyword">o</span> quick_start.<span class="hljs-keyword">sh</span> &amp;&amp; bash quick_start.<span class="hljs-keyword">sh</span>才能下载到我这服务器的/dev/mmcblk1p2空间，并装在这个空间<br><br></code></pre></td></tr></table></div></figure>---AI第-16回答：--- <p>要把下载的文件存储到 <code>/dev/mmcblk1p2</code>（即挂载到 <code>/</code> 的分区）上，你可以使用 <code>curl</code> 命令直接指定下载路径，并确保文件被下载到该分区的空闲位置。假设你已经确认 <code>/dev/mmcblk1p2</code> 已经挂载到 <code>/</code> 并且该分区的空间足够，下面是你可以修改命令的方式：</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p><strong>确认目标挂载点</strong> ：<br>假设你的 <code>/dev/mmcblk1p2</code> 分区已经挂载到 <code>/</code> 目录，并且有足够的空间。你可以将文件直接下载到 <code>/</code> 目录或其他子目录（比如 <code>/opt</code> 或 <code>/mnt</code>）。</p></li><li><p><strong>修改 <code>curl</code> 下载路径</strong> ：<br>如果你想将文件下载到 <code>/</code> 目录或某个子目录（例如 <code>/opt</code>），可以修改 <code>curl</code> 命令中的下载路径。你可以通过以下步骤将下载的文件存储到目标目录并执行。</p></li></ol><h3 id="示例命令："><a href="#示例命令：" class="headerlink" title="示例命令："></a>示例命令：</h3><p>假设你想下载到 <code>/opt</code> 目录（如果 <code>/</code> 空间已满，你可以选择其他挂载点）：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8xx1v0mfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-8xx1v0mfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 确保目标目录存在（如果没有的话）</span><br><span class="hljs-built_in">mkdir</span> -p /opt/1panel<br><br><span class="hljs-comment"># 下载并解压到 /opt/1panel</span><br>curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh<br></code></pre></td></tr></table></div></figure><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ol><li><p><code>mkdir -p /opt/1panel</code>：创建一个目录 <code>/opt/1panel</code> 来存放下载的文件。如果你已经决定其他目录，可以替换路径。</p></li><li><p><code>curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh</code>：将安装脚本下载到 <code>/opt/1panel/quick_start.sh</code>。</p></li><li><p><code>bash /opt/1panel/quick_start.sh</code>：执行下载的脚本以进行安装。<br>检查 <code>/opt</code> 是否有足够的空间：在开始下载之前，确保 <code>/opt</code> 目录挂载的分区（即 <code>/dev/mmcblk1p2</code>）有足够的空间，可以通过 <code>df -h</code> 命令检查：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-m37dzjmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-m37dzjmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt<br></code></pre></td></tr></table></div></figure><p>如果 <code>/opt</code> 目录挂载的分区有足够的空间，应该能成功完成下载和安装。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><p><strong>下载路径</strong> ：你可以通过修改 <code>curl</code> 命令中的 <code>-o</code> 参数来指定下载文件的路径。</p></li><li><p><strong>安装路径</strong> ：确保安装脚本在正确的目录中执行，你可以修改路径使其安装在目标目录。</p></li></ul><p>如果你仍然有疑问或遇到问题，欢迎继续咨询！</p><details>  <summary>我的-第十七问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tq6ytkmfcwb3cq"></i><span>BASH</span><div class="collapse show" id="collapse-tq6ytkmfcwb3cq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>你一步一步教我，怎样挂到有空间的路径。我看不懂<br><br></code></pre></td></tr></table></figure>---AI第-17回答：--- <p>好的，我会一步一步地指导你如何将安装包挂载到有足够空间的目录，确保你的操作系统可以顺利安装软件包。我们会把它挂载到 <code>/dev/mmcblk1p2</code>（即你的 <code>/</code> 分区），并确保它有足够的空间来完成安装。第一步：检查 <code>/dev/mmcblk1p2</code> 的挂载情况和空间首先，确保 <code>/dev/mmcblk1p2</code> 分区已经挂载到你的文件系统，并且它有足够的空间。你可以通过以下命令查看所有分区的挂载情况和空间使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><p>输出示例：</p><figure class="highlight gradle"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6og3jlmfcwb3cr"></i><span>GRADLE</span><div class="collapse show" id="collapse-6og3jlmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Filesystem      <span class="hljs-keyword">Size</span>  Used Avail Use% Mounted on<br><span class="hljs-regexp">/dev/mm</span>cblk1p1   <span class="hljs-number">256</span>M  <span class="hljs-number">10</span>M  <span class="hljs-number">246</span>M   <span class="hljs-number">4</span>% <span class="hljs-regexp">/mnt/mm</span>cblk1p1<br><span class="hljs-regexp">/dev/mm</span>cblk1p2    <span class="hljs-number">7</span>G  <span class="hljs-number">3</span>G   <span class="hljs-number">4</span>G  <span class="hljs-number">43</span>% /<br></code></pre></td></tr></table></div></figure><p>在这个示例中，你可以看到 <code>/dev/mmcblk1p2</code> 挂载在根目录 <code>/</code> 上，并且该分区总大小为 7GB，剩余 4GB 空间。</p><h3 id="第二步：确认目标目录"><a href="#第二步：确认目标目录" class="headerlink" title="第二步：确认目标目录"></a>第二步：确认目标目录</h3><p>如果你的 <code>/dev/mmcblk1p2</code> 分区的空间充足，可以将下载的文件直接放到根目录 <code>/</code> 或者子目录下（比如 <code>/opt</code>）。<strong>确认有足够空间的目录：</strong><br>我们可以选择创建一个新的目录来存放下载文件。比如我们可以选择 <code>/opt</code> 目录来安装软件包。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ayyennmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-ayyennmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt<br></code></pre></td></tr></table></div></figure><p>这行命令会在 <code>/</code> 分区下创建一个名为 <code>opt</code> 的目录。如果该目录已经存在，命令会跳过。</p><h3 id="第三步：下载并安装软件包"><a href="#第三步：下载并安装软件包" class="headerlink" title="第三步：下载并安装软件包"></a>第三步：下载并安装软件包</h3><p>现在，我们已经确认了目标路径和分区的空间。接下来，我们将安装脚本下载到刚才创建的目录，并开始安装。</p><ol><li><strong>下载脚本到 <code>/opt</code> 目录</strong> ：</li></ol><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jqtasvmfcwb3cr"></i><span>VIM</span><div class="collapse show" id="collapse-jqtasvmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sSL https://resource.fit2cloud.<span class="hljs-keyword">com</span>/<span class="hljs-number">1</span>panel/package/quick_start.<span class="hljs-keyword">sh</span> -<span class="hljs-keyword">o</span> /<span class="hljs-keyword">opt</span>/quick_start.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></div></figure><p>解释：</p><ul><li><p><code>curl -sSL</code>：这部分命令用于下载文件。<code>-s</code> 表示静默模式，<code>-S</code> 用于显示错误，<code>-L</code> 表示如果遇到重定向则自动跟随。</p></li><li><p><code>-o /opt/quick_start.sh</code>：这是指定文件保存的路径和名称，即将安装脚本保存到 <code>/opt/quick_start.sh</code>。</p></li></ul><ol><li><strong>运行安装脚本</strong> ：</li></ol><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-djnkcfmfcwb3cr"></i><span>VIM</span><div class="collapse show" id="collapse-djnkcfmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">bash /<span class="hljs-keyword">opt</span>/quick_start.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></div></figure><p>这行命令会执行你刚才下载的安装脚本。它将会自动安装软件包。</p><h3 id="第四步：检查安装结果"><a href="#第四步：检查安装结果" class="headerlink" title="第四步：检查安装结果"></a>第四步：检查安装结果</h3><p>安装完成后，你可以检查安装是否成功，并查看软件的相关状态。如果脚本安装了服务，你可以用以下命令查看服务状态（假设服务名为 <code>1panel</code>）：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-h8y3rvmfcwb3cr"></i><span>APACHE</span><div class="collapse show" id="collapse-h8y3rvmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">systemctl</span> status <span class="hljs-number">1</span>panel<br></code></pre></td></tr></table></div></figure><p>如果服务安装成功，你应该会看到它的运行状态。</p><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ol><li><p><strong>确认目标分区</strong> ：通过 <code>df -h</code> 查看你的磁盘分区及其空间。</p></li><li><p><strong>创建目录</strong> ：使用 <code>mkdir -p /opt</code> 创建一个目录来存放下载的文件。</p></li><li><p><strong>下载并执行安装脚本</strong> ：使用 <code>curl</code> 命令将安装脚本下载到 <code>/opt</code>，并通过 <code>bash</code> 执行安装。</p></li></ol><p>如果在操作过程中遇到问题，随时告诉我，我会帮助你解决！</p><details>  <summary>我的-第十八问</summary><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ebwit5mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-ebwit5mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>我用这个命令<span class="hljs-built_in">df</span> -h看不到，要用全部硬盘的命令<br><br></code></pre></td></tr></table></div></figure>---AI第-18回答：--- <p>如果你希望查看所有硬盘的挂载情况以及空间使用情况，<code>df -h</code> 是查看已挂载文件系统空间的常用命令，但是它默认只会显示已经挂载的分区。如果你想查看包括所有硬盘在内的详细信息，可以使用以下命令之一：1. 使用 <code>lsblk</code> 查看所有硬盘和分区<code>lsblk</code> 命令列出所有的磁盘及其分区，未挂载的磁盘也会显示出来。它会显示磁盘的大小、类型、挂载点等信息。</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5ro500mfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-5ro500mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsblk</span><br></code></pre></td></tr></table></div></figure><p>这将列出所有磁盘设备的详细信息，包括磁盘分区的大小和挂载情况。例如：</p><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fjoeiumfcwb3cr"></i><span>TAP</span><div class="collapse show" id="collapse-fjoeiumfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">NAME         MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>mmcblk1      179:0   <span class="hljs-number"> 0 </span> 7.3G <span class="hljs-number"> 0 </span>disk<br>├─mmcblk1p1  179:1   <span class="hljs-number"> 0 </span> 256M <span class="hljs-number"> 0 </span>part /mnt/mmcblk1p1<br>└─mmcblk1p2  179:2   <span class="hljs-number"> 0 </span>   7G <span class="hljs-number"> 0 </span>part /<br>mmcblk1boot0 179:32  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk<br>mmcblk1boot1 179:64  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk<br>zram0        254:0   <span class="hljs-number"> 0 </span> 333M <span class="hljs-number"> 0 </span>disk [SWAP]<br></code></pre></td></tr></table></div></figure><ol start="2"><li>使用 <code>fdisk</code> 查看所有磁盘的分区表<code>fdisk -l</code> 命令可以列出系统中所有的磁盘和分区信息，包括未挂载的硬盘。</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8462e6mfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-8462e6mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fdisk -l</span><br></code></pre></td></tr></table></div></figure><p>这会列出所有磁盘和分区的详细信息。例如：</p><figure class="highlight python"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cp0f3zmfcwb3cr"></i><span>PYTHON</span><div class="collapse show" id="collapse-cp0f3zmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">Disk /dev/mmcblk1: <span class="hljs-number">7.28</span> GiB, <span class="hljs-number">7818182656</span> <span class="hljs-built_in">bytes</span>, <span class="hljs-number">15269888</span> sectors<br>Units: sectors of <span class="hljs-number">1</span> * <span class="hljs-number">512</span> = <span class="hljs-number">512</span> <span class="hljs-built_in">bytes</span><br>Sector size (logical/physical): <span class="hljs-number">512</span> <span class="hljs-built_in">bytes</span> / <span class="hljs-number">512</span> <span class="hljs-built_in">bytes</span><br>I/O size (minimum/optimal): <span class="hljs-number">512</span> <span class="hljs-built_in">bytes</span> / <span class="hljs-number">512</span> <span class="hljs-built_in">bytes</span><br>Disklabel <span class="hljs-built_in">type</span>: dos<br>Disk identifier: <span class="hljs-number">0x00002ceb</span><br><br>Device         Boot  Start      End  Sectors  Size Id <span class="hljs-type">Type</span><br>/dev/mmcblk1p1 *     <span class="hljs-number">32768</span>   <span class="hljs-number">557055</span>   <span class="hljs-number">524288</span>  256M  e W95 FAT16 (LBA)<br>/dev/mmcblk1p2 *    <span class="hljs-number">557056</span> <span class="hljs-number">15269887</span> <span class="hljs-number">14712832</span>    7G <span class="hljs-number">83</span> Linux<br></code></pre></td></tr></table></div></figure><ol start="3"><li>使用 <code>parted</code> 查看磁盘信息<code>parted</code> 是另一个查看磁盘分区的工具，可以提供比 <code>fdisk</code> 更友好的输出格式。</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zwsetumfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-zwsetumfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">parted -l</span><br></code></pre></td></tr></table></div></figure><p>这会列出所有磁盘的分区信息，并且显示分区的大小、文件系统类型等。</p><h3 id="4-查看所有磁盘的空间信息和挂载点"><a href="#4-查看所有磁盘的空间信息和挂载点" class="headerlink" title="4. 查看所有磁盘的空间信息和挂载点"></a>4. 查看所有磁盘的空间信息和挂载点</h3><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yikirgmfcwb3cr"></i><span>ADA</span><div class="collapse show" id="collapse-yikirgmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">df -h <span class="hljs-comment">--total</span><br></code></pre></td></tr></table></div></figure><p>这会显示所有已挂载文件系统的空间信息，并包括一个汇总（total）行，显示所有文件系统的总空间使用情况。</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li><p>使用 <code>lsblk</code> 查看磁盘和分区。</p></li><li><p>使用 <code>fdisk -l</code> 或 <code>parted -l</code> 查看磁盘的详细信息（包括未挂载的磁盘）。</p></li><li><p>使用 <code>df -h --total</code> 查看所有已挂载文件系统的空间和使用情况。</p></li></ul><p>这些命令能帮助你全面了解系统中的硬盘空间和挂载情况。如果你需要进一步操作或有疑问，请告诉我！</p><details>  <summary>我的-第十九问</summary><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ufk6rymfcwb3cr"></i><span>TAP</span><div class="collapse show" id="collapse-ufk6rymfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>[root@Kwrt:07:50 PM ~] <span class="hljs-comment"># lsblk</span><br>NAME         MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>mmcblk1      179:0   <span class="hljs-number"> 0 </span> 7.3G <span class="hljs-number"> 0 </span>disk <br>├─mmcblk1p1  179:1   <span class="hljs-number"> 0 </span> 256M <span class="hljs-number"> 0 </span>part /mnt/mmcblk1p1<br>└─mmcblk1p2  179:2   <span class="hljs-number"> 0 </span>   7G <span class="hljs-number"> 0 </span>part /opt/docker<br>                                      /<br>mmcblk1boot0 179:32  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk <br>mmcblk1boot1 179:64  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk <br>zram0        254:0   <span class="hljs-number"> 0 </span> 333M <span class="hljs-number"> 0 </span>disk [SWAP]<br>[root@Kwrt:07:51 PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-19回答：--- <p>根据 <code>lsblk</code> 输出，你的磁盘设备是 <code>/dev/mmcblk1</code>，并且它有两个分区： </p><ul><li><p><code>/dev/mmcblk1p1</code>，大小 256M，挂载在 <code>/mnt/mmcblk1p1</code></p></li><li><p><code>/dev/mmcblk1p2</code>，大小 7G，挂载在 <code>/opt/docker</code> 和 <code>/</code>（根目录）<br>你提到希望安装 1Panel 并将其安装在一个有足够空间的分区上。根据输出，<code>/dev/mmcblk1p2</code> 有 7GB 的空间，并且它同时挂载在根目录和 <code>/opt/docker</code>，看起来它有可用空间。要在 <code>/dev/mmcblk1p2</code> 上安装，你可以执行以下步骤：</p></li></ul><h4 id="1-创建一个新目录来安装应用"><a href="#1-创建一个新目录来安装应用" class="headerlink" title="1. 创建一个新目录来安装应用"></a>1. 创建一个新目录来安装应用</h4><p>首先，你需要在 <code>/dev/mmcblk1p2</code> 的挂载点创建一个目录，比如 <code>/opt/1panel</code>。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7gckvfmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-7gckvfmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/1panel<br></code></pre></td></tr></table></div></figure><h4 id="2-更改下载路径为新目录"><a href="#2-更改下载路径为新目录" class="headerlink" title="2. 更改下载路径为新目录"></a>2. 更改下载路径为新目录</h4><p>在下载脚本中，修改文件保存路径，指定保存到 <code>/opt/1panel</code> 目录。修改 <code>curl</code> 命令如下：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g2fo8mmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-g2fo8mmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh<br></code></pre></td></tr></table></div></figure><p>这个命令会下载 <code>quick_start.sh</code> 脚本并直接在 <code>/opt/1panel</code> 目录下执行。</p><h4 id="3-执行脚本"><a href="#3-执行脚本" class="headerlink" title="3. 执行脚本"></a>3. 执行脚本</h4><p>下载完脚本后，脚本会被保存到 <code>/opt/1panel</code> 目录，并且会直接执行安装过程。安装过程会将 1Panel 安装在指定目录下。</p><h4 id="4-确认空间"><a href="#4-确认空间" class="headerlink" title="4. 确认空间"></a>4. 确认空间</h4><p>安装完成后，你可以使用 <code>df -h</code> 命令来确认 <code>/opt/1panel</code> 是否有足够的空间，并确保安装成功。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-iy6ewrmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-iy6ewrmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt/1panel<br></code></pre></td></tr></table></div></figure><p>这会显示 <code>/opt/1panel</code> 目录所在分区的空间使用情况。</p><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><ol><li><p>创建一个目录 <code>/opt/1panel</code> 来存放安装文件。</p></li><li><p>修改下载命令，将文件下载到 <code>/opt/1panel</code> 目录。</p></li><li><p>运行脚本并确认安装。</p></li></ol><p>如果有任何问题，欢迎随时询问！</p><details>  <summary>我的-第二十问</summary><figure class="highlight ruby"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nu3arqmfcwb3cr"></i><span>RUBY</span><div class="collapse show" id="collapse-nu3arqmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><br>[root<span class="hljs-variable">@Kwrt</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">51</span> <span class="hljs-variable constant_">PM</span> ~] <span class="hljs-comment"># mkdir -p /opt/1panel</span><br>[root<span class="hljs-variable">@Kwrt</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">51</span> <span class="hljs-variable constant_">PM</span> ~] <span class="hljs-comment"># curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh</span><br>开始下载 1Panel v1.<span class="hljs-number">10.20</span>-lts 版本在线安装包<br>安装包下载地址： <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/resource.fit2cloud.com/</span>1panel/package/stable/v1.<span class="hljs-number">10.20</span>-lts/release/1panel-v1.<span class="hljs-number">10.20</span>-lts-linux-armv7.tar.gz<br>  % <span class="hljs-title class_">Total</span>    % <span class="hljs-title class_">Received</span> % <span class="hljs-title class_">Xferd</span>  <span class="hljs-title class_">Average</span> <span class="hljs-title class_">Speed</span>   <span class="hljs-title class_">Time</span>    <span class="hljs-title class_">Time</span>     <span class="hljs-title class_">Time</span>  <span class="hljs-title class_">Current</span><br>                                 <span class="hljs-title class_">Dload</span>  <span class="hljs-title class_">Upload</span>   <span class="hljs-title class_">Total</span>   <span class="hljs-title class_">Spent</span>    <span class="hljs-title class_">Left</span>  <span class="hljs-title class_">Speed</span><br>  <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>      <span class="hljs-number">0</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span> <span class="hljs-number">32</span> <span class="hljs-number">40</span>.0M   <span class="hljs-number">32</span> <span class="hljs-number">13</span>.0M    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>  <span class="hljs-number">18</span>.1M      <span class="hljs-number">0</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span> <span class="hljs-number">43</span> <span class="hljs-number">40</span>.0M   <span class="hljs-number">43</span> <span class="hljs-number">17</span>.5M    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>  <span class="hljs-number">18</span>.5M      <span class="hljs-number">0</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span> <span class="hljs-number">18</span>.5M<br><span class="hljs-symbol">curl:</span> (<span class="hljs-number">56</span>) <span class="hljs-title class_">Failure</span> writing output to destination, passed <span class="hljs-number">8156</span> returned <span class="hljs-number">4096</span><br><span class="hljs-title class_">Warning</span>: <span class="hljs-title class_">Got</span> more output options than <span class="hljs-title class_">URLs</span><br>1panel-v1.<span class="hljs-number">10.20</span>-lts-linux-armv7/1panel.service<br><span class="hljs-symbol">tar:</span> can<span class="hljs-string">&#x27;t create directory &#x27;</span>1panel-v1.<span class="hljs-number">10.20</span>-lts-linux-armv7<span class="hljs-string">&#x27;: No space left on device</span><br><span class="hljs-string">tar: can&#x27;</span>t open <span class="hljs-string">&#x27;1panel-v1.10.20-lts-linux-armv7/1panel.service&#x27;</span>: <span class="hljs-title class_">No</span> such file <span class="hljs-keyword">or</span> directory<br>下载安装包失败，请稍候重试。<br>[root<span class="hljs-variable">@Kwrt</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">51</span> <span class="hljs-variable constant_">PM</span> ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-20回答：--- <p>从你提供的错误信息来看，安装包在下载过程中失败，原因是“磁盘空间不足”（<code>No space left on device</code>）。虽然你已经将文件下载路径设置为 <code>/opt/1panel</code>，但似乎根目录 <code>/</code> 或 <code>/opt/docker</code> 的空间不足，导致无法完成文件解压和安装。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>你可以尝试以下方法：</p><ol><li>检查 <code>/</code> 根目录和 <code>/opt/docker</code> 的空间使用情况首先，使用 <code>df -h</code> 命令检查根目录和 <code>/opt/docker</code> 挂载点的磁盘使用情况，看看是否有足够的空间：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-147ptamfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-147ptamfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><p>查看输出，确认 <code>/</code> 根目录（以及 <code>/opt/docker</code>）的剩余空间是否足够安装文件。</p><h4 id="2-清理不必要的文件或卸载不需要的服务"><a href="#2-清理不必要的文件或卸载不需要的服务" class="headerlink" title="2. 清理不必要的文件或卸载不需要的服务"></a>2. 清理不必要的文件或卸载不需要的服务</h4><p>如果根目录或 <code>/opt/docker</code> 空间不足，可以考虑清理一些不必要的文件，释放空间，或者卸载不必要的服务： </p><ul><li>删除不需要的日志文件或临时文件：</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-b9j8s3mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-b9j8s3mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /var/log/*.<span class="hljs-built_in">log</span><br><span class="hljs-built_in">rm</span> -rf /tmp/*<br></code></pre></td></tr></table></div></figure><ul><li>清理 Docker 镜像和容器：</li></ul><figure class="highlight livecodeserver"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yfdzkrmfcwb3cr"></i><span>LIVECODESERVER</span><div class="collapse show" id="collapse-yfdzkrmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">docker <span class="hljs-keyword">system</span> prune -<span class="hljs-keyword">a</span><br></code></pre></td></tr></table></div></figure><ul><li>清理缓存：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dicw9zmfcwb3cr"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-dicw9zmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> clean<br></code></pre></td></tr></table></div></figure><h4 id="3-使用更大的存储空间"><a href="#3-使用更大的存储空间" class="headerlink" title="3. 使用更大的存储空间"></a>3. 使用更大的存储空间</h4><p>如果 <code>/opt/docker</code> 仍然有足够的空间，但根目录的空间不足，你可以尝试通过以下步骤将安装包直接下载到 <code>/opt/docker</code> 或 <code>/opt/1panel</code> 目录，而不是下载到根目录：</p><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xi4xxvmfcwb3cr"></i><span>VIM</span><div class="collapse show" id="collapse-xi4xxvmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -sSL https://resource.fit2cloud.<span class="hljs-keyword">com</span>/<span class="hljs-number">1</span>panel/package/quick_start.<span class="hljs-keyword">sh</span> -<span class="hljs-keyword">o</span> /<span class="hljs-keyword">opt</span>/docker/quick_start.<span class="hljs-keyword">sh</span> &amp;&amp; bash /<span class="hljs-keyword">opt</span>/docker/quick_start.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></div></figure><p>或者如果 <code>/opt/docker</code> 有空间，确保安装包和解压文件都放在该路径下。</p><h4 id="4-重新检查磁盘分区"><a href="#4-重新检查磁盘分区" class="headerlink" title="4. 重新检查磁盘分区"></a>4. 重新检查磁盘分区</h4><p>如果你发现磁盘空间依然不足，可以考虑重新调整分区大小或将安装位置移到更大的磁盘分区，或者扩展现有分区。</p><p>如果需要进一步帮助，请随时告知我！</p><details>  <summary>我的-第二十一问</summary><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-d4xd97mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-d4xd97mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[root@Kwrt:07:51 PM ~] <span class="hljs-comment"># df -h</span><br>Filesystem                Size      Used Available Use% Mounted on<br>/dev/root               971.3M    937.7M     17.6M  98% /<br>tmpfs                   500.5M      4.7M    495.8M   1% /tmp<br>tmpfs                   512.0K         0    512.0K   0% /dev<br>/dev/mmcblk1p1           16.0M     12.6M      3.3M  79% /mnt/mmcblk1p1<br>/dev/root               971.3M    937.7M     17.6M  98% /opt/docker<br>[root@Kwrt:07:52 PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-21回答：--- <p>从你提供的 <code>df -h</code> 输出结果来看，根目录 <code>/</code> 和 <code>/opt/docker</code> 分区的空间都非常紧张，根目录已经使用了 98% 的空间，只剩下 17.6MB 可用。而 <code>/opt/docker</code> 也是 98% 使用率，剩余空间同样较少。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li><strong>清理不必要的文件以释放空间</strong><br>你可以清理一些不必要的日志文件、临时文件或缓存，来释放更多的磁盘空间。以下是一些建议：</li></ol><ul><li><strong>清理日志文件：</strong></li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gu6r19mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-gu6r19mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /var/log/*.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></div></figure><p>清理所有的日志文件。</p><ul><li><strong>清理临时文件：</strong></li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yi0duumfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-yi0duumfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /tmp/*<br></code></pre></td></tr></table></div></figure><ul><li><strong>清理 Docker 镜像和容器：</strong></li></ul><figure class="highlight livecodeserver"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yjwd4vmfcwb3cr"></i><span>LIVECODESERVER</span><div class="collapse show" id="collapse-yjwd4vmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">docker <span class="hljs-keyword">system</span> prune -<span class="hljs-keyword">a</span><br></code></pre></td></tr></table></div></figure><ul><li><strong>清理安装包缓存：</strong><br>如果你使用的是基于 <code>apt</code> 的系统（如 Ubuntu&#x2F;Debian），可以使用以下命令清理缓存：</li></ul><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-evbq6lmfcwb3cr"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-evbq6lmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> clean<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>将安装目录移到更大空间的分区</strong> <code>/dev/mmcblk1p2</code> 是你较大的分区，容量为 7G，挂载在 <code>/opt/docker</code>，可以考虑将安装目录移到这个空间： </li><li><strong>创建目录</strong> （如果它还没有的话）：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3c6fz7mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-3c6fz7mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/1panel<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>重新下载和安装到该目录</strong> ：<br>将安装包下载到 <code>/opt/1panel</code> 目录：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-do4aywmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-do4aywmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh<br></code></pre></td></tr></table></div></figure><p>这样，文件将直接下载到有足够空间的 <code>/opt/1panel</code> 目录，而不是根目录，避免了空间不足的问题。3. <strong>扩展根分区</strong> 如果根分区 <code>/</code> 的空间总是不足，并且你希望释放更多空间，另一个选择是扩展根分区的大小。你可以使用工具如 <code>fdisk</code> 或 <code>gparted</code> 对磁盘进行分区调整，但这会更复杂一些，且需要小心操作，避免数据丢失。4. <strong>考虑增加外部存储</strong><br>如果根目录和现有分区的空间都无法满足需求，另一个方法是考虑通过外部存储设备（如 USB 驱动器、外部硬盘）来挂载到你的系统并将文件安装在外部存储上。</p><p>通过这些方法，你应该能解决空间不足的问题。如果还有疑问或操作中遇到问题，随时告诉我！</p><details>  <summary>我的-第二十二问</summary><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9k9ya0mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-9k9ya0mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>你不智能?刚才不是执行了这行命令？<span class="hljs-built_in">mkdir</span> -p /opt/1panel 为什还是不行？<br><br></code></pre></td></tr></table></div></figure>---AI第-22回答：--- <p>我明白你的疑问，问题的根源在于你当前的分区空间不足，虽然你创建了目录 <code>/opt/1panel</code>，但是安装包依然无法下载和解压，因为分区的可用空间已经不足以容纳下载的文件。从 <code>df -h</code> 命令的输出中，我们看到：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bawav5mfcwb3cr"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-bawav5mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/dev/root               <span class="hljs-number">971.</span>3M    <span class="hljs-number">937.</span>7M     <span class="hljs-number">17.</span>6M  <span class="hljs-number">98</span>% / <br><span class="hljs-regexp">/dev/</span>root               <span class="hljs-number">971.</span>3M    <span class="hljs-number">937.</span>7M     <span class="hljs-number">17.</span>6M  <span class="hljs-number">98</span>% <span class="hljs-regexp">/opt/</span>docker<br></code></pre></td></tr></table></div></figure><p>根分区 <code>/</code> 和 <code>/opt/docker</code> 共享了同一个空间，并且它们的空间几乎已满，这就是为什么无法在 <code>/opt/1panel</code> 下成功安装文件的原因。</p><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><ul><li><p><code>/dev/root</code> 分区几乎满了（剩余空间仅 17.6MB），即使你创建了目录 <code>/opt/1panel</code>，由于根分区的空间不足，系统仍然无法进行文件操作和安装。</p></li><li><p>你目前的目标是将 1Panel 安装到 <code>/opt/1panel</code> 下，但是 <code>/opt/1panel</code> 所在的 <code>/dev/root</code> 分区空间已经接近满载，导致安装失败。</p></li></ul><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li><strong>清理不必要的文件：</strong><br>清理 <code>/dev/root</code> 分区上不必要的文件，如日志文件、临时文件或 Docker 镜像等。释放一些空间，可能能让安装成功。</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rr1lp0mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-rr1lp0mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /var/log/*.<span class="hljs-built_in">log</span><br><span class="hljs-built_in">rm</span> -rf /tmp/*<br>docker system prune -a<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>确认 <code>/opt/1panel</code> 在正确的分区：</strong><br>确保 <code>/opt/1panel</code> 目录确实挂载在较大的 <code>/dev/mmcblk1p2</code> 分区上。如果 <code>/opt/1panel</code> 仍然挂载在根分区上，就会受根分区空间限制。<br>你可以通过以下命令检查挂载点和剩余空间：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-38io7xmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-38io7xmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><p>确保 <code>/opt</code> 或 <code>/opt/1panel</code> 挂载在 <code>/dev/mmcblk1p2</code> 上，并且该分区有足够空间。</p><ol start="3"><li><strong>重新挂载 <code>/opt</code> 到更大的分区：</strong> 如果你希望 <code>/opt/1panel</code> 存放在更大的 <code>/dev/mmcblk1p2</code> 分区上，你可以尝试重新挂载 <code>/opt</code> 目录：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3bbjkhmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-3bbjkhmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount --<span class="hljs-built_in">bind</span> /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><p>然后再尝试安装：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pnlezkmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-pnlezkmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/1panel<br>curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh<br></code></pre></td></tr></table></div></figure><p><strong>注</strong> ：这只是临时挂载，如果你希望永久挂载 <code>/opt</code>，需要在 <code>/etc/fstab</code> 文件中进行配置。</p><ol start="4"><li><strong>使用外部存储：</strong> 如果 <code>/dev/mmcblk1p2</code> 分区的空间还是不够，你也可以考虑将安装目录移动到外部存储设备（例如 USB 驱动器或外部硬盘）。确保外部存储已经挂载并有足够的空间，然后将安装包下载到外部存储上。</li></ol><h3 id="总结：-3"><a href="#总结：-3" class="headerlink" title="总结："></a>总结：</h3><p>你已经创建了目标目录 <code>/opt/1panel</code>，但由于根分区空间不足，安装无法成功。解决方案是清理不必要的文件或将安装目录移动到具有足够空间的分区（例如 <code>/dev/mmcblk1p2</code>）。如果需要进一步的帮助，随时告诉我！</p><details>  <summary>我的-第二十三问</summary><figure class="highlight autoit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3tb394mfcwb3cr"></i><span>AUTOIT</span><div class="collapse show" id="collapse-3tb394mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><br>[root<span class="hljs-symbol">@Kwrt</span>:<span class="hljs-number">07</span>:<span class="hljs-number">52</span> PM ~] <span class="hljs-meta"># sudo mount --bind /dev/mmcblk1p2 /opt</span><br>-bash: sudo: command <span class="hljs-literal">not</span> found<br>[root<span class="hljs-symbol">@Kwrt</span>:<span class="hljs-number">07</span>:<span class="hljs-number">54</span> PM ~] <span class="hljs-meta"># </span><br>[root<span class="hljs-symbol">@Kwrt</span>:<span class="hljs-number">07</span>:<span class="hljs-number">54</span> PM ~] <span class="hljs-meta">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-23回答：--- <p>看来你在使用的环境中没有安装 <code>sudo</code> 命令。不过，既然你已经以 root 用户登录，你可以直接执行挂载命令，不需要使用 <code>sudo</code>。</p><h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h3><p>直接执行以下命令，尝试将 <code>/opt</code> 目录绑定到 <code>/dev/mmcblk1p2</code> 分区：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-plfj3qmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-plfj3qmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount --<span class="hljs-built_in">bind</span> /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><p>此命令将 <code>/dev/mmcblk1p2</code> 挂载到 <code>/opt</code> 目录上，确保 <code>/opt</code> 目录使用的是有足够空间的分区。</p><h3 id="后续步骤："><a href="#后续步骤：" class="headerlink" title="后续步骤："></a>后续步骤：</h3><ol><li><strong>检查挂载情况：</strong><br>执行完挂载命令后，可以通过以下命令确认挂载是否成功：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-42qh0xmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-42qh0xmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><p>确保 <code>/opt</code> 目录现在已经挂载到了 <code>/dev/mmcblk1p2</code> 上，并且该分区有足够的可用空间。</p><ol start="2"><li><strong>继续安装 1Panel：</strong><br>现在，你可以再次尝试安装 1Panel：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-je0zcqmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-je0zcqmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/1panel<br>curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh<br></code></pre></td></tr></table></div></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li><p>这种挂载方式是临时的，重启后会失效。如果希望在每次启动时自动挂载 <code>/opt</code>，你需要修改 <code>/etc/fstab</code> 配置文件来实现持久挂载。</p></li><li><p>如果操作顺利完成，安装过程应该能够成功运行。</p></li></ul><p>如果遇到问题，欢迎继续提问！</p><details>  <summary>我的-第二十四问</summary><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-enwhnbmfcwb3cr"></i><span>VIM</span><div class="collapse show" id="collapse-enwhnbmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>[root@Kwr<span class="hljs-variable">t:07</span>:<span class="hljs-number">54</span> PM ~] # mount --bind /dev/mmcblk1p2 /<span class="hljs-keyword">opt</span><br>mount: /<span class="hljs-keyword">opt</span>: wrong fs <span class="hljs-built_in">type</span>, <span class="hljs-keyword">bad</span> option, <span class="hljs-keyword">bad</span> superblock <span class="hljs-keyword">on</span> /dev/mmcblk1p2, missing codepage <span class="hljs-built_in">or</span> helper program, <span class="hljs-built_in">or</span> other error.<br>       dmesg(<span class="hljs-number">1</span>) may have more information after failed mount <span class="hljs-built_in">system</span> <span class="hljs-keyword">call</span>.<br>[root@Kwr<span class="hljs-variable">t:07</span>:<span class="hljs-number">54</span> PM ~] #<br><br></code></pre></td></tr></table></div></figure>---AI第-24回答：--- <p>看到错误信息 <code>wrong fs type</code>，说明挂载命令无法成功执行，因为文件系统类型可能不匹配或者存在其他问题。我们可以通过以下步骤进行排查和修复：</p><h3 id="1-检查分区文件系统类型"><a href="#1-检查分区文件系统类型" class="headerlink" title="1. 检查分区文件系统类型"></a>1. 检查分区文件系统类型</h3><p>首先，需要检查 <code>/dev/mmcblk1p2</code> 分区的文件系统类型。可以使用 <code>lsblk -f</code> 命令查看每个分区的文件系统类型。</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-azp6qqmfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-azp6qqmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsblk -f</span><br></code></pre></td></tr></table></div></figure><p>这将显示各个分区的文件系统类型，比如 <code>ext4</code>、<code>vfat</code> 等。</p><h3 id="2-检查分区格式"><a href="#2-检查分区格式" class="headerlink" title="2. 检查分区格式"></a>2. 检查分区格式</h3><p>如果 <code>/dev/mmcblk1p2</code> 上的文件系统类型不是你想要的（例如，如果它是 <code>vfat</code> 或 <code>ntfs</code>，你可能需要格式化它为 <code>ext4</code>），可以使用以下命令来检查分区的文件系统信息：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t4nru7mfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-t4nru7mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">blkid <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><p>这会显示分区的文件系统类型和其他相关信息。</p><h3 id="3-格式化分区（如果需要）"><a href="#3-格式化分区（如果需要）" class="headerlink" title="3. 格式化分区（如果需要）"></a>3. 格式化分区（如果需要）</h3><p>如果 <code>/dev/mmcblk1p2</code> 的文件系统格式不正确，且你希望重新格式化为 <code>ext4</code> 文件系统，可以使用如下命令：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dyo659mfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-dyo659mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs.ext4 <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><p>请注意，这个命令会清除 <code>/dev/mmcblk1p2</code> 上的所有数据。如果此分区已经包含重要数据，请谨慎操作。</p><h3 id="4-挂载分区"><a href="#4-挂载分区" class="headerlink" title="4. 挂载分区"></a>4. 挂载分区</h3><p>一旦分区格式化完成，并且确认它使用了正确的文件系统（如 <code>ext4</code>），你可以尝试再次挂载：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vd9vzemfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-vd9vzemfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><p>如果挂载成功，使用 <code>df -h</code> 确认 <code>/opt</code> 已经挂载到了新的分区。</p><h3 id="5-检查-dmesg-输出"><a href="#5-检查-dmesg-输出" class="headerlink" title="5. 检查 dmesg 输出"></a>5. 检查 dmesg 输出</h3><p>如果挂载时仍然失败，可以查看 <code>dmesg</code> 命令输出的详细错误信息，以便更好地理解失败原因：</p><figure class="highlight 1c"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-faip9umfcwb3cr"></i><span>1C</span><div class="collapse show" id="collapse-faip9umfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dmesg <span class="hljs-string">| tail -n 20</span><br></code></pre></td></tr></table></div></figure><p>这会显示最后的 20 行内核日志，可能包含有关挂载失败的更多细节。</p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><ul><li><p>使用 <code>lsblk -f</code> 查看文件系统类型。</p></li><li><p>如果需要，使用 <code>mkfs.ext4</code> 格式化分区为 <code>ext4</code>。</p></li><li><p>挂载成功后，继续执行你的安装过程。</p></li></ul><p>如果遇到任何问题或不清楚如何继续，请随时告诉我！</p><details>  <summary>我的-第二十五问</summary><figure class="highlight ruby"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fvrhikmfcwb3cr"></i><span>RUBY</span><div class="collapse show" id="collapse-fvrhikmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><br>[root<span class="hljs-variable">@Kwrt</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">54</span> <span class="hljs-variable constant_">PM</span> ~] <span class="hljs-comment"># lsblk -f</span><br><span class="hljs-variable constant_">NAME</span> <span class="hljs-variable constant_">FSTYPE</span> <span class="hljs-variable constant_">FSVER</span> <span class="hljs-variable constant_">LABEL</span>  <span class="hljs-variable constant_">UUID</span>                                 <span class="hljs-variable constant_">FSAVAIL</span> <span class="hljs-variable constant_">FSUSE</span>% <span class="hljs-variable constant_">MOUNTPOINTS</span><br>mmcblk1<br>                                                                             <br>├─mmcblk1p1<br>│    vfat                <span class="hljs-number">6706</span>-<span class="hljs-variable constant_">E94B</span>                               <span class="hljs-number">3</span>.3M    <span class="hljs-number">79</span>% <span class="hljs-regexp">/mnt/mmcblk</span>1p1<br>└─mmcblk1p2<br>     ext4         rootfs ff313567-e9f1-5a5d-<span class="hljs-number">9895</span>-3ba130b4a864   <span class="hljs-number">17</span>.6M    <span class="hljs-number">97</span>% <span class="hljs-regexp">/opt/docker</span><br>                                                                             /<br>mmcblk1boot0<br>                                                                             <br>mmcblk1boot1<br>                                                                             <br>zram0<br>     swap                                                                    [<span class="hljs-variable constant_">SWAP</span>]<br>[root<span class="hljs-variable">@Kwrt</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">54</span> <span class="hljs-variable constant_">PM</span> ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-25回答：--- <p>从 <code>lsblk -f</code> 输出中，我们看到 <code>/dev/mmcblk1p2</code> 的文件系统类型是 <code>ext4</code>，并且它已经挂载在 <code>/</code> 和 <code>/opt/docker</code> 上。由于该分区已被用于根文件系统（<code>/</code>）和 <code>/opt/docker</code>，因此无法再挂载到 <code>/opt</code> 目录。</p><h3 id="解决方案：-3"><a href="#解决方案：-3" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li><strong>重新挂载 <code>/dev/mmcblk1p2</code> 到 <code>/opt</code> 目录</strong> ：如果你想将 <code>/dev/mmcblk1p2</code> 用于其他目的，可以卸载 <code>/opt/docker</code> 并重新挂载分区。例如：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-b0bue0mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-b0bue0mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">umount /opt/docker<br>mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><p>然后，再次使用 <code>df -h</code> 检查是否成功挂载。</p><ol start="2"><li><p><strong>如果 <code>/opt/docker</code> 必须挂载为 <code>/opt</code> 的一部分</strong> ：如果 <code>/opt/docker</code> 是必要的，而你需要将其他内容放到 <code>/opt</code> 中，您可能需要扩大现有的分区，或者将 <code>/opt</code> 分配给其他存储设备。<strong>扩展分区</strong> 的操作是比较复杂的，并且可能会导致数据丢失，因此在执行任何操作之前，请确保您已经备份了所有重要数据。</p></li><li><p><strong>分配新的存储空间</strong> ：如果 <code>/dev/mmcblk1p2</code> 已经非常接近满，考虑使用新的分区或者扩展已有分区来获取更多可用空间。<br>如果你选择第一个选项，即卸载 <code>/opt/docker</code>，你可以尝试下载和安装1Panel到 <code>/opt</code>。</p></li></ol><details>  <summary>我的-第二十六问</summary><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1ldnpqmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-1ldnpqmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[root@Kwrt:07:55 PM ~] <span class="hljs-comment"># df -h</span><br>Filesystem                Size      Used Available Use% Mounted on<br>/dev/root               971.3M    937.7M     17.6M  98% /<br>tmpfs                   500.5M      4.7M    495.8M   1% /tmp<br>tmpfs                   512.0K         0    512.0K   0% /dev<br>/dev/mmcblk1p1           16.0M     12.6M      3.3M  79% /mnt/mmcblk1p1<br><span class="hljs-built_in">df</span>: /opt/docker: No such file or directory<br>/dev/mmcblk1p2          971.3M    937.7M     17.6M  98% /opt<br>[root@Kwrt:07:56 PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-26回答：--- <p>看起来你已经成功将 <code>/dev/mmcblk1p2</code> 挂载到了 <code>/opt</code> 目录，因为现在 <code>/opt</code> 显示出它的容量信息，并且有可用空间。接下来，您可以尝试继续下载和安装 <code>1Panel</code> 到 <code>/opt</code> 目录：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qzzul8mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-qzzul8mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/1panel<br>curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh<br></code></pre></td></tr></table></div></figure><p>通过这种方式，<code>1Panel</code> 应该会安装到 <code>/opt/1panel</code> 目录下。如果出现任何问题，或者 <code>1Panel</code> 安装不成功，请继续查看相关的错误信息，并让我知道，我可以帮助你进行进一步的调试。</p><details>  <summary>我的-第二十七问</summary><figure class="highlight ruby"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lyonsqmfcwb3cr"></i><span>RUBY</span><div class="collapse show" id="collapse-lyonsqmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><br>[root<span class="hljs-variable">@Kwrt</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">56</span> <span class="hljs-variable constant_">PM</span> ~] <span class="hljs-comment"># curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh</span><br>开始下载 1Panel v1.<span class="hljs-number">10.20</span>-lts 版本在线安装包<br>安装包下载地址： <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/resource.fit2cloud.com/</span>1panel/package/stable/v1.<span class="hljs-number">10.20</span>-lts/release/1panel-v1.<span class="hljs-number">10.20</span>-lts-linux-armv7.tar.gz<br>  % <span class="hljs-title class_">Total</span>    % <span class="hljs-title class_">Received</span> % <span class="hljs-title class_">Xferd</span>  <span class="hljs-title class_">Average</span> <span class="hljs-title class_">Speed</span>   <span class="hljs-title class_">Time</span>    <span class="hljs-title class_">Time</span>     <span class="hljs-title class_">Time</span>  <span class="hljs-title class_">Current</span><br>                                 <span class="hljs-title class_">Dload</span>  <span class="hljs-title class_">Upload</span>   <span class="hljs-title class_">Total</span>   <span class="hljs-title class_">Spent</span>    <span class="hljs-title class_">Left</span>  <span class="hljs-title class_">Speed</span><br>  <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>      <span class="hljs-number">0</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span> <span class="hljs-number">13</span> <span class="hljs-number">40</span>.0M   <span class="hljs-number">13</span> 5622k    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>  <span class="hljs-number">15</span>.3M      <span class="hljs-number">0</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span> --<span class="hljs-symbol">:--</span><span class="hljs-symbol">:--</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span> <span class="hljs-number">43</span> <span class="hljs-number">40</span>.0M   <span class="hljs-number">43</span> <span class="hljs-number">17</span>.5M    <span class="hljs-number">0</span>     <span class="hljs-number">0</span>  <span class="hljs-number">13</span>.9M      <span class="hljs-number">0</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">02</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">01</span>  <span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">01</span> <span class="hljs-number">13</span>.9M<br><span class="hljs-symbol">curl:</span> (<span class="hljs-number">56</span>) <span class="hljs-title class_">Failure</span> writing output to destination, passed <span class="hljs-number">8174</span> returned <span class="hljs-number">5584</span><br><span class="hljs-title class_">Warning</span>: <span class="hljs-title class_">Got</span> more output options than <span class="hljs-title class_">URLs</span><br>1panel-v1.<span class="hljs-number">10.20</span>-lts-linux-armv7/1panel.service<br><span class="hljs-symbol">tar:</span> can<span class="hljs-string">&#x27;t create directory &#x27;</span>1panel-v1.<span class="hljs-number">10.20</span>-lts-linux-armv7<span class="hljs-string">&#x27;: No space left on device</span><br><span class="hljs-string">tar: can&#x27;</span>t open <span class="hljs-string">&#x27;1panel-v1.10.20-lts-linux-armv7/1panel.service&#x27;</span>: <span class="hljs-title class_">No</span> such file <span class="hljs-keyword">or</span> directory<br>下载安装包失败，请稍候重试。<br>[root<span class="hljs-variable">@Kwrt</span><span class="hljs-symbol">:</span><span class="hljs-number">07</span><span class="hljs-symbol">:</span><span class="hljs-number">56</span> <span class="hljs-variable constant_">PM</span> ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-27回答：--- <p>根据输出信息来看，虽然你将 <code>/dev/mmcblk1p2</code> 成功挂载到了 <code>/opt</code> 目录，但安装包下载仍然失败，显示没有足够的空间。<br>检查一下问题可能出在两个方面：</p><ol><li><p><strong>挂载的目录空间问题</strong> ：虽然 <code>/opt</code> 挂载到了 <code>/dev/mmcblk1p2</code>，但 <code>/opt/docker</code> 显示它的空间已经几乎满了（98% 使用）。这可能导致安装时出现空间不足的错误。</p></li><li><p><strong>磁盘使用情况</strong> ：使用 <code>df -h</code> 命令检查的 <code>/opt</code> 目录已经满了，因此需要确保在安装之前有足够的空间来解压安装包。</p></li></ol><h3 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h3><ol><li><p><strong>检查并释放空间</strong> ：你可以尝试清理 <code>/opt/docker</code> 目录中不需要的文件，或者将 <code>/opt/docker</code> 目录移到其他具有更大空间的分区。</p></li><li><p><strong>检查 <code>/opt/1panel</code> 目录的剩余空间</strong> ：<br>确认挂载 <code>/dev/mmcblk1p2</code> 后， <code>/opt/1panel</code> 目录内是否仍有足够空间。你可以用以下命令来确认：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vyowy6mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-vyowy6mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt<br></code></pre></td></tr></table></div></figure><p>如果空间不足，尝试将安装包存储在其他空间较大的位置。</p><ol start="3"><li><strong>将 <code>/opt/docker</code> 移动到其他目录</strong> ：<br>  如果 <code>/opt/docker</code> 目录不再需要，或者可以暂时移动，可以考虑将其内容移到 <code>/dev/mmcblk1p2</code> 中的另一个空闲目录。</li></ol><ul><li>假如你可以将 <code>/opt/docker</code> 中的内容移动到其他分区或硬盘上，可以使用下面的命令：</li></ul><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-205655mfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-205655mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/opt/</span>docker<span class="hljs-regexp">/* /</span>opt<span class="hljs-regexp">/1panel/</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li><strong>尝试分配更多空间</strong> ：<br>如果其他方法都不可行，可能需要重新分配磁盘空间或使用更大的存储设备来安装该软件。</li></ol><p>再次检查磁盘空间，确保足够后重新运行安装命令。</p><details>  <summary>我的-第二十八问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-061ttumfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-061ttumfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>现在我把这个Docker删除了。怎样分配那个空间到有用的地方》？<br><br></code></pre></td></tr></table></figure>---AI第-28回答：--- <p>好的，现在我们来将原来给 Docker 的空间重新分配给 <code>/opt</code>。在删除 Docker 后，确保 <code>/opt</code> 有足够的空间来安装你的软件。以下是重新分配空间的步骤：</p><h3 id="1-删除-Docker-内容并清理空间"><a href="#1-删除-Docker-内容并清理空间" class="headerlink" title="1. 删除 Docker 内容并清理空间"></a>1. 删除 Docker 内容并清理空间</h3><p>1.1 确认 Docker 已卸载并删除了相关文件和目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /opt/docker<br></code></pre></td></tr></table></div></figure><p>1.2 使用 <code>df -h</code> 检查 <code>/opt</code> 是否释放了空间：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rea014mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-rea014mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt<br></code></pre></td></tr></table></div></figure><ol start="2"><li>使用 <code>mount</code> 命令挂载空间你已经将 <code>/dev/mmcblk1p2</code> 挂载到了 <code>/opt</code>。由于删除了 Docker 数据，现在可以直接使用这个空间进行安装。3. 安装 1Panel 软件到 <code>/opt</code><br>3.1 创建安装目录：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4ge986mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-4ge986mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /opt/1panel<br></code></pre></td></tr></table></div></figure><p>3.2 下载并运行安装脚本到 <code>/opt/1panel</code> 目录中：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ancko4mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-ancko4mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o /opt/1panel/quick_start.sh &amp;&amp; bash /opt/1panel/quick_start.sh<br></code></pre></td></tr></table></div></figure><h3 id="4-确保挂载持久化（可选）"><a href="#4-确保挂载持久化（可选）" class="headerlink" title="4. 确保挂载持久化（可选）"></a>4. 确保挂载持久化（可选）</h3><p>如果重新启动后希望 <code>/dev/mmcblk1p2</code> 自动挂载到 <code>/opt</code>，可以编辑 <code>/etc/fstab</code> 文件： </p><ol><li>编辑 <code>/etc/fstab</code> 文件：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wka8whmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-wka8whmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></div></figure><ol start="2"><li>添加以下内容，将 <code>/dev/mmcblk1p2</code> 持久化挂载到 <code>/opt</code>：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4zn4i0mfcwb3cr"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-4zn4i0mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/dev/mmcblk1p2  /opt  ext4  defaults  0  2<br></code></pre></td></tr></table></div></figure><ol start="3"><li>保存并退出，然后重启验证是否挂载成功</li></ol><details>  <summary>我的-第二十九问</summary><figure class="highlight coffeescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o3i95amfcwb3cr"></i><span>COFFEESCRIPT</span><div class="collapse show" id="collapse-o3i95amfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">05</span> PM ~] <span class="hljs-comment"># df -h /opt</span><br>Filesystem                Size      Used Available Use% Mounted <span class="hljs-literal">on</span><br><span class="hljs-regexp">/dev/root               971.3M    745.1M    210.2M  78% /</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">05</span> PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-29回答：--- <p>从输出来看，<code>/opt</code> 目前仍然挂载在根分区 (<code>/dev/root</code>)，并没有使用到 <code>/dev/mmcblk1p2</code> 的空间。要确保 <code>/opt</code> 使用的是 <code>/dev/mmcblk1p2</code>，我们可以重新挂载 <code>/dev/mmcblk1p2</code> 到 <code>/opt</code>，并确保数据路径正确。以下是具体步骤：1. 卸载当前 <code>/opt</code> 的挂载首先，需要卸载当前的 <code>/opt</code>，然后重新挂载为 <code>/dev/mmcblk1p2</code>。</p><figure class="highlight armasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xbuoxrmfcwb3cr"></i><span>ARMASM</span><div class="collapse show" id="collapse-xbuoxrmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">umount</span> /<span class="hljs-meta">opt</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>检查并确认 <code>/opt</code> 已经卸载确认 <code>/opt</code> 没有挂载在根分区上：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fr12aamfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-fr12aamfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt<br></code></pre></td></tr></table></div></figure><p>此命令应该返回一个错误或空结果，表示 <code>/opt</code> 已卸载。3. 挂载 <code>/dev/mmcblk1p2</code> 到 <code>/opt</code>使用以下命令，将 <code>/dev/mmcblk1p2</code> 挂载到 <code>/opt</code>：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-52kim1mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-52kim1mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><h3 id="4-验证挂载结果"><a href="#4-验证挂载结果" class="headerlink" title="4. 验证挂载结果"></a>4. 验证挂载结果</h3><p>再次查看 <code>/opt</code> 的挂载情况，确保其来自 <code>/dev/mmcblk1p2</code>：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zalpevmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-zalpevmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt<br></code></pre></td></tr></table></div></figure><h3 id="5-确保挂载持久化（可选）"><a href="#5-确保挂载持久化（可选）" class="headerlink" title="5. 确保挂载持久化（可选）"></a>5. 确保挂载持久化（可选）</h3><p>要在重启后仍然保留挂载设置，可以编辑 <code>/etc/fstab</code> 文件： </p><ol><li>打开 <code>/etc/fstab</code> 文件：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-x003ktmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-x003ktmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></div></figure><ol start="2"><li>添加以下行：</li></ol><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5xy3dlmfcwb3cr"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-5xy3dlmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/dev/mmcblk1p2  /opt  ext4  defaults  0  2<br></code></pre></td></tr></table></div></figure><ol start="3"><li>保存并退出。<br>完成后，你可以重新尝试在 <code>/opt</code> 安装 1Panel。</li></ol><details>  <summary>我的-第三十问</summary><figure class="highlight"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-80ar0amfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-80ar0amfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>怎样查看所有盘<br><br></code></pre></td></tr></table></figure>---AI第-30回答：--- <p>可以使用以下几种常见方法查看系统中的所有磁盘信息：</p><ol><li>使用 <code>lsblk``lsblk</code> 会列出所有块设备，包括磁盘和分区信息。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">lsblk -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></div></figure><p>这会显示所有设备，包括挂载点和文件系统类型。<br>2. 使用 <code>fdisk -l``fdisk -l</code> 命令列出所有磁盘的分区信息，适用于具有 root 权限的用户。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5fafaumfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-5fafaumfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fdisk -l<br></code></pre></td></tr></table></div></figure><p>这会显示每个磁盘的详细信息，包括大小、分区类型和文件系统。<br>3. 使用 <code>df -h``df -h</code> 显示所有已挂载的文件系统及其磁盘使用情况。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-unsreomfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-unsreomfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><ol start="4"><li>使用 <code>parted``parted</code> 可以显示磁盘分区信息。</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8xovrzmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-8xovrzmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> parted -l<br></code></pre></td></tr></table></div></figure><ol start="5"><li>使用 <code>ls /dev</code>可以列出 <code>/dev</code> 目录中的设备文件，通常磁盘和分区以 <code>sd*</code> 或 <code>mmcblk*</code> 格式命名。</li></ol><figure class="highlight coq"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zp3w3jmfcwb3cr"></i><span>COQ</span><div class="collapse show" id="collapse-zp3w3jmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">ls /dev | <span class="hljs-type">grep</span> -E &#x27;sd|<span class="hljs-type">hd</span>|<span class="hljs-type">vd</span>|<span class="hljs-type">nvme</span>|<span class="hljs-type">mmcblk</span>&#x27;<br></code></pre></td></tr></table></div></figure><p>这些命令可以帮助你全面了解系统中的所有磁盘和分区情况。</p><details>  <summary>我的-第三十一问</summary><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hp4mgimfcwb3cr"></i><span>TAP</span><div class="collapse show" id="collapse-hp4mgimfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>[root@Kwrt:08:06 PM ~] <span class="hljs-comment"># lsblk -a</span><br>NAME         MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>loop0          7:0   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>loop1          7:1   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>loop2          7:2   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>loop3          7:3   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>loop4          7:4   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>loop5          7:5   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>loop6          7:6   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>loop7          7:7   <span class="hljs-number"> 0 </span>   0B <span class="hljs-number"> 0 </span>loop <br>mmcblk1      179:0   <span class="hljs-number"> 0 </span> 7.3G <span class="hljs-number"> 0 </span>disk <br>├─mmcblk1p1  179:1   <span class="hljs-number"> 0 </span> 256M <span class="hljs-number"> 0 </span>part /mnt/mmcblk1p1<br>└─mmcblk1p2  179:2   <span class="hljs-number"> 0 </span>   7G <span class="hljs-number"> 0 </span>part /opt<br>                                      /mnt/mmcblk1p1<br>                                      /opt/docker<br>                                      /<br>mmcblk1boot0 179:32  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk <br>mmcblk1boot1 179:64  <span class="hljs-number"> 0 </span>   4M <span class="hljs-number"> 1 </span>disk <br>zram0        254:0   <span class="hljs-number"> 0 </span> 333M <span class="hljs-number"> 0 </span>disk [SWAP]<br>[root@Kwrt:08:07 PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-31回答：--- <p>从输出来看，当前的存储设备包括：</p><ol><li><strong>主存储设备 <code>/dev/mmcblk1</code></strong> ，大小为 7.3 GB：</li></ol><ul><li><p><strong>分区 <code>/dev/mmcblk1p1</code></strong> ，大小 256 MB，挂载在 <code>/mnt/mmcblk1p1</code>。</p></li><li><p><strong>分区 <code>/dev/mmcblk1p2</code></strong> ，大小 7 GB，挂载在 <code>/opt</code>、<code>/mnt/mmcblk1p1</code>、<code>/opt/docker</code> 和根目录 <code>/</code> 上，这可能会导致空间冲突。</p></li></ul><ol start="2"><li><p><strong>两个 4 MB 的引导分区</strong> ，分别为 <code>/dev/mmcblk1boot0</code> 和 <code>/dev/mmcblk1boot1</code>，当前未使用。</p></li><li><p><strong><code>zram0</code> 分区</strong> ，大小为 333 MB，用作交换内存 <code>[SWAP]</code>。<br>整理 <code>/dev/mmcblk1p2</code> 的挂载点<code>/dev/mmcblk1p2</code> 被多次挂载在不同目录，建议清理无关挂载点，保证它只挂载在你需要的路径上，例如 <code>/opt</code>。</p></li></ol><h4 id="解除无用挂载点的操作步骤"><a href="#解除无用挂载点的操作步骤" class="headerlink" title="解除无用挂载点的操作步骤"></a>解除无用挂载点的操作步骤</h4><ol><li><strong>解除无用挂载点</strong> ：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-eezm79mfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-eezm79mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">umount <span class="hljs-regexp">/mnt/mm</span>cblk1p1<br>umount <span class="hljs-regexp">/opt/</span>docker<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>确保 <code>/opt</code> 是 <code>/dev/mmcblk1p2</code> 唯一的挂载点</strong> 。<br>这样可以避免多次挂载带来的空间冲突，确保安装程序能够正确使用 <code>/opt</code> 的可用空间。</li></ol><details>  <summary>我的-第三十二问</summary><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yfzynlmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-yfzynlmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[root@Kwrt:08:08 PM ~] <span class="hljs-comment"># df -h</span><br>Filesystem                Size      Used Available Use% Mounted on<br>/dev/root               971.3M    745.1M    210.2M  78% /<br>tmpfs                   500.5M      4.7M    495.8M   1% /tmp<br>tmpfs                   512.0K         0    512.0K   0% /dev<br>/dev/mmcblk1p1           16.0M     12.6M      3.3M  79% /mnt/mmcblk1p1<br><span class="hljs-built_in">df</span>: /opt/docker: No such file or directory<br>/dev/mmcblk1p2          971.3M    745.1M    210.2M  78% /opt<br>[root@Kwrt:08:08 PM ~] <span class="hljs-comment">#  为什么可用空间还是没出现？</span><br><br></code></pre></td></tr></table></div></figure>---AI第-32回答：--- <p>从你的 <code>df -h</code> 输出来看，<code>/dev/mmcblk1p2</code> 的大小仍然显示为 971.3 MB，并没有显示整个 7 GB。当前问题可能是根文件系统（<code>/dev/root</code>）仍然占用了主要的空间，而未能正确识别 <code>/dev/mmcblk1p2</code> 的完整容量。</p><h3 id="可能的解决方法"><a href="#可能的解决方法" class="headerlink" title="可能的解决方法"></a>可能的解决方法</h3><ol><li><strong>检查并重新挂载分区</strong> ：<br>重新挂载 <code>/dev/mmcblk1p2</code>，确保系统可以识别它的完整空间：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sygk5smfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-sygk5smfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">umount /opt<br>mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>检查文件系统</strong> ：<br>如果重新挂载仍然显示不正确的大小，可能需要检查文件系统是否有问题。可以使用 <code>fsck</code> 检查和修复文件系统：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a39upfmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-a39upfmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">fsck.ext4 <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><p>注意：<code>fsck</code> 命令会修复文件系统中的错误，在执行前请确保没有重要数据丢失风险。</p><ol start="3"><li><strong>格式化并重新分配</strong> （如果不介意丢失数据）：<br>如果 <code>/dev/mmcblk1p2</code> 没有重要数据，也可以选择重新格式化分区，再挂载：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zpq8h9mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-zpq8h9mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/mmcblk1p2<br>mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><p>这将清空分区并确保整个 7 GB 可用。</p><details>  <summary>我的-第三十三问</summary><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jh7y15mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-jh7y15mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>/dev/mmcblk1p2 is mounted; will not make a filesystem here!<br>[root@Kwrt:08:09 PM ~] <span class="hljs-comment"># mount /dev/mmcblk1p2 /opt</span><br>[root@Kwrt:08:09 PM ~] <span class="hljs-comment"># </span><br>[root@Kwrt:08:09 PM ~] <span class="hljs-comment"># df -h</span><br>Filesystem                Size      Used Available Use% Mounted on<br>/dev/root               971.3M    745.1M    210.2M  78% /<br>tmpfs                   500.5M      4.7M    495.8M   1% /tmp<br>tmpfs                   512.0K         0    512.0K   0% /dev<br>/dev/mmcblk1p1           16.0M     12.6M      3.3M  79% /mnt/mmcblk1p1<br><span class="hljs-built_in">df</span>: /opt/docker: No such file or directory<br>/dev/mmcblk1p2          971.3M    745.1M    210.2M  78% /opt<br>/dev/mmcblk1p2          971.3M    745.1M    210.2M  78% /opt 还是没有出现<br><br></code></pre></td></tr></table></div></figure>---AI第-33回答：--- <p>看起来系统并没有识别出整个 <code>/dev/mmcblk1p2</code> 的完整空间，仍然只显示了 971.3 MB。可以尝试以下几个步骤来扩大分区容量：</p><h3 id="1-检查分区表"><a href="#1-检查分区表" class="headerlink" title="1. 检查分区表"></a>1. 检查分区表</h3><p>查看分区表，确保分区 <code>/dev/mmcblk1p2</code> 使用了整个 7 GB。可以使用 <code>fdisk</code> 命令检查：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3z8a1omfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-3z8a1omfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">fdisk -l <span class="hljs-regexp">/dev/mm</span>cblk1<br></code></pre></td></tr></table></div></figure><p>看看是否显示 <code>/dev/mmcblk1p2</code> 的大小确实是 7 GB。</p><h3 id="2-调整文件系统大小"><a href="#2-调整文件系统大小" class="headerlink" title="2. 调整文件系统大小"></a>2. 调整文件系统大小</h3><p>如果分区大小已经是 7 GB，但文件系统未占满整个分区，可能需要扩展文件系统大小。可以使用 <code>resize2fs</code> 命令：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rzrhjgmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-rzrhjgmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">resize2fs <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><p>该命令会检查文件系统，并扩展至整个分区大小。</p><h3 id="3-检查挂载点"><a href="#3-检查挂载点" class="headerlink" title="3. 检查挂载点"></a>3. 检查挂载点</h3><p>在调整文件系统大小后，再重新挂载分区以确保更改生效：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kq30mmmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-kq30mmmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">umount /opt<br>mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><p>之后再用 <code>df -h</code> 检查是否显示整个 7 GB 的容量。如果还不行，请分享 <code>fdisk -l</code> 的输出信息，这样可以更进一步地诊断。</p><details>  <summary>我的-第三十四问</summary><figure class="highlight tap"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2y7ip6mfcwb3cr"></i><span>TAP</span><div class="collapse show" id="collapse-2y7ip6mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>[root@Kwrt:08:10 PM ~] <span class="hljs-comment"># fdisk -l /dev/mmcblk1</span><br>Disk /dev/mmcblk1: 7.28 GiB,<span class="hljs-number"> 7818182656 </span>bytes,<span class="hljs-number"> 15269888 </span>sectors<br>Units: sectors of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>Sector size (logical/physical):<span class="hljs-number"> 512 </span>bytes /<span class="hljs-number"> 512 </span>bytes<br>I/O size (minimum/optimal):<span class="hljs-number"> 512 </span>bytes /<span class="hljs-number"> 512 </span>bytes<br>Disklabel type: dos<br>Disk identifier: 0x00002ceb<br><br>Device         Boot  Start      End  Sectors  Size Id Type<br>/dev/mmcblk1p1 *    <span class="hljs-number"> 32768 </span> <span class="hljs-number"> 557055 </span> <span class="hljs-number"> 524288 </span> 256M  e W95 FAT16 (LBA)<br>/dev/mmcblk1p2 *   <span class="hljs-number"> 557056 </span>15269887<span class="hljs-number"> 14712832 </span>   7G<span class="hljs-number"> 83 </span>Linux<br>[root@Kwrt:08:10 PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-34回答：--- <p>从 <code>fdisk</code> 的输出可以看到，<code>/dev/mmcblk1p2</code> 确实是一个 7 GB 的分区，但当前显示的可用空间为 971.3 MB，说明文件系统没有正确扩展到整个分区。<br>请尝试以下步骤来扩展文件系统：</p><ol><li><strong>检查并扩展文件系统大小</strong><br>运行以下命令来扩展 <code>/dev/mmcblk1p2</code> 的文件系统到整个分区大小：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ggjpbzmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-ggjpbzmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">resize2fs <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>重新挂载</strong><br>确保扩展完成后，卸载并重新挂载该分区：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5x31j4mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-5x31j4mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">umount /opt<br>mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>验证</strong><br>运行 <code>df -h</code> 再次检查分区 <code>/opt</code> 是否已显示整个 7 GB 的容量。</li></ol><p>尝试这些步骤后，请查看是否正常显示全部容量。</p><details>  <summary>我的-第三十五问</summary><figure class="highlight crystal"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-q4k885mfcwb3cr"></i><span>CRYSTAL</span><div class="collapse show" id="collapse-q4k885mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><br>[root<span class="hljs-variable">@Kwrt</span>:<span class="hljs-number">0</span>8:<span class="hljs-number">10</span> PM ~] <span class="hljs-comment"># df -h</span><br>Filesystem                Size      Used Available Use% Mounted on<br><span class="hljs-regexp">/dev/root</span>                 <span class="hljs-number">1.1</span>G    <span class="hljs-number">745.1</span>M    <span class="hljs-number">356.2</span>M  <span class="hljs-number">68</span>% <span class="hljs-regexp">/</span><br><span class="hljs-regexp">tmpfs                   500.5M      3.3M    497.2M   1% /tmp</span><br>tmpfs                   <span class="hljs-number">512.0</span>K         <span class="hljs-number">0</span>    <span class="hljs-number">512.0</span>K   <span class="hljs-number">0</span>% <span class="hljs-regexp">/dev</span><br><span class="hljs-regexp">/dev</span><span class="hljs-regexp">/mmcblk1p2            1.1G    745.1M    356.2M  68% /opt</span><br>[root<span class="hljs-variable">@Kwrt</span>:<span class="hljs-number">0</span>8:<span class="hljs-number">11</span> PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-35回答：--- <p>从输出看，<code>/dev/mmcblk1p2</code> 现在显示的总大小还是 1.1 GB，并没有扩展到整个 7 GB 分区。可能原因是该分区的文件系统并未正确识别分区的全尺寸。可以尝试以下方法进一步排查： </p><ol><li><strong>检查文件系统类型</strong><br>确认文件系统类型是 ext4（之前 <code>lsblk -f</code> 显示为 ext4）并符合 <code>resize2fs</code> 的要求。可以再次执行以下命令确保正确识别：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9bgxqamfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-9bgxqamfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsblk -f</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>使用 <code>resize2fs</code> 强制扩展</strong><br>在确认分区已经正确挂载的前提下，尝试再次扩展文件系统大小。使用 <code>resize2fs</code> 时指定分区路径：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lk71nxmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-lk71nxmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">resize2fs <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>检查和修复文件系统</strong><br>如果扩展仍然失败，可能需要在不挂载的情况下对文件系统进行检查和修复：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-io9djcmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-io9djcmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">umount /opt<br>e2fsck -f /dev/mmcblk1p2<br>resize2fs /dev/mmcblk1p2<br></code></pre></td></tr></table></div></figure><ol start="4"><li><strong>挂载并检查空间</strong><br>重新挂载分区，并使用 <code>df -h</code> 确认分区空间已扩展：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-z8g5iamfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-z8g5iamfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/mmcblk1p2 /opt<br><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><p>请按照这些步骤进行操作并观察 <code>df -h</code> 的输出是否显示全部空间。</p><details>  <summary>我的-第三十六问</summary><figure class="highlight crystal"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wltvc8mfcwb3cr"></i><span>CRYSTAL</span><div class="collapse show" id="collapse-wltvc8mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><br>[root<span class="hljs-variable">@Kwrt</span>:<span class="hljs-number">0</span>8:<span class="hljs-number">11</span> PM ~] <span class="hljs-comment"># lsblk -f</span><br>NAME FSTYPE FSVER LABEL  UUID                                 FSAVAIL FSUSE% MOUNTPOINTS<br>mmcblk1<br>                                                                             <br>├─mmcblk1p1<br>│    vfat                <span class="hljs-number">6706</span>-E94B                                           <br>└─mmcblk1p2<br>     ext4         rootfs ff313567-e9f1-<span class="hljs-number">5</span>a5d-<span class="hljs-number">9895</span>-<span class="hljs-number">3</span>ba130b4a864  <span class="hljs-number">356.2</span>M    <span class="hljs-number">67</span>% <span class="hljs-regexp">/opt</span><br><span class="hljs-regexp">                                                                             /</span><br>mmcblk1boot0<br>                                                                             <br>mmcblk1boot1<br>                                                                             <br>zram0<br>     swap                                                                    [SWAP]<br>[root<span class="hljs-variable">@Kwrt</span>:<span class="hljs-number">0</span>8:<span class="hljs-number">11</span> PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-36回答：--- <p><code>lsblk -f</code> 显示 <code>/dev/mmcblk1p2</code> 的文件系统是 ext4，且容量仍然是 1.1 GB。可以通过 <code>resize2fs</code> 命令扩展该分区的 ext4 文件系统到整个 7 GB 的分区空间。<br>请执行以下步骤：</p><ol><li><strong>扩展文件系统</strong><br>运行 <code>resize2fs</code> 命令来扩展 <code>/dev/mmcblk1p2</code> 分区的文件系统：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1n5holmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-1n5holmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">resize2fs <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>确认更改</strong><br>扩展后，重新检查文件系统的空间情况：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vs5k95mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-vs5k95mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt<br></code></pre></td></tr></table></div></figure><p>如果操作成功，<code>df -h</code> 应该显示 <code>/dev/mmcblk1p2</code> 的空间已经扩展到 7 GB 左右。</p><details>  <summary>我的-第三十七问</summary><figure class="highlight livescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1m5b68mfcwb3cr"></i><span>LIVESCRIPT</span><div class="collapse show" id="collapse-1m5b68mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">11</span> PM ~] <span class="hljs-comment"># resize2fs /dev/mmcblk1p2</span><br>resize2fs <span class="hljs-number">1.47</span>.<span class="hljs-number">0</span> (<span class="hljs-number">5</span>-Feb-<span class="hljs-number">2023</span>)<br>Filesystem at /dev/mmcblk1p2 <span class="hljs-keyword">is</span> mounted <span class="hljs-literal">on</span> /opt; <span class="hljs-literal">on</span>-line resizing required<br>old_desc_blocks = <span class="hljs-number">1</span>, new_desc_blocks = <span class="hljs-number">1</span><br>Performing an <span class="hljs-literal">on</span>-line resize <span class="hljs-keyword">of</span> /dev/mmcblk1p2 <span class="hljs-keyword">to</span> <span class="hljs-number">1839104</span> (<span class="hljs-number">4k</span>) blocks.<br>resize2fs: Invalid argument While trying <span class="hljs-keyword">to</span> add group <span class="hljs-comment">#9</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment"># </span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment"># df -h /opt</span><br>Filesystem                Size      Used Available Use% Mounted <span class="hljs-literal">on</span><br><span class="hljs-regexp">/dev/root                 1.1G    745.1M    356.2M  68% /</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-37回答：--- <p><code>resize2fs</code> 命令在执行时遇到了 “Invalid argument” 错误，这可能是由于分区的大小没有正确更新，或者文件系统正在尝试在线扩展时遇到了问题。要解决此问题，可以尝试以下步骤：</p><h3 id="步骤-1-重新检查分区大小"><a href="#步骤-1-重新检查分区大小" class="headerlink" title="步骤 1: 重新检查分区大小"></a>步骤 1: 重新检查分区大小</h3><p>首先确保分区表已经正确更新，尝试使用 <code>fdisk</code> 或 <code>partprobe</code> 确保分区大小已经被操作系统识别：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-p9byo1mfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-p9byo1mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">partprobe <span class="hljs-regexp">/dev/mm</span>cblk1<br></code></pre></td></tr></table></div></figure><p>或者退出并重新启动系统，以便让分区表的更改生效。</p><h3 id="步骤-2-重新扩展文件系统"><a href="#步骤-2-重新扩展文件系统" class="headerlink" title="步骤 2: 重新扩展文件系统"></a>步骤 2: 重新扩展文件系统</h3><p>如果步骤 1 完成后没有问题，再次尝试扩展文件系统：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ijd9cvmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-ijd9cvmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">resize2fs <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><p>如果仍然失败，可以尝试先卸载分区并在离线状态下进行扩展。</p><h3 id="步骤-3-卸载分区并进行扩展"><a href="#步骤-3-卸载分区并进行扩展" class="headerlink" title="步骤 3: 卸载分区并进行扩展"></a>步骤 3: 卸载分区并进行扩展</h3><p>为了在离线状态下操作，首先卸载 <code>/opt</code> 分区：</p><figure class="highlight armasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-433zgymfcwb3cr"></i><span>ARMASM</span><div class="collapse show" id="collapse-433zgymfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">umount</span> /<span class="hljs-meta">opt</span><br></code></pre></td></tr></table></div></figure><p>然后再次尝试扩展文件系统：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-681ffamfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-681ffamfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">resize2fs <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><p>完成后，重新挂载分区：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nj7jwomfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-nj7jwomfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><h3 id="步骤-4-检查空间"><a href="#步骤-4-检查空间" class="headerlink" title="步骤 4: 检查空间"></a>步骤 4: 检查空间</h3><p>再次检查扩展后的空间：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-c6zmgfmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-c6zmgfmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h /opt<br></code></pre></td></tr></table></div></figure><p>如果所有操作都成功，应该可以看到分区的空间已经扩展到 7 GB 左右。</p><details>  <summary>我的-第三十八问</summary><figure class="highlight livescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fc7ypxmfcwb3cr"></i><span>LIVESCRIPT</span><div class="collapse show" id="collapse-fc7ypxmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment"># partprobe /dev/mmcblk1</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment"># </span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment"># resize2fs /dev/mmcblk1p2</span><br>resize2fs <span class="hljs-number">1.47</span>.<span class="hljs-number">0</span> (<span class="hljs-number">5</span>-Feb-<span class="hljs-number">2023</span>)<br>Filesystem at /dev/mmcblk1p2 <span class="hljs-keyword">is</span> mounted <span class="hljs-literal">on</span> /opt; <span class="hljs-literal">on</span>-line resizing required<br>old_desc_blocks = <span class="hljs-number">1</span>, new_desc_blocks = <span class="hljs-number">1</span><br>Performing an <span class="hljs-literal">on</span>-line resize <span class="hljs-keyword">of</span> /dev/mmcblk1p2 <span class="hljs-keyword">to</span> <span class="hljs-number">1839104</span> (<span class="hljs-number">4k</span>) blocks.<br>resize2fs: Invalid argument While trying <span class="hljs-keyword">to</span> add group <span class="hljs-comment">#9</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment"># resize2fs /dev/mmcblk1p2</span><br>resize2fs <span class="hljs-number">1.47</span>.<span class="hljs-number">0</span> (<span class="hljs-number">5</span>-Feb-<span class="hljs-number">2023</span>)<br>Filesystem at /dev/mmcblk1p2 <span class="hljs-keyword">is</span> mounted <span class="hljs-literal">on</span> /opt; <span class="hljs-literal">on</span>-line resizing required<br>old_desc_blocks = <span class="hljs-number">1</span>, new_desc_blocks = <span class="hljs-number">1</span><br>Performing an <span class="hljs-literal">on</span>-line resize <span class="hljs-keyword">of</span> /dev/mmcblk1p2 <span class="hljs-keyword">to</span> <span class="hljs-number">1839104</span> (<span class="hljs-number">4k</span>) blocks.<br>resize2fs: Invalid argument While trying <span class="hljs-keyword">to</span> add group <span class="hljs-comment">#9</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">12</span> PM ~] <span class="hljs-comment"># </span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">13</span> PM ~] <span class="hljs-comment"># mount /dev/mmcblk1p2 /opt</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">13</span> PM ~] <span class="hljs-comment"># </span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">13</span> PM ~] <span class="hljs-comment"># df -h /opt</span><br>Filesystem                Size      Used Available Use% Mounted <span class="hljs-literal">on</span><br><span class="hljs-regexp">/dev/root                 1.1G    745.1M    356.2M  68% /</span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">13</span> PM ~] <span class="hljs-comment"># </span><br>[root@Kwrt:<span class="hljs-number">08</span>:<span class="hljs-number">13</span> PM ~] <span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></div></figure>---AI第-38回答：--- <p>从日志来看，文件系统扩展 (<code>resize2fs</code>) 仍然遇到 “Invalid argument” 错误，这通常表示在扩展文件系统时有某些问题。可能的原因是分区表没有正确更新，或者文件系统未正确识别新的分区大小。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>确认分区表是否正确识别</strong><br>尝试运行 <code>fdisk</code> 检查 <code>/dev/mmcblk1p2</code> 分区的大小和其他详细信息：</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qbh41vmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-qbh41vmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">fdisk -l <span class="hljs-regexp">/dev/mm</span>cblk1<br></code></pre></td></tr></table></div></figure><p>确保分区表中 <code>/dev/mmcblk1p2</code> 的大小已经是你预期的大小。如果分区大小没有更新，需要重新创建分区或使用其他工具。</p><ol start="2"><li><strong>卸载文件系统并重新扩展</strong><br>如果分区表显示正确的大小，但 <code>resize2fs</code> 仍然失败，你可能需要先卸载文件系统，然后进行扩展。卸载 <code>/opt</code> 后，执行文件系统扩展操作。<br>卸载文件系统：</li></ol><figure class="highlight armasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bw0bj9mfcwb3cr"></i><span>ARMASM</span><div class="collapse show" id="collapse-bw0bj9mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">umount</span> /<span class="hljs-meta">opt</span><br></code></pre></td></tr></table></div></figure><p>然后执行扩展命令：</p><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yg70ulmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-yg70ulmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">resize2fs <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><p>扩展完成后，重新挂载 <code>/opt</code>：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0t7m88mfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-0t7m88mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/mmcblk1p2 /opt<br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>使用 <code>partprobe</code> 刷新分区表</strong><br>如果更改了分区大小但没有更新内核中的分区信息，可以运行 <code>partprobe</code> 来强制系统读取更新后的分区表。</li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2djeesmfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-2djeesmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">partprobe <span class="hljs-regexp">/dev/mm</span>cblk1<br></code></pre></td></tr></table></div></figure><ol start="4"><li><p><strong>使用 <code>gparted</code> 或 <code>fdisk</code> 重建分区</strong><br>如果上述步骤都无法解决问题，可能需要重新创建分区。你可以使用 <code>gparted</code> 或 <code>fdisk</code> 重新分区并创建一个新的 <code>ext4</code> 文件系统。请注意，这将清除所有现有数据，因此请提前备份。</p></li><li><p><strong>检查文件系统和分区错误</strong><br>运行 <code>fsck</code> 检查文件系统是否存在问题，并进行修复：</p></li></ol><figure class="highlight awk"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zw9z53mfcwb3cr"></i><span>AWK</span><div class="collapse show" id="collapse-zw9z53mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">fsck <span class="hljs-regexp">/dev/mm</span>cblk1p2<br></code></pre></td></tr></table></div></figure><h3 id="总结：-4"><a href="#总结：-4" class="headerlink" title="总结："></a>总结：</h3><p>通过确保分区大小已经正确识别并卸载分区后进行扩展，应该能解决 <code>resize2fs</code> 的错误。如果问题仍然存在，请考虑重新分区并创建文件系统。</p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenWrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多个git帐号在同一个电脑上设置ssh配置</title>
    <link href="/2024/11/14/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E5%A4%9A%E4%B8%AAgit%E5%B8%90%E5%8F%B7%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%AE%BE%E7%BD%AEssh%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/11/14/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E5%A4%9A%E4%B8%AAgit%E5%B8%90%E5%8F%B7%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%AE%BE%E7%BD%AEssh%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="多个git帐号在同一个电脑上设置ssh配置"><a href="#多个git帐号在同一个电脑上设置ssh配置" class="headerlink" title="多个git帐号在同一个电脑上设置ssh配置"></a>多个git帐号在同一个电脑上设置ssh配置</h1><p>GPT回答: </p><p>在同一台电脑上配置两个 GitLab 帐号使用 SSH，可以通过设置不同的 SSH key 和 SSH 配置文件来实现。以下是详细步骤：</p><h3 id="1-生成不同的-SSH-Key"><a href="#1-生成不同的-SSH-Key" class="headerlink" title="1. 生成不同的 SSH Key"></a>1. 生成不同的 SSH Key</h3><p>假设你已经有一个 GitLab 帐号的 SSH key，并且命名为 <code>id_rsa_gitlab1</code>。现在我们需要为第二个 GitLab 帐号生成新的 SSH key。</p><figure class="highlight perl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-u66xmvmfcwb3cs"></i><span>PERL</span><div class="collapse show" id="collapse-u66xmvmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 生成新的 SSH key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;your_email<span class="hljs-variable">@example</span>.com&quot;</span> -f ~<span class="hljs-regexp">/.ssh/id</span>_rsa_gitlab2<br></code></pre></td></tr></table></div></figure><p>在这条命令中：</p><ul><li><p><code>-C</code> 参数后填入你的邮箱，可以是第二个 GitLab 帐号的邮箱。</p></li><li><p><code>-f</code> 参数指定了保存密钥文件的路径，这里我们保存为 <code>~/.ssh/id_rsa_gitlab2</code>。<br>按提示完成生成后，将生成 <code>id_rsa_gitlab2</code> 和 <code>id_rsa_gitlab2.pub</code> 两个文件。</p></li></ul><h3 id="2-将公钥添加到-GitLab-帐号"><a href="#2-将公钥添加到-GitLab-帐号" class="headerlink" title="2. 将公钥添加到 GitLab 帐号"></a>2. 将公钥添加到 GitLab 帐号</h3><p>分别登录到两个 GitLab 帐号，将对应的公钥文件 <code>.pub</code> 内容添加到 GitLab 账户的 SSH key 设置中。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3hzkp0mfcwb3cs"></i><span>BASH</span><div class="collapse show" id="collapse-3hzkp0mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看公钥内容</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa_gitlab1.pub  <span class="hljs-comment"># 第一个账号的公钥</span><br><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa_gitlab2.pub  <span class="hljs-comment"># 第二个账号的公钥</span><br></code></pre></td></tr></table></div></figure><p>在每个 GitLab 帐号的 “SSH Key” 设置页面粘贴对应的公钥内容。</p><h3 id="3-配置-SSH-Config-文件"><a href="#3-配置-SSH-Config-文件" class="headerlink" title="3. 配置 SSH Config 文件"></a>3. 配置 SSH Config 文件</h3><p>打开 SSH 配置文件 <code>~/.ssh/config</code>，如果没有此文件，可以创建一个：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-60wy1smfcwb3cs"></i><span>BASH</span><div class="collapse show" id="collapse-60wy1smfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> ~/.ssh/config<br></code></pre></td></tr></table></div></figure><p>编辑文件并添加以下配置：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hnjqntmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-hnjqntmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 配置第一个 GitLab 帐号</span><br>Host gitlab-<span class="hljs-number">1</span><br>    HostName gitlab.com<br>    <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>    IdentityFile ~/.ssh/id_rsa_gitlab1<br><br><span class="hljs-comment"># 配置第二个 GitLab 帐号</span><br>Host gitlab-<span class="hljs-number">2</span><br>    HostName gitlab.com<br>    <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>    IdentityFile ~/.ssh/id_rsa_gitlab2<br></code></pre></td></tr></table></div></figure><p>在这个配置中：</p><ul><li><p><code>Host gitlab-1</code> 和 <code>Host gitlab-2</code> 是自定义的主机名，用于区分两个 GitLab 帐号。</p></li><li><p><code>HostName gitlab.com</code> 是 GitLab 的主机地址。</p></li><li><p><code>User git</code> 指定了用户名称（通常为 <code>git</code>）。</p></li><li><p><code>IdentityFile</code> 指定了对应的私钥文件路径。</p></li></ul><h3 id="4-克隆或推送代码时使用不同的配置"><a href="#4-克隆或推送代码时使用不同的配置" class="headerlink" title="4. 克隆或推送代码时使用不同的配置"></a>4. 克隆或推送代码时使用不同的配置</h3><p>现在，在克隆仓库或推送代码时，可以使用自定义的主机名（即 <code>gitlab-1</code> 或 <code>gitlab-2</code>）来区分不同的帐号。</p><h4 id="克隆示例"><a href="#克隆示例" class="headerlink" title="克隆示例"></a>克隆示例</h4><p>假设第一个账号的仓库地址为 <code>git@gitlab.com:username1/repo.git</code>，第二个账号的仓库地址为 <code>git@gitlab.com:username2/repo.git</code>，你可以将链接改为如下格式：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ducpp5mfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-ducpp5mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 使用第一个 GitLab 帐号</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">gitlab-1</span>:username1/repo.git<br><br><span class="hljs-comment"># 使用第二个 GitLab 帐号</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">gitlab-2</span>:username2/repo.git<br></code></pre></td></tr></table></div></figure><h4 id="推送示例"><a href="#推送示例" class="headerlink" title="推送示例"></a>推送示例</h4><p>当你已经在本地有两个不同账号的项目时，可以在 <code>.git/config</code> 文件中修改 <code>url</code> 来匹配自定义的主机名。</p><figure class="highlight elixir"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-j3ozqomfcwb3cs"></i><span>ELIXIR</span><div class="collapse show" id="collapse-j3ozqomfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>    url = git<span class="hljs-variable">@gitlab</span><span class="hljs-number">-1</span><span class="hljs-symbol">:username1/repo</span>.git  <span class="hljs-comment"># 使用第一个账号</span><br>    fetch = +refs/heads/*<span class="hljs-symbol">:refs/remotes/origin/*</span><br></code></pre></td></tr></table></div></figure><h3 id="5-测试-SSH-连接"><a href="#5-测试-SSH-连接" class="headerlink" title="5. 测试 SSH 连接"></a>5. 测试 SSH 连接</h3><p>可以通过以下命令测试两个 GitLab 帐号的连接是否成功：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-g8cqa8mfcwb3cs"></i><span>APACHE</span><div class="collapse show" id="collapse-g8cqa8mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -T gitlab-<span class="hljs-number">1</span><br><span class="hljs-attribute">ssh</span> -T gitlab-<span class="hljs-number">2</span><br></code></pre></td></tr></table></div></figure><p>如果配置正确，会显示类似 <code>Welcome to GitLab, @username</code> 的信息。<br>这样配置后，两个 GitLab 帐号就可以在同一台电脑上同时使用 SSH 来访问各自的仓库。</p><p>我问</p><figure class="highlight less"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kqetj5mfcwb3cs"></i><span>LESS</span><div class="collapse show" id="collapse-kqetj5mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less">我原来配置<span class="hljs-selector-tag">github</span>是用这个方法# <span class="hljs-selector-tag">one</span>(lb<span class="hljs-variable">@gmail</span>.com)<br><span class="hljs-selector-tag">Host</span> <span class="hljs-selector-tag">lb</span><span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br><span class="hljs-selector-tag">HostName</span> <span class="hljs-selector-tag">github</span><span class="hljs-selector-class">.com</span><br><span class="hljs-selector-tag">PreferredAuthentications</span> <span class="hljs-selector-tag">publickey</span><br><span class="hljs-selector-tag">IdentityFile</span> ~/<span class="hljs-selector-class">.ssh</span>/<span class="hljs-selector-tag">id_rsa</span><br><span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">lb</span><br># <span class="hljs-selector-tag">two</span>(zy@ gmail.com)<br><span class="hljs-selector-tag">Host</span> <span class="hljs-selector-tag">zy</span><span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br><span class="hljs-selector-tag">HostName</span> <span class="hljs-selector-tag">github</span><span class="hljs-selector-class">.com</span><br><span class="hljs-selector-tag">PreferredAuthentications</span> <span class="hljs-selector-tag">publickey</span><br><span class="hljs-selector-tag">IdentityFile</span> ~/<span class="hljs-selector-class">.ssh</span>/<span class="hljs-selector-tag">id_rsa_zy</span><br><span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">zy</span>   能不能参照这样？<br></code></pre></td></tr></table></div></figure><p>GPT回答: </p><p>是的，您可以完全按照这种方法为两个 GitLab 帐号配置 SSH。按照 GitHub 的配置格式，GitLab 的配置可以如下设置：<br>假设您已有两个不同的 SSH key：<code>~/.ssh/id_rsa_gitlab1</code> 和 <code>~/.ssh/id_rsa_gitlab2</code>，以下是配置文件的示例：</p><h3 id="1-配置-GitLab-的-SSH-Config-文件"><a href="#1-配置-GitLab-的-SSH-Config-文件" class="headerlink" title="1. 配置 GitLab 的 SSH Config 文件"></a>1. 配置 GitLab 的 SSH Config 文件</h3><p>打开或创建 <code>~/.ssh/config</code> 文件，添加以下内容：</p><figure class="highlight less"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i2cmpmmfcwb3cs"></i><span>LESS</span><div class="collapse show" id="collapse-i2cmpmmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs less"># 第一<span class="hljs-selector-tag">GitLab</span>账号 (first<span class="hljs-variable">@example</span>.com)<br><span class="hljs-selector-tag">Host</span> <span class="hljs-selector-tag">gitlab1</span><span class="hljs-selector-class">.com</span><br>    <span class="hljs-selector-tag">HostName</span> <span class="hljs-selector-tag">gitlab</span><span class="hljs-selector-class">.com</span><br>    <span class="hljs-selector-tag">PreferredAuthentications</span> <span class="hljs-selector-tag">publickey</span><br>    <span class="hljs-selector-tag">IdentityFile</span> ~/<span class="hljs-selector-class">.ssh</span>/<span class="hljs-selector-tag">id_rsa_gitlab1</span><br>    <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">git</span><br><br># 第二<span class="hljs-selector-tag">GitLab</span>账号 (second<span class="hljs-variable">@example</span>.com)<br><span class="hljs-selector-tag">Host</span> <span class="hljs-selector-tag">gitlab2</span><span class="hljs-selector-class">.com</span><br>    <span class="hljs-selector-tag">HostName</span> <span class="hljs-selector-tag">gitlab</span><span class="hljs-selector-class">.com</span><br>    <span class="hljs-selector-tag">PreferredAuthentications</span> <span class="hljs-selector-tag">publickey</span><br>    <span class="hljs-selector-tag">IdentityFile</span> ~/<span class="hljs-selector-class">.ssh</span>/<span class="hljs-selector-tag">id_rsa_gitlab2</span><br>    <span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">git</span><br></code></pre></td></tr></table></div></figure><p>在这里：</p><ul><li><p><code>Host gitlab1.com</code> 和 <code>Host gitlab2.com</code> 是自定义主机名，可以任意设置，用于区分两个 GitLab 帐号。</p></li><li><p><code>HostName gitlab.com</code> 指向 GitLab 的域名。</p></li><li><p><code>PreferredAuthentications publickey</code> 设置了使用公钥认证。</p></li><li><p><code>IdentityFile</code> 为每个帐号指定不同的 SSH key。</p></li><li><p><code>User git</code> 是 GitLab 默认的用户。</p></li></ul><h3 id="2-使用配置克隆或推送代码"><a href="#2-使用配置克隆或推送代码" class="headerlink" title="2. 使用配置克隆或推送代码"></a>2. 使用配置克隆或推送代码</h3><p>在克隆或推送时，可以使用配置中指定的主机名 <code>gitlab1.com</code> 或 <code>gitlab2.com</code> 访问不同的 GitLab 帐号。<br>例如：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ivx8s2mfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-ivx8s2mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 使用第一个 GitLab 帐号克隆</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitlab1.com:username1/repo.git<br><br><span class="hljs-comment"># 使用第二个 GitLab 帐号克隆</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitlab2.com:username2/repo.git<br></code></pre></td></tr></table></div></figure><h3 id="3-修改现有仓库的-Remote-URL"><a href="#3-修改现有仓库的-Remote-URL" class="headerlink" title="3. 修改现有仓库的 Remote URL"></a>3. 修改现有仓库的 Remote URL</h3><p>如果您已经在本地有仓库，可以编辑 <code>.git/config</code> 文件，将 <code>url</code> 修改为您自定义的主机名。</p><figure class="highlight elixir"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-j4mehmmfcwb3cs"></i><span>ELIXIR</span><div class="collapse show" id="collapse-j4mehmmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>    url = git<span class="hljs-variable">@gitlab1</span>.<span class="hljs-symbol">com:</span>username1/repo.git  <span class="hljs-comment"># 对应第一个账号</span><br>    fetch = +refs/heads/*<span class="hljs-symbol">:refs/remotes/origin/*</span><br></code></pre></td></tr></table></div></figure><h3 id="4-测试连接"><a href="#4-测试连接" class="headerlink" title="4. 测试连接"></a>4. 测试连接</h3><p>测试两个 GitLab 帐号的连接：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3nyzlrmfcwb3cs"></i><span>NGINX</span><div class="collapse show" id="collapse-3nyzlrmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab1</span>.com<br>ssh -T git<span class="hljs-variable">@gitlab2</span>.com<br></code></pre></td></tr></table></div></figure><p>若配置正确，应显示类似 <code>Welcome to GitLab, @username</code> 的欢迎信息。<br>这样配置后，您就可以和 GitHub 的配置一样，方便地在同一台电脑上管理多个 GitLab 帐号了。</p><p>我问</p><figure class="highlight subunit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2jo689mfcwb3cs"></i><span>SUBUNIT</span><div class="collapse show" id="collapse-2jo689mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs subunit">我可以拉取下载回来，想推送上去出现这样<br>admin@DESKTOP-DABFHG1 MINGW64 /d/gitlab仓库/anan (main)<br>$ git commit -m &quot;当前文件最新时间是$&#123;current_date&#125;_上传&quot;<br>Author identity unknown<br><br>*** Please tell me who you are.<br><br>Run<br><br>  git config --global user.email &quot;you@example.com&quot;<br>  git config --global user.name &quot;Your Name&quot;<br><br>to set your account&#x27;s default identity.<br>Omit --global to set the identity only in this repository.<br><br>fatal: unable to auto-detect email address (got &#x27;admin@DESKTOP-DABFHG1.(none)&#x27;)<br><br>admin@DESKTOP-DABFHG1 MINGW64 /d/gitlab仓库/anan (main)<br>$ git push origin befe<br><span class="hljs-keyword">error: </span>src refspec befe does not match any<br><span class="hljs-keyword">error: </span>failed to push some refs to &#x27;gg.gitlab.com:l2837/anan.git&#x27;<br><br>admin@DESKTOP-DABFHG1 MINGW64 /d/gitlab仓库/anan (main)<br>$<br></code></pre></td></tr></table></div></figure><p>GPT回答: </p><p>出现这个错误主要有两个原因：一是 Git 还未配置用户名和邮箱，二是分支名称或推送的远程地址有误。下面是详细的解决方法：</p><h3 id="1-设置-Git-用户名和邮箱"><a href="#1-设置-Git-用户名和邮箱" class="headerlink" title="1. 设置 Git 用户名和邮箱"></a>1. 设置 Git 用户名和邮箱</h3><p>Git 需要知道提交者的身份，可以在本地配置全局或仅针对当前仓库设置用户名和邮箱。根据错误信息提示，您可以选择以下两种方式之一：</p><h4 id="全局配置（适用于所有仓库）"><a href="#全局配置（适用于所有仓库）" class="headerlink" title="全局配置（适用于所有仓库）"></a>全局配置（适用于所有仓库）</h4><figure class="highlight autoit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mfb3l0mfcwb3cs"></i><span>AUTOIT</span><div class="collapse show" id="collapse-mfb3l0mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&quot;Your Name&quot;</span>          <span class="hljs-meta"># 替换为您的名字</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">&quot;your_email@example.com&quot;</span>  <span class="hljs-meta"># 替换为您的邮箱</span><br></code></pre></td></tr></table></div></figure><h4 id="当前仓库配置（仅在当前仓库生效）"><a href="#当前仓库配置（仅在当前仓库生效）" class="headerlink" title="当前仓库配置（仅在当前仓库生效）"></a>当前仓库配置（仅在当前仓库生效）</h4><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wt4pkjmfcwb3cs"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-wt4pkjmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git config <span class="hljs-keyword">user</span>.name <span class="hljs-string">&quot;Your Name&quot;</span>                    <span class="hljs-comment"># 替换为您的名字</span><br>git config <span class="hljs-keyword">user</span>.email <span class="hljs-string">&quot;your_email@example.com&quot;</span>      <span class="hljs-comment"># 替换为您的邮箱</span><br></code></pre></td></tr></table></div></figure><blockquote><p><strong>注意</strong> ：请将 <code>Your Name</code> 和 <code>your_email@example.com</code> 替换为您的 GitLab 用户名和关联的邮箱。</p></blockquote><h3 id="2-确认分支名称和远程仓库地址"><a href="#2-确认分支名称和远程仓库地址" class="headerlink" title="2. 确认分支名称和远程仓库地址"></a>2. 确认分支名称和远程仓库地址</h3><p>看错误信息，您输入的命令为：</p><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qu3cblmfcwb3cs"></i><span>MAXIMA</span><div class="collapse show" id="collapse-qu3cblmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> befe<br></code></pre></td></tr></table></div></figure><p>这条命令尝试将 <code>befe</code> 分支推送到远程仓库，但似乎没有叫 <code>befe</code> 的本地分支。您可以按以下步骤检查和修改推送分支：</p><h4 id="检查当前分支名称"><a href="#检查当前分支名称" class="headerlink" title="检查当前分支名称"></a>检查当前分支名称</h4><p>确认您当前所在的分支，例如是 <code>main</code>，而不是 <code>befe</code>：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-r2v1i2mfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-r2v1i2mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></div></figure><p>如果您确认当前分支是 <code>main</code>，可以改用以下命令推送：</p><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-q53fs5mfcwb3cs"></i><span>MAXIMA</span><div class="collapse show" id="collapse-q53fs5mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></div></figure><h4 id="确认远程仓库地址"><a href="#确认远程仓库地址" class="headerlink" title="确认远程仓库地址"></a>确认远程仓库地址</h4><p>确保您的远程仓库地址配置正确，可以通过以下命令查看远程仓库的配置：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mctft0mfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-mctft0mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>若地址不正确，可以使用以下命令修改远程仓库地址：</p><figure class="highlight dsconfig"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2ju8abmfcwb3cs"></i><span>DSCONFIG</span><div class="collapse show" id="collapse-2ju8abmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">git</span>@<span class="hljs-string">gitlab1</span>.<span class="hljs-string">com:l2837/</span><span class="hljs-string">anan</span>.<span class="hljs-string">git</span>  <span class="hljs-comment"># 替换为您的远程仓库地址</span><br></code></pre></td></tr></table></div></figure><h3 id="3-完整操作流程示例"><a href="#3-完整操作流程示例" class="headerlink" title="3. 完整操作流程示例"></a>3. 完整操作流程示例</h3><p>以下是完成这几步的完整操作示例：</p><figure class="highlight mipsasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ycyzm0mfcwb3cs"></i><span>MIPSASM</span><div class="collapse show" id="collapse-ycyzm0mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 1. 配置用户名和邮箱</span><br>git <span class="hljs-built_in">config</span> user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git <span class="hljs-built_in">config</span> user.email <span class="hljs-string">&quot;your_email@example.com&quot;</span><br><br><span class="hljs-comment"># 2. 检查当前分支</span><br>git <span class="hljs-keyword">branch </span> <span class="hljs-comment"># 确认您所在分支是 main</span><br><br><span class="hljs-comment"># 3. 提交修改（如果未提交）</span><br>git <span class="hljs-keyword">add </span>.<br>git commit -m <span class="hljs-string">&quot;当前文件最新时间是$(date +%Y-%m-%d)_上传&quot;</span><br><br><span class="hljs-comment"># 4. 推送到远程仓库的 main 分支</span><br>git push <span class="hljs-keyword">origin </span>main<br></code></pre></td></tr></table></div></figure><p>这样处理后，应该可以成功提交并推送到远程仓库了。如果还有问题，请检查远程仓库地址和当前分支是否正确。</p><p>我问</p><p>这个文本我设成这样没错吧</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mskvbgmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-mskvbgmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># one(lb@gmail.com)</span><br>Host lb.github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br><span class="hljs-keyword">User</span> <span class="hljs-title">lb</span><br><br><span class="hljs-comment"># two(zy@ gmail.com)</span><br>Host zy.github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa_zy<br><span class="hljs-keyword">User</span> <span class="hljs-title">zy</span><br><br><span class="hljs-comment"># gitlab帐号</span><br>Host lab6435.gitlab.com<br>HostName gitlab.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa_lab6435<br><span class="hljs-keyword">User</span> <span class="hljs-title">lab6435</span><br>  <br><span class="hljs-comment"># gitlab谷歌帐号</span><br><br>Host gg.gitlab.com<br>HostName gitlab.com  <br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa_gg<br><span class="hljs-keyword">User</span> <span class="hljs-title">gg</span><br></code></pre></td></tr></table></div></figure><p>GPT回答: </p><p>您的 SSH 配置基本是正确的，但有几点需要确认和改进。<code>User</code> 字段应该始终是 <code>git</code>，而不是 GitLab 或 GitHub 帐号的用户名。<code>User</code> 字段在 SSH 配置中仅用于 SSH 连接，不会影响身份认证。GitLab 和 GitHub 使用的 <code>User</code> 应该始终是 <code>git</code>。<br>以下是调整后的配置：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5a3sz1mfcwb3cs"></i><span>SSH</span><div class="collapse show" id="collapse-5a3sz1mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ssh"># GitHub 帐号 one<br>Host lb.github.com<br>    HostName github.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa<br>    User git  # 统一改成 git<br><br># GitHub 帐号 two<br>Host zy.github.com<br>    HostName github.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa_zy<br>    User git  # 统一改成 git<br><br># GitLab 帐号 lab6435<br>Host lab6435.gitlab.com<br>    HostName gitlab.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa_lab6435<br>    User git  # 统一改成 git<br>  <br># GitLab 谷歌帐号 gg<br>Host gg.gitlab.com<br>    HostName gitlab.com<br>    PreferredAuthentications publickey<br>    IdentityFile ~/.ssh/id_rsa_gg<br>    User git  # 统一改成 git<br></code></pre></td></tr></table></div></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在使用这些配置克隆、拉取或推送代码时，可以参考以下示例：</p><ul><li>使用 <code>lb.github.com</code> 克隆 GitHub 仓库：</li></ul><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-icre99mfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-icre99mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@lb.github.com:username/repo.git<br></code></pre></td></tr></table></div></figure><ul><li>使用 <code>gg.gitlab.com</code> 克隆 GitLab 仓库：</li></ul><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-z7lzrxmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-z7lzrxmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gg.gitlab.com:username/repo.git<br></code></pre></td></tr></table></div></figure><p>如果配置正确，这样的配置可以在同一台电脑上方便地管理多个 GitHub 和 GitLab 帐号。<br>上面是我一个新手设置的问题！！大家可以参考</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>git仓库</tag>
      
      <tag>git命令</tag>
      
      <tag>GPT学习</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器插件打包与安装详细步骤（以 Chrome 和 Edge 为例）</title>
    <link href="/2024/11/14/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E6%89%93%E5%8C%85%E4%B8%8E%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%EF%BC%88%E4%BB%A5%20Chrome%20%E5%92%8C%20Edge%20%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <url>/2024/11/14/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E6%89%93%E5%8C%85%E4%B8%8E%E5%AE%89%E8%A3%85%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%EF%BC%88%E4%BB%A5%20Chrome%20%E5%92%8C%20Edge%20%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器插件打包与安装详细步骤（以-Chrome-和-Edge-为例）"><a href="#浏览器插件打包与安装详细步骤（以-Chrome-和-Edge-为例）" class="headerlink" title="浏览器插件打包与安装详细步骤（以 Chrome 和 Edge 为例）"></a>浏览器插件打包与安装详细步骤（以 Chrome 和 Edge 为例）</h1><p>本教程详细介绍如何在 Google Chrome 和 Microsoft Edge 之间打包与安装插件。请在实际操作中，将示例路径替换为您自己的用户名、浏览器版本和插件安装位置。</p><hr><h4 id="示例假设"><a href="#示例假设" class="headerlink" title="示例假设"></a>示例假设</h4><ul><li><p><strong>用户电脑的用户名</strong> ：<code>Administrator</code></p></li><li><p><strong>Chrome 版本</strong> ：<code>Google Chrome Dev</code></p></li><li><p><strong>Edge 版本</strong> ：<code>Microsoft Edge</code></p></li><li><p><strong>插件安装路径</strong> ： </p><ul><li><p>Chrome 插件路径：<code>C:\Users\Administrator\AppData\Local\Google\Chrome Dev\User Data\Default\Extensions</code></p></li><li><p>Edge 插件路径：<code>C:\Users\Administrator\AppData\Local\Microsoft\Edge\User Data\Default\Extensions</code></p></li></ul></li></ul><hr><h3 id="一、在-Chrome-中打包插件"><a href="#一、在-Chrome-中打包插件" class="headerlink" title="一、在 Chrome 中打包插件"></a>一、在 Chrome 中打包插件</h3><h4 id="1-找到-Chrome-插件目录"><a href="#1-找到-Chrome-插件目录" class="headerlink" title="1. 找到 Chrome 插件目录"></a>1. 找到 Chrome 插件目录</h4><p>插件存放在如下路径中，找到对应插件 ID 的文件夹：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rh312smfcwb3cp"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-rh312smfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">C:\Users\Administrator\AppData\Local\Google\Chrome Dev\User Data\Default\Extensions<br></code></pre></td></tr></table></div></figure><p>进入后，插件 ID 文件夹（如 <code>adghjpdmpbcmppeafpodcjpagmegdpci</code>）下包含一个<strong>版本号文件夹</strong> ，例如 <code>0.0.21_0</code>。<strong>实际的插件内容在版本号文件夹内</strong> ，因此，打包时必须选中版本号文件夹。</p><h4 id="2-进入-Chrome-扩展程序页面"><a href="#2-进入-Chrome-扩展程序页面" class="headerlink" title="2. 进入 Chrome 扩展程序页面"></a>2. 进入 Chrome 扩展程序页面</h4><p>打开 Chrome 浏览器，在地址栏输入 <code>chrome://extensions</code>，并按下回车进入扩展程序管理页面。</p><h4 id="3-启用“开发者模式”"><a href="#3-启用“开发者模式”" class="headerlink" title="3. 启用“开发者模式”"></a>3. 启用“开发者模式”</h4><p>在页面右上角启用“开发者模式”。</p><h4 id="4-打包插件"><a href="#4-打包插件" class="headerlink" title="4. 打包插件"></a>4. 打包插件</h4><ul><li><p>点击页面中的“打包扩展程序”按钮。</p></li><li><p>在弹出的窗口中，将目录选择至<strong>版本号文件夹</strong> ，例如：</p></li></ul><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ctmtq2mfcwb3cp"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-ctmtq2mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">C:\Users\Administrator\AppData\Local\Google\Chrome Dev\User Data\Default\Extensions\adghjpdmpbcmppeafpodcjpagmegdpci\0.0.21_0<br></code></pre></td></tr></table></div></figure><ul><li>确保路径精确到版本号文件夹后，点击“打包扩展程序”按钮。<br>Chrome 会生成 <code>.crx</code> 文件（插件包）和 <code>.pem</code> 文件（密钥文件）。</li></ul><hr><h3 id="二、在-Edge-中安装打包的-Chrome-插件"><a href="#二、在-Edge-中安装打包的-Chrome-插件" class="headerlink" title="二、在 Edge 中安装打包的 Chrome 插件"></a>二、在 Edge 中安装打包的 Chrome 插件</h3><h4 id="1-打开-Edge-扩展程序页面"><a href="#1-打开-Edge-扩展程序页面" class="headerlink" title="1. 打开 Edge 扩展程序页面"></a>1. 打开 Edge 扩展程序页面</h4><p>打开 Edge 浏览器，在地址栏输入 <code>edge://extensions</code> 并按下回车，进入扩展程序管理页面。</p><h4 id="2-启用“开发者模式”"><a href="#2-启用“开发者模式”" class="headerlink" title="2. 启用“开发者模式”"></a>2. 启用“开发者模式”</h4><p>在页面下方启用“开发者模式”。</p><h4 id="3-安装-Chrome-插件包"><a href="#3-安装-Chrome-插件包" class="headerlink" title="3. 安装 Chrome 插件包"></a>3. 安装 Chrome 插件包</h4><p>将刚打包的 <code>.crx</code> 文件直接拖入 Edge 的扩展程序页面，Edge 会自动识别并安装插件。</p><hr><h3 id="三、在-Edge-中打包插件"><a href="#三、在-Edge-中打包插件" class="headerlink" title="三、在 Edge 中打包插件"></a>三、在 Edge 中打包插件</h3><h4 id="1-找到-Edge-插件目录"><a href="#1-找到-Edge-插件目录" class="headerlink" title="1. 找到 Edge 插件目录"></a>1. 找到 Edge 插件目录</h4><p>Edge 插件的安装路径为：</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pz2jn7mfcwb3cp"></i><span>PLAINTEXT</span><div class="collapse show" id="collapse-pz2jn7mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">C:\Users\Administrator\AppData\Local\Microsoft\Edge\User Data\Default\Extensions<br></code></pre></td></tr></table></div></figure><p>找到对应插件 ID 的文件夹（例如 <code>adghjpdmpbcmppeafpodcjpagmegdpci</code>）并进入版本号文件夹（如 <code>0.0.21_0</code>）来打包插件。</p><h4 id="2-进入-Edge-扩展程序页面"><a href="#2-进入-Edge-扩展程序页面" class="headerlink" title="2. 进入 Edge 扩展程序页面"></a>2. 进入 Edge 扩展程序页面</h4><p>打开 Edge 浏览器，在地址栏输入 <code>edge://extensions</code> 并进入扩展程序管理页面。</p><h4 id="3-启用“开发者模式”并打包插件"><a href="#3-启用“开发者模式”并打包插件" class="headerlink" title="3. 启用“开发者模式”并打包插件"></a>3. 启用“开发者模式”并打包插件</h4><p>在“开发者模式”启用状态下，点击“打包扩展程序”按钮。选择插件的版本号文件夹，然后 Edge 会生成 <code>.crx</code> 和 <code>.pem</code> 文件。</p><hr><h3 id="四、在-Chrome-中安装-Edge-打包的插件"><a href="#四、在-Chrome-中安装-Edge-打包的插件" class="headerlink" title="四、在 Chrome 中安装 Edge 打包的插件"></a>四、在 Chrome 中安装 Edge 打包的插件</h3><ol><li><p><strong>打开 Chrome 扩展程序页面</strong><br>在 Chrome 中输入 <code>chrome://extensions</code> 并按下回车。</p></li><li><p><strong>启用“开发者模式”</strong><br>右上角启用“开发者模式”。</p></li><li><p><strong>安装插件包</strong><br>将打包好的 <code>.crx</code> 文件拖入 Chrome 浏览器，即可完成安装。</p></li></ol><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p><strong>路径选择</strong> ：必须选择插件的<strong>版本号文件夹</strong> ，而不是上一级的插件 ID 文件夹。</p></li><li><p><strong>启用开发者模式</strong> ：在 Chrome 和 Edge 中安装打包的 <code>.crx</code> 文件时，需启用“开发者模式”。</p></li></ul><p>通过以上步骤，您可以在 Chrome 和 Edge 之间互相打包与安装插件。</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>谷歌安装</tag>
      
      <tag>网页代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令大全手册</title>
    <link href="/2024/11/14/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2024/11/14/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Git命令大全手册"><a href="#Git命令大全手册" class="headerlink" title="Git命令大全手册"></a>Git命令大全手册</h1><p><img src="https://app.fekepj.com/list-tu/2024/11/14/fc3177c31ed7c6e58e8874d2a0bd5676.jpg"></p><h3 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4vim4pmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-4vim4pmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">git init # 初始化本地git仓库（创建新仓库） git config --global user.name &quot;xxx&quot; # 配置用户名 git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件 git config --global color.ui true # git status等命令自动着色 git config --global color.status auto git config --global color.diff auto git config --global color.branch auto git config --global color.interactive auto git config --global --unset http.proxy # remove proxy configuration on git git clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库 git status # 查看当前版本状态（是否修改） git add xyz # 添加xyz文件至index git add . # 增加当前子目录下所有更改过的文件至index git commit -m &#x27;xxx&#x27; # 提交 git commit --amend -m &#x27;xxx&#x27; # 合并上一次提交（用于反复修改） git commit -am &#x27;xxx&#x27; # 将add和commit合为一步 git rm xxx # 删除index中的文件 git rm -r * # 递归删除 git log # 显示提交日志 git log -1 # 显示1行日志 -n为n行 git log -5 git log --stat # 显示提交日志及相关变动文件 git log -p -m git show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容 git show dfb02 # 可只用commitid的前几位 git show HEAD # 显示HEAD提交日志 git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本 git tag # 显示已存在的tag git tag -a v2.0 -m &#x27;xxx&#x27; # 增加v2.0的tag git show v2.0 # 显示v2.0的日志及详细内容 git log v2.0 # 显示v2.0的日志 git diff # 显示所有未添加至index的变更 git diff --cached # 显示所有已添加index但还未commit的变更 git diff HEAD^ # 比较与上一个版本的差异 git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异 git diff origin/master..master # 比较远程分支master上有本地分支master上没有的 git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容 git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch） git branch # 显示本地分支 git branch --contains 50089 # 显示包含提交50089的分支 git branch -a # 显示所有分支 git branch -r # 显示所有原创分支 git branch --merged # 显示所有已合并到当前分支的分支 git branch --no-merged # 显示所有未合并到当前分支的分支 git branch -m master master_copy # 本地分支改名 git checkout -b master_copy # 从当前分支创建新分支master_copy并检出 git checkout -b master master_copy # 上面的完整版 git checkout features/performance # 检出已存在的features/performance分支 git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支 git checkout v2.0 # 检出版本v2.0 git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出 git checkout -- README # 检出head版本的README文件（可用于修改错误回退） git merge origin/master # 合并远程master分支至当前分支 git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改 git push origin master # 将当前分支push到远程master分支 git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支 git push --tags # 把所有tag推送到远程仓库 git fetch # 获取所有远程分支（不更新本地分支，另需merge） git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支 git pull origin master # 获取远程分支master并merge到当前分支 git mv README README2 # 重命名文件README为README2 git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退） git rebase git branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支） git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933 git ls-files # 列出git index包含的文件 git show-branch # 图示当前分支历史 git show-branch --all # 图示所有分支历史 git whatchanged # 显示提交历史对应的文件修改 git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 git ls-tree HEAD # 内部命令：显示某个git对象 git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASH git reflog # 显示所有提交，包括孤立节点 git show HEAD@&#123;5&#125; git show master@&#123;yesterday&#125; # 显示master分支昨天的状态 git log --pretty=format:&#x27;%h %s&#x27; --graph # 图示提交日志 git show HEAD~3 git show -s --pretty=raw 2be7fcb476 git stash # 暂存当前修改，将所有至为HEAD状态 git stash list # 查看所有暂存 git stash show -p stash@&#123;0&#125; # 参考第一次暂存 git stash apply stash@&#123;0&#125; # 应用第一次暂存 git grep &quot;delete from&quot; # 文件中搜索文本“delete from” git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT git gc git fsck<br></code></pre></td></tr></table></div></figure><h3 id="新建：创建一个新的-git-版本库。这个版本库的配置、存储等信息会被保存到git-文件夹中"><a href="#新建：创建一个新的-git-版本库。这个版本库的配置、存储等信息会被保存到git-文件夹中" class="headerlink" title="新建：创建一个新的 git 版本库。这个版本库的配置、存储等信息会被保存到git 文件夹中"></a>新建：创建一个新的 git 版本库。这个版本库的配置、存储等信息会被保存到git 文件夹中</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2cl342mfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-2cl342mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 初始化当前项目 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 directory，只包含 .git 子目录的空目录。 $ git init --bare &lt;directory&gt; # 下载一个项目和它的整个代码历史 # 这个命令就是将一个版本库拷贝到另一个目录中，同时也将分支都拷贝到新的版本库中。这样就可以在新的版本库中提交到远程分支 $ git clone [url]<br></code></pre></td></tr></table></div></figure><h3 id="配置：更改设置。可以是版本库的设置，也可以是系统的或全局的"><a href="#配置：更改设置。可以是版本库的设置，也可以是系统的或全局的" class="headerlink" title="配置：更改设置。可以是版本库的设置，也可以是系统的或全局的"></a>配置：更改设置。可以是版本库的设置，也可以是系统的或全局的</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mvawcwmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-mvawcwmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 输出、设置基本的全局变量 $ git config --global user.email $ git config --global user.name $ git config --global user.email &quot;MyEmail@gmail.com&quot; $ git config --global user.name &quot;My Name&quot; # 定义当前用户所有提交使用的作者邮箱。 $ git config --global alias.&lt;alias-name&gt; &lt;git-command&gt; # 为Git命令创建一个快捷方式（别名）。 $ git config --system core.editor &lt;editor&gt;<br></code></pre></td></tr></table></div></figure><h3 id="状态：显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同"><a href="#状态：显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同" class="headerlink" title="状态：显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同"></a>状态：显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5yjjitmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-5yjjitmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 显示分支，未跟踪文件，更改和其他不同 $ git status # 查看其他的git status的用法 $ git help status<br></code></pre></td></tr></table></div></figure><h3 id="信息：获取某些文件，某些分支，某次提交等-git-信息"><a href="#信息：获取某些文件，某些分支，某次提交等-git-信息" class="headerlink" title="信息：获取某些文件，某些分支，某次提交等 git 信息"></a>信息：获取某些文件，某些分支，某次提交等 git 信息</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7uo8qomfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-7uo8qomfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot; # 比较暂存区和版本库差异 $ git diff --staged # 比较暂存区和版本库差异 $ git diff --cached # 仅仅比较统计信息 $ git diff --stat # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog # 查看远程分支 $ git br -r # 创建新的分支 $ git br &lt;new_branch&gt; # 查看各个分支最后提交信息 $ git br -v # 查看已经被合并到当前分支的分支 $ git br --merged # 查看尚未被合并到当前分支的分支 $ git br --no-merged<br></code></pre></td></tr></table></div></figure><h3 id="添加：添加文件到当前工作空间中。如果你不使用-git-add-将文件添加进去，那么这些文件也不会添加到之后的提交之中"><a href="#添加：添加文件到当前工作空间中。如果你不使用-git-add-将文件添加进去，那么这些文件也不会添加到之后的提交之中" class="headerlink" title="添加：添加文件到当前工作空间中。如果你不使用 git add 将文件添加进去，那么这些文件也不会添加到之后的提交之中"></a>添加：添加文件到当前工作空间中。如果你不使用 git add 将文件添加进去，那么这些文件也不会添加到之后的提交之中</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6axgqxmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-6axgqxmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 添加一个文件 $ git add test.js # 添加一个子目录中的文件 $ git add /path/to/file/test.js # 支持正则表达式 $ git add ./*.js # 添加指定文件到暂存区 $ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 $ git add [dir] # 添加当前目录的所有文件到暂存区 $ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交 $ git add -p<br></code></pre></td></tr></table></div></figure><h3 id="删除：rm-和上面的-add-命令相反，从工作空间中去掉某个文件"><a href="#删除：rm-和上面的-add-命令相反，从工作空间中去掉某个文件" class="headerlink" title="删除：rm 和上面的 add 命令相反，从工作空间中去掉某个文件"></a>删除：rm 和上面的 add 命令相反，从工作空间中去掉某个文件</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-n4qjzhmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-n4qjzhmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 移除 HelloWorld.js $ git rm HelloWorld.js # 移除子目录中的文件 $ git rm /pather/to/the/file/HelloWorld.js # 删除工作区文件，并且将这次删除放入暂存区 $ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 $ git rm --cached [file]<br></code></pre></td></tr></table></div></figure><h3 id="分支：管理分支，可以通过下列命令对分支进行增删改查切换等"><a href="#分支：管理分支，可以通过下列命令对分支进行增删改查切换等" class="headerlink" title="分支：管理分支，可以通过下列命令对分支进行增删改查切换等"></a>分支：管理分支，可以通过下列命令对分支进行增删改查切换等</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-b4ebmnmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-b4ebmnmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 查看所有的分支和远程分支 $ git branch -a # 创建一个新的分支 $ git branch [branch-name] # 重命名分支 # git branch -m &lt;旧名称&gt; &lt;新名称&gt; $ git branch -m [branch-name] [new-branch-name] # 编辑分支的介绍 $ git branch [branch-name] --edit-description # 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] # 切换到某个分支 $ git co &lt;branch&gt; # 创建新的分支，并且切换过去 $ git co -b &lt;new_branch&gt; # 基于branch创建新的new_branch $ git co -b &lt;new_branch&gt; &lt;branch&gt; # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除 $ git co $id # 把某次历史提交记录checkout出来，创建成一个分支 $ git co $id -b &lt;new_branch&gt; # 删除某个分支 $ git br -d &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) $ git br -D &lt;branch&gt;<br></code></pre></td></tr></table></div></figure><h3 id="检出：将当前工作空间更新到索引所标识的或者某一特定的工作空间"><a href="#检出：将当前工作空间更新到索引所标识的或者某一特定的工作空间" class="headerlink" title="检出：将当前工作空间更新到索引所标识的或者某一特定的工作空间"></a>检出：将当前工作空间更新到索引所标识的或者某一特定的工作空间</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cyts48mfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-cyts48mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 检出一个版本库，默认将更新到master分支 $ git checkout # 检出到一个特定的分支 $ git checkout branchName # 新建一个分支，并且切换过去，相当于&quot;git branch &lt;名字&gt;; git checkout &lt;名字&gt;&quot; $ git checkout -b newBranch<br></code></pre></td></tr></table></div></figure><h3 id="远程同步：远程同步的远端分支"><a href="#远程同步：远程同步的远端分支" class="headerlink" title="远程同步：远程同步的远端分支"></a>远程同步：远程同步的远端分支</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l9lpt2mfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-l9lpt2mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 下载远程仓库的所有变动 $ git fetch [remote] # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 查看远程服务器地址和仓库名称 $ git remote -v # 添加远程仓库地址 $ git remote add origin git@ github:xxx/xxx.git # 设置远程仓库地址(用于修改远程仓库地址) $ git remote set-url origin git@ github.com:xxx/xxx.git # 删除远程仓库 $ git remote rm &lt;repository&gt; # 上传本地指定分支到远程仓库 # 把本地的分支更新到远端origin的master分支上 # git push &lt;远端&gt; &lt;分支&gt; # git push 相当于 git push origin master $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force # 推送所有分支到远程仓库 $ git push [remote] --all<br></code></pre></td></tr></table></div></figure><h3 id="撤销："><a href="#撤销：" class="headerlink" title="撤销："></a>撤销：</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ktrp8emfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-ktrp8emfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 恢复最后一次提交的状态 $ git revert HEAD # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop # 列所有stash $ git stash list # 恢复暂存的内容 $ git stash apply # 删除暂存区 $ git stash drop<br></code></pre></td></tr></table></div></figure><h3 id="提交：commit-将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息"><a href="#提交：commit-将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息" class="headerlink" title="提交：commit 将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息"></a>提交：commit 将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o2nbqgmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-o2nbqgmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 提交暂存区到仓库区附带提交信息 $ git commit -m [message] # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ...<br></code></pre></td></tr></table></div></figure><h3 id="diff-显示当前工作空间和提交的不同"><a href="#diff-显示当前工作空间和提交的不同" class="headerlink" title="diff: 显示当前工作空间和提交的不同"></a>diff: 显示当前工作空间和提交的不同</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4tiouzmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-4tiouzmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 显示工作目录和索引的不同 $ git diff # 显示索引和最近一次提交的不同 $ git diff --cached # 显示工作目录和最近一次提交的不同 $ git diff HEAD<br></code></pre></td></tr></table></div></figure><h3 id="grep：可以在版本库中快速查找"><a href="#grep：可以在版本库中快速查找" class="headerlink" title="grep：可以在版本库中快速查找"></a>grep：可以在版本库中快速查找</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tj857wmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-tj857wmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">可选配置： # 感谢Travis Jeffery提供的以下用法： # 在搜索结果中显示行号 $ git config --global grep.lineNumber true # 是搜索结果可读性更好 $ git config --global alias.g &quot;grep --break --heading --line-number&quot; # 在所有的java中查找variableName $ git grep &#x27;variableName&#x27; -- &#x27;*.java&#x27; # 搜索包含 &quot;arrayListName&quot; 和, &quot;add&quot; 或 &quot;remove&quot; 的所有行 $ git grep -e &#x27;arrayListName&#x27; --and \( -e add -e remove \)<br></code></pre></td></tr></table></div></figure><h3 id="log-显示这个版本库的所有提交"><a href="#log-显示这个版本库的所有提交" class="headerlink" title="log: 显示这个版本库的所有提交"></a>log: 显示这个版本库的所有提交</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zhrvyvmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-zhrvyvmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 显示所有提交 $ git log # 显示某几条提交信息 $ git log -n 10 # 仅显示合并提交 $ git log --merges # 查看该文件每次提交记录 $ git log &lt;file&gt; # 查看每次详细修改内容的diff $ git log -p &lt;file&gt; # 查看最近两次详细修改内容的diff $ git log -p -2 #查看提交统计信息 $ git log --stat<br></code></pre></td></tr></table></div></figure><h3 id="merge-合并就是将外部的提交合并到自己的分支中"><a href="#merge-合并就是将外部的提交合并到自己的分支中" class="headerlink" title="merge: 合并就是将外部的提交合并到自己的分支中"></a>merge: 合并就是将外部的提交合并到自己的分支中</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5pa79vmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-5pa79vmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 将其他分支合并到当前分支 $ git merge branchName # 在合并时创建一个新的合并后的提交 # 不要 Fast-Foward 合并，这样可以生成 merge 提交 $ git merge --no-ff branchName<br></code></pre></td></tr></table></div></figure><h3 id="mv：重命名或移动一个文件"><a href="#mv：重命名或移动一个文件" class="headerlink" title="mv：重命名或移动一个文件"></a>mv：重命名或移动一个文件</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6dkprsmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-6dkprsmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 重命名 $ git mv test.js test2.js # 移动 $ git mv test.js ./new/path/test.js # 改名文件，并且将这个改名放入暂存区 $ git mv [file-original] [file-renamed] # 强制重命名或移动 # 这个文件已经存在，将要覆盖掉 $ git mv -f myFile existingFile<br></code></pre></td></tr></table></div></figure><h3 id="tag"><a href="#tag" class="headerlink" title="tag:"></a>tag:</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6bir7fmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-6bir7fmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 列出所有tag $ git tag # 新建一个tag在当前commit $ git tag [tag] # 新建一个tag在指定commit $ git tag [tag] [commit] # 删除本地tag $ git tag -d [tag] # 删除远程tag $ git push origin :refs/tags/[tagName] # 查看tag信息 $ git show [tag] # 提交指定tag $ git push [remote] [tag] # 提交所有tag $ git push [remote] --tags # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag]<br></code></pre></td></tr></table></div></figure><h3 id="push：从远端版本库合并到当前分支"><a href="#push：从远端版本库合并到当前分支" class="headerlink" title="push：从远端版本库合并到当前分支"></a>push：从远端版本库合并到当前分支</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7k6oavmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-7k6oavmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 从远端origin的master分支更新版本库 # git pull &lt;远端&gt; &lt;分支&gt; $ git pull origin master # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 $ git pull --no-ff<br></code></pre></td></tr></table></div></figure><h3 id="ci："><a href="#ci：" class="headerlink" title="ci："></a>ci：</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6yvrycmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-6yvrycmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ git ci &lt;file&gt; $ git ci . # 将git add, git rm和git ci等操作都合并在一起做 $ git ci -a $ git ci -am &quot;some comments&quot; # 修改最后一次提交记录 $ git ci --amend<br></code></pre></td></tr></table></div></figure><h3 id="rebase（谨慎使用）：将一个分支上所有的提交历史都应用到另一个分支上不要在一个已经公开的远端分支上使用-rebase"><a href="#rebase（谨慎使用）：将一个分支上所有的提交历史都应用到另一个分支上不要在一个已经公开的远端分支上使用-rebase" class="headerlink" title="rebase（谨慎使用）：将一个分支上所有的提交历史都应用到另一个分支上不要在一个已经公开的远端分支上使用 rebase."></a>rebase（谨慎使用）：将一个分支上所有的提交历史都应用到另一个分支上不要在一个已经公开的远端分支上使用 rebase.</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bglnktmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-bglnktmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 将experimentBranch应用到master上面 # git rebase &lt;basebranch&gt; &lt;topicbranch&gt; $ git rebase master experimentBranch reset (谨慎使用) 将当前的头指针复位到一个特定的状态。这样可以使你撤销 merge、pull、commits、add 等 这是个很强大的命令，但是在使用时一定要清楚其所产生的后果 # 使 staging 区域恢复到上次提交时的状态，不改变现在的工作目录 $ git reset # 使 staging 区域恢复到上次提交时的状态，覆盖现在的工作目录 $ git reset --hard # 将当前分支恢复到某次提交，不改变现在的工作目录 # 在工作目录中所有的改变仍然存在 $ git reset dha78as # 将当前分支恢复到某次提交，覆盖现在的工作目录 # 并且删除所有未提交的改变和指定提交之后的所有提交 $ git reset --hard dha78as<br></code></pre></td></tr></table></div></figure><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-95j7wxmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-95j7wxmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"># 生成一个可供发布的压缩包 $ git archive # 打补丁 $ git apply ../sync.patch # 测试补丁能否成功 $ git apply --check ../sync.patch # 查看Git的版本 $ git --version<br></code></pre></td></tr></table></div></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dsvyekmfcwb3cr"></i><span>TEXT</span><div class="collapse show" id="collapse-dsvyekmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text"><br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GPT学习</tag>
      
      <tag>GitHub</tag>
      
      <tag>Markdown代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客一键发布新文章与级管理可视化介面软件</title>
    <link href="/2024/11/10/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83%E6%96%B0%E6%96%87%E7%AB%A0%E4%B8%8E%E7%BA%A7%E7%AE%A1%E7%90%86%E5%8F%AF%E8%A7%86%E5%8C%96%E4%BB%8B%E9%9D%A2%E8%BD%AF%E4%BB%B6/"/>
    <url>/2024/11/10/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83%E6%96%B0%E6%96%87%E7%AB%A0%E4%B8%8E%E7%BA%A7%E7%AE%A1%E7%90%86%E5%8F%AF%E8%A7%86%E5%8C%96%E4%BB%8B%E9%9D%A2%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客一键发布新文章与级管理可视化介面软件"><a href="#Hexo博客一键发布新文章与级管理可视化介面软件" class="headerlink" title="Hexo博客一键发布新文章与级管理可视化介面软件"></a>Hexo博客一键发布新文章与级管理可视化介面软件</h1><p>我们希望开发一个 Hexo 博客管理工具，方便快速发布文章并进行源文件备份。具体功能需求如下：</p><ol><li><p>文档上传与标题提取</p><p> •Markdown 粘贴窗口：用户将文章内容粘贴至软件的粘贴框内，软件自动识别第一行 # 标题，并提取为文章标题。<br> •独立编辑窗口：粘贴框可以在软件内独立设计，不依赖系统自带的文本软件，提升使用便捷性。</p></li><li><p>分类与标签管理</p><p> •选择分类和标签：从现有 Hexo 分类和标签中选择，也可以添加新分类和新标签。</p></li><li><p>Git 集成与分支管理</p><p> •分支推送设置：<br> •主分支 main：用于发布博客内容。<br> •备份分支 befe：用于备份源文件。<br> •Git 命令调用：软件直接调用 Git 命令，减少复杂操作，方便用户管理博客内容与备份。</p></li><li><p>运行状态观察与结果提示</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>手机使用日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始编程教程</title>
    <link href="/2024/11/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E7%A8%8B%E6%95%99%E7%A8%8B/"/>
    <url>/2024/11/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%BC%96%E7%A8%8B%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="从零开始：如何在新电脑上开发并生成可执行文件的完整指南"><a href="#从零开始：如何在新电脑上开发并生成可执行文件的完整指南" class="headerlink" title="从零开始：如何在新电脑上开发并生成可执行文件的完整指南"></a>从零开始：如何在新电脑上开发并生成可执行文件的完整指南</h1><h2 id="1-基础环境安装"><a href="#1-基础环境安装" class="headerlink" title="1. 基础环境安装"></a>1. 基础环境安装</h2><h3 id="1-1-安装-Git"><a href="#1-1-安装-Git" class="headerlink" title="1.1 安装 Git"></a>1.1 安装 Git</h3><ol><li>访问 <a href="https://git-scm.com/downloads">Git 官网</a></li><li>下载对应系统版本的 Git</li><li>安装步骤：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vgtap7mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-vgtap7mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装完成后，验证安装</span><br>git --version<br></code></pre></td></tr></table></div></figure></li></ol><h3 id="1-2-安装代码编辑器-VS-Code"><a href="#1-2-安装代码编辑器-VS-Code" class="headerlink" title="1.2 安装代码编辑器 VS Code"></a>1.2 安装代码编辑器 VS Code</h3><ol><li>访问 <a href="https://code.visualstudio.com/">Visual Studio Code 官网</a></li><li>下载并安装</li><li>推荐安装的扩展：<ul><li>Chinese Language Pack（中文语言包）</li><li>Git Graph（Git 可视化工具）</li><li>Git History（Git 历史记录）</li></ul></li></ol><h2 id="2-配置开发环境"><a href="#2-配置开发环境" class="headerlink" title="2. 配置开发环境"></a>2. 配置开发环境</h2><h3 id="2-1-配置-Git"><a href="#2-1-配置-Git" class="headerlink" title="2.1 配置 Git"></a>2.1 配置 Git</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6y6lpnmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-6y6lpnmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置用户名和邮箱</span><br>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br><span class="hljs-comment"># 生成 SSH 密钥（如果需要）</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></div></figure><h3 id="2-2-安装编程语言环境"><a href="#2-2-安装编程语言环境" class="headerlink" title="2.2 安装编程语言环境"></a>2.2 安装编程语言环境</h3><p>以 Python 为例：</p><ol><li>访问 <a href="https://www.python.org/downloads/">Python 官网</a></li><li>下载并安装 Python</li><li>验证安装：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-m7pk1rmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-m7pk1rmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python --version<br>pip --version<br></code></pre></td></tr></table></div></figure></li></ol><h2 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3. 创建项目"></a>3. 创建项目</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2uwf5nmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-2uwf5nmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建项目文件夹</span><br><span class="hljs-built_in">mkdir</span> my_project<br><span class="hljs-built_in">cd</span> my_project<br><br><span class="hljs-comment"># 初始化 Git 仓库</span><br>git init<br><br><span class="hljs-comment"># 创建虚拟环境（Python 项目）</span><br>python -m venv venv<br></code></pre></td></tr></table></div></figure><h2 id="4-编写代码"><a href="#4-编写代码" class="headerlink" title="4. 编写代码"></a>4. 编写代码</h2><p>创建一个简单的 Python 程序示例：</p><figure class="highlight python"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cs7n9qmfcwb3cm"></i><span>PYTHON</span><div class="collapse show" id="collapse-cs7n9qmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tkinter <span class="hljs-keyword">as</span> tk<br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> messagebox<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_message</span>():<br>    messagebox.showinfo(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;Hello, World!&quot;</span>)<br><br>root = tk.Tk()<br>root.title(<span class="hljs-string">&quot;我的第一个程序&quot;</span>)<br>root.geometry(<span class="hljs-string">&quot;300x200&quot;</span>)<br><br>button = tk.Button(root, text=<span class="hljs-string">&quot;点击我&quot;</span>, command=show_message)<br>button.pack(pady=<span class="hljs-number">80</span>)<br><br>root.mainloop()<br></code></pre></td></tr></table></div></figure><h2 id="5-生成可执行文件"><a href="#5-生成可执行文件" class="headerlink" title="5. 生成可执行文件"></a>5. 生成可执行文件</h2><h3 id="5-1-安装-PyInstaller"><a href="#5-1-安装-PyInstaller" class="headerlink" title="5.1 安装 PyInstaller"></a>5.1 安装 PyInstaller</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-w4zbiwmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-w4zbiwmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 激活虚拟环境</span><br><span class="hljs-comment"># Windows:</span><br>venv\Scripts\activate<br><span class="hljs-comment"># Linux/Mac:</span><br><span class="hljs-built_in">source</span> venv/bin/activate<br><br><span class="hljs-comment"># 安装 PyInstaller</span><br>pip install pyinstaller<br></code></pre></td></tr></table></div></figure><h3 id="5-2-打包程序"><a href="#5-2-打包程序" class="headerlink" title="5.2 打包程序"></a>5.2 打包程序</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-99s4p3mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-99s4p3mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 基本打包命令</span><br>pyinstaller --onefile --windowed src/main.py<br><br><span class="hljs-comment"># 或者使用更多选项</span><br>pyinstaller --onefile --windowed --icon=app.ico --name=<span class="hljs-string">&quot;我的程序&quot;</span> src/main.py<br></code></pre></td></tr></table></div></figure><h2 id="6-版本控制"><a href="#6-版本控制" class="headerlink" title="6. 版本控制"></a>6. 版本控制</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-319kgdmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-319kgdmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加 .gitignore 文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;venv/&quot;</span> &gt; .gitignore<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dist/&quot;</span> &gt;&gt; .gitignore<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;build/&quot;</span> &gt;&gt; .gitignore<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*.spec&quot;</span> &gt;&gt; .gitignore<br><br><span class="hljs-comment"># 提交代码</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;初始化项目&quot;</span><br></code></pre></td></tr></table></div></figure><h2 id="7-项目结构"><a href="#7-项目结构" class="headerlink" title="7. 项目结构"></a>7. 项目结构</h2><p>最终的项目结构应该如下：</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1flxb8mfcwb3cm"></i><span>STYLUS</span><div class="collapse show" id="collapse-1flxb8mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">my_project/<br>├── <span class="hljs-attribute">src</span>/<br>│   └── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br>├── venv/<br>├── dist/<br>│   └── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.exe</span><br>├── <span class="hljs-selector-class">.gitignore</span><br>└── README.md<br></code></pre></td></tr></table></div></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>生成的可执行文件在 <code>dist</code> 文件夹中</li><li>确保所有依赖都已正确安装</li><li>如果程序依赖其他文件，需要在打包时指定</li><li>建议在 <code>README.md</code> 中记录项目信息和使用说明</li></ol><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><p>如果打包后运行出错，可以尝试：</p><ul><li>检查依赖是否完整</li><li>使用 <code>--debug all</code> 参数查看详细信息</li><li>确保代码中的文件路径使用相对路径</li></ul></li><li><p>如果需要包含额外文件：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8m7fv5mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-8m7fv5mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pyinstaller --onefile --windowed --add-data <span class="hljs-string">&quot;resources;resources&quot;</span> src/main.py<br></code></pre></td></tr></table></div></figure></li></ol><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ol><li><p>关于虚拟环境：</p><ul><li>虚拟环境可以保持项目依赖的独立性</li><li>每个项目最好使用独立的虚拟环境</li><li>记得在 <code>requirements.txt</code> 中记录依赖：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1a1lr4mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-1a1lr4mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip freeze &gt; requirements.txt<br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>关于 Git 使用：</p><ul><li>经常提交代码保存进度</li><li>使用有意义的提交信息</li><li>可以使用分支管理功能特性开发</li></ul></li><li><p>关于打包优化：</p><ul><li>使用 <code>--noconsole</code> 参数隐藏控制台</li><li>使用 <code>--clean</code> 清理临时文件</li><li>可以使用 UPX 压缩可执行文件大小</li></ul></li></ol><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ol><li><a href="https://git-scm.com/doc">Git 官方文档</a></li><li><a href="https://docs.python.org/">Python 官方文档</a></li><li><a href="https://pyinstaller.org/en/stable/">PyInstaller 文档</a></li><li><a href="https://code.visualstudio.com/docs">VS Code 文档</a></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个教程涵盖了从环境搭建到生成可执行文件的完整过程。通过这个过程，你可以：</p><ul><li>建立标准的开发环境</li><li>使用版本控制管理代码</li><li>创建简单的图形界面程序</li><li>生成独立的可执行文件</li></ul><p>如果遇到问题，建议查看官方文档或在开发社区寻求帮助。祝你编程愉快！</p>]]></content>
    
    
    <categories>
      
      <category>服务器使用命令</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>李祖宇地铁查询</title>
    <link href="/2024/10/31/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E6%9D%8E%E7%A5%96%E5%AE%87%E5%9C%B0%E9%93%81%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/10/31/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E6%9D%8E%E7%A5%96%E5%AE%87%E5%9C%B0%E9%93%81%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[ <!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta http-equiv="X-UA-Compatible" content="IE=edge">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>站点信息查询</title></head><body>  <h1>地铁站点信息查询</h1>  <input type="number" id="inputNumber">  <button onclick="query()">查询</button>  <div id="result"></div>  <script>    function query() {      let num = parseInt(document.getElementById('inputNumber').value);      let resultDiv = document.getElementById('result');      switch (num) {        case 0:          resultDiv.innerHTML = "101,西塱,99018  102,坑口  103,花湾地  104,芳村  105,黄沙,607<br>106,万寿路  107,陈家祠，812  108,西门口  109,公园前，213  110，农讲所<br>111,烈士陵园  112,东山口,614  113,杨箕,511  114,体育西路，311  115,体育中心  116,广州东站,318<br><br>201,广州南站，223，95027，701，可换乘广惠城际的番禺站  202,石壁，702  203,会江  204,南浦  205,洛溪<br>206,南洲，99024  207,东晓南  208,江泰路  209,昌岗，819  210,江南西<br>211,市二宫  212,海珠广场，610  213,公园前，109  214,纪念堂  215,越秀公园<br>216,广州火车站，506  217,三元里  218,飞翔公园  219,白云公园  220,白云文化广场<br>221,萧岗  222,江夏  223,黄边  224,嘉禾望岗，325，1401<br><br>301,番禺广场，1803，2201  302,市桥  303,汉溪长隆，705，可换乘广惠城际的广州长隆站  304,大石  305,厦滘<br>306,沥滘，99025  307,大塘  308,客村，823  309,广州塔，921，9801  310,珠江新城，513<br>311,体育西路，114  312,石牌桥  313,岗顶  314,华师  315,五山<br>316,天河客运站，621  317,林和西，9209  318,广州东站，116  319,燕塘，620  320,梅花园<br>321,京溪南方医院  322,同和  323,永泰  324,白云大道北  325,嘉禾望岗，224，1401<br>326,龙归  327,人和  328,高增，911  329,机场南(1号航站楼)  330,机场北(2号航站楼)，可换乘广州东环城际的白云机场北<br><br>401,南沙客运港";          break;        case 1:          resultDiv.innerHTML = "101,西塱,99018<br>102,坑口<br>103,花湾地<br>104,芳村<br>105,黄沙,607<br>106,万寿路<br>107,陈家祠，812<br>108,西门口<br>109,公园前，213";          break;        case 101:          resultDiv.innerHTML = "西塱,99018";          break;        case 102:          resultDiv.innerHTML = "坑口";          break;        case 103:          resultDiv.innerHTML = "花湾地";          break;        case 104:          resultDiv.innerHTML = "芳村";          break;        case 105:          resultDiv.innerHTML = "黄沙,607";          break;        case 106:          resultDiv.innerHTML = "万寿路";          break;        case 107:          resultDiv.innerHTML = "陈家祠，8012";          break;        case 108:          resultDiv.innerHTML = "西门口";          break;        case 109:          resultDiv.innerHTML = "公园前，213";          break;        case 110:          resultDiv.innerHTML = "农讲所";          break;        case 111:          resultDiv.innerHTML = "烈士陵园";          break;        case 112:          resultDiv.innerHTML = "东山口，614";          break;        case 113:          resultDiv.innerHTML = "杨箕，511";          break;        case 114:          resultDiv.innerHTML = "体育西路，311";          break;        case 115:          resultDiv.innerHTML = "体育中心";          break;        case 116:          resultDiv.innerHTML = "广州东站，318";          break;        case 201:          resultDiv.innerHTML = "广州南站，223，95027，701，可换乘广惠城际的番禺站";          break;        case 202:          resultDiv.innerHTML = "石壁，702";          break;        case 203:          resultDiv.innerHTML = "会江";          break;        case 204:          resultDiv.innerHTML = "南浦";          break;        case 205:          resultDiv.innerHTML = "洛溪";          break;        case 206:          resultDiv.innerHTML = "南洲，99024";          break;        case 207:          resultDiv.innerHTML = "东晓南";          break;        case 208:          resultDiv.innerHTML = "江泰路";          break;        case 209:          resultDiv.innerHTML = "昌岗，819";          break;        case 210:          resultDiv.innerHTML = "江南西";          break;        case 211:          resultDiv.innerHTML = "市二宫";          break;        case 212:          resultDiv.innerHTML = "海珠广场，610";          break;        case 213:          resultDiv.innerHTML = "公园前，109";          break;        case 214:          resultDiv.innerHTML = "纪念堂";          break;        case 215:          resultDiv.innerHTML = "越秀公园";          break;        case 216:          resultDiv.innerHTML = "广州火车站，506";          break;        case 217:          resultDiv.innerHTML = "三元里";          break;        case 218:          resultDiv.innerHTML = "飞翔公园";          break;        case 219:          resultDiv.innerHTML = "白云公园";          break;        case 220:          resultDiv.innerHTML = "白云文化广场";          break;        case 221:          resultDiv.innerHTML = "萧岗";          break;        case 222:          resultDiv.innerHTML = "江夏";          break;        case 223:          resultDiv.innerHTML = "黄边";          break;        case 224:          resultDiv.innerHTML = "嘉禾望岗，325，1401";          break;        case 301:          resultDiv.innerHTML = "番禺广场，1803，2201";          break;        case 302:          resultDiv.innerHTML = "市桥";          break;        case 303:          resultDiv.innerHTML = "汉溪长隆，705，可换乘广惠城际的广州长隆站";          break;        case 304:          resultDiv.innerHTML = "大石";          break;        case 305:          resultDiv.innerHTML = "厦滘";          break;        case 306:          resultDiv.innerHTML = "沥滘，99025";          break;        case 307:          resultDiv.innerHTML = "大塘";          break;        case 308:          resultDiv.innerHTML = "客村，823";          break;        case 309:          resultDiv.innerHTML = "广州塔，921，9801";          break;        case 310:          resultDiv.innerHTML = "珠江新城，513";          break;        case 311:          resultDiv.innerHTML = "体育西路，114";          break;        case 312:          resultDiv.innerHTML = "石牌桥";          break;        case 313:          resultDiv.innerHTML = "岗顶";          break;        case 314:          resultDiv.innerHTML = "华师";          break;        case 315:          resultDiv.innerHTML = "五山";          break;        case 316:          resultDiv.innerHTML = "天河客运站，621";          break;        case 317:          resultDiv.innerHTML = "林和西，9209";          break;        case 318:          resultDiv.innerHTML = "广州东站，116";          break;        case 319:          resultDiv.innerHTML = "燕塘，620";          break;        case 320:          resultDiv.innerHTML = "梅花园";          break;        case 321:          resultDiv.innerHTML = "京溪南方医院";          break;        case 322:          resultDiv.innerHTML = "同和";          break;        case 323:          resultDiv.innerHTML = "永泰";          break;        case 324:          resultDiv.innerHTML = "白云大道北";          break;        case 325:          resultDiv.innerHTML = "嘉禾望岗，224，1401";          break;        case 326:          resultDiv.innerHTML = "龙归";          break;        case 327:          resultDiv.innerHTML = "人和";          break;        case 328:          resultDiv.innerHTML = "高增，911";          break;        case 329:          resultDiv.innerHTML = "机场南(1号航站楼)";          break;        case 330:          resultDiv.innerHTML = "机场北(2号航站楼)，可换乘广州东环城际的白云机场北";          break;        case 401:          resultDiv.innerHTML = "南沙客运港";          break;        default:          resultDiv.innerHTML = "无";      }    }  </script>  <body>  <img src="https://app.fekepj.com/list-tu/2024/10/31/5de5a66989e5505fb715313eeca83ea4.webp" width="300" height="300" /><body>  <li><a href="index.html">返回主页</a></li></body></html>]]></content>
    
    
    <categories>
      
      <category>生活与日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>广州地铁</tag>
      
      <tag>祖宇代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提取网页内容中的pt_key和pt_pin代码</title>
    <link href="/2024/10/31/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/%E6%8F%90%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E4%B8%AD%E7%9A%84pt_key%E5%92%8Cpt_pin%E4%BB%A3%E7%A0%81/"/>
    <url>/2024/10/31/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/%E6%8F%90%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E4%B8%AD%E7%9A%84pt_key%E5%92%8Cpt_pin%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="提取网页内容中的pt-key和pt-pin代码"><a href="#提取网页内容中的pt-key和pt-pin代码" class="headerlink" title="提取网页内容中的pt_key和pt_pin代码"></a>提取网页内容中的pt_key和pt_pin代码</h1><p>在这篇博文中，我们将学习如何提取 <code>pt_key</code> 和 <code>pt_pin</code> 的值。<br>这是一个演示，也是一个能用的工具</p> <!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>提取 pt_key 和 pt_pin</title></head><body><h1>提取 pt_key 和 pt_pin</h1><p>请在下面的文本框中输入内容，然后点击“提取”按钮。</p><!-- 输入框 --><textarea id="inputContent" rows="10" cols="50" placeholder="在此输入包含 pt_key 和 pt_pin 的文本"></textarea><br><button onclick="extractPtKeyAndPtPin()">提取</button><!-- 显示结果 --><div id="result"></div><script>// Function to extract pt_key and pt_pin values from the input contentfunction extractPtKeyAndPtPin() {    // Get the content from the textarea    const content = document.getElementById("inputContent").value;    // Regular expressions to match pt_key and pt_pin values    const ptKeyRegex = /pt_key=([^;]*)/;    const ptPinRegex = /pt_pin=([^;]*)/;        // Extract pt_key    const ptKeyMatch = content.match(ptKeyRegex);    const ptKey = ptKeyMatch ? ptKeyMatch[1] : "未找到 pt_key";        // Extract pt_pin    const ptPinMatch = content.match(ptPinRegex);    const ptPin = ptPinMatch ? ptPinMatch[1] : "未找到 pt_pin";        // Display the extracted values in the result div    const resultDiv = document.getElementById("result");    resultDiv.innerHTML = `<p>pt_key: ${ptKey}</p><p>pt_pin: ${ptPin}</p>`;}</script></body></html><hr><h2 id="下面是讲解"><a href="#下面是讲解" class="headerlink" title="下面是讲解"></a>下面是讲解</h2><p>在 Markdown 文件中嵌入 JavaScript 代码</p><p>使用 <code>&lt;script&gt;</code> 标签将 JavaScript 代码嵌入 HTML 中，以下是一个示例这是一个index.html文件的所有代码：</p><figure class="highlight dust"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ux3pammfcwb3cp"></i><span>DUST</span><div class="collapse show" id="collapse-ux3pammfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- HTML 和 JavaScript 代码 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputContent&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;在此输入包含 pt_key 和 pt_pin 的文本&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;extractPtKeyAndPtPin()&quot;</span>&gt;</span>提取<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 提取 pt_key 和 pt_pin 的 JavaScript 函数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">extractPtKeyAndPtPin</span>(<span class="hljs-params"></span>) </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">这里是代码........</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></div></figure><h3 id="禁用代码转义"><a href="#禁用代码转义" class="headerlink" title="禁用代码转义"></a>禁用代码转义</h3><p>Hexo 默认会对内容进行转义，可以通过 <code>...</code> 标签包裹 JavaScript 代码，防止转义：</p><figure class="highlight django"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6ewndwmfcwb3cp"></i><span>DJANGO</span><div class="collapse show" id="collapse-6ewndwmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-comment">&lt;!-- HTML 和 JavaScript 代码 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputContent&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;在此输入包含 pt_key 和 pt_pin 的文本&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;extractPtKeyAndPtPin()&quot;</span>&gt;</span>提取<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">raw</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 提取 pt_key 和 pt_pin 的 JavaScript 函数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">extractPtKeyAndPtPin</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">这里是代码........</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endraw</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></div></figure><p>上面这个方法也是可以的</p><p> 也可以通过 &#96;...包括所有代码例如：</p><figure class="highlight django"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-k91ycxmfcwb3cp"></i><span>DJANGO</span><div class="collapse show" id="collapse-k91ycxmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">raw</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- HTML 和 JavaScript 代码 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputContent&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;在此输入包含 pt_key 和 pt_pin 的文本&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;extractPtKeyAndPtPin()&quot;</span>&gt;</span>提取<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 提取 pt_key 和 pt_pin 的 JavaScript 函数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">extractPtKeyAndPtPin</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">这里是代码........</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endraw</span> %&#125;</span><br></code></pre></td></tr></table></div></figure><p>理论上都是可以的！</p><p>我就是用下面的方法这就是上面工具用到的所有代码：</p><figure class="highlight django"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-79zkv7mfcwb3cp"></i><span>DJANGO</span><div class="collapse show" id="collapse-79zkv7mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">raw</span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>提取 pt_key 和 pt_pin<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>提取 pt_key 和 pt_pin<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请在下面的文本框中输入内容，然后点击“提取”按钮。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputContent&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;在此输入包含 pt_key 和 pt_pin 的文本&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;extractPtKeyAndPtPin()&quot;</span>&gt;</span>提取<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 显示结果 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// Function to extract pt_key and pt_pin values from the input content</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">extractPtKeyAndPtPin</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// Get the content from the textarea</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> content = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;inputContent&quot;</span>).<span class="hljs-property">value</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// Regular expressions to match pt_key and pt_pin values</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> ptKeyRegex = <span class="hljs-regexp">/pt_key=([^;]*)/</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> ptPinRegex = <span class="hljs-regexp">/pt_pin=([^;]*)/</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// Extract pt_key</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> ptKeyMatch = content.<span class="hljs-title function_">match</span>(ptKeyRegex);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> ptKey = ptKeyMatch ? ptKeyMatch[<span class="hljs-number">1</span>] : <span class="hljs-string">&quot;未找到 pt_key&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// Extract pt_pin</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> ptPinMatch = content.<span class="hljs-title function_">match</span>(ptPinRegex);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> ptPin = ptPinMatch ? ptPinMatch[<span class="hljs-number">1</span>] : <span class="hljs-string">&quot;未找到 pt_pin&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// Display the extracted values in the result div</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> resultDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;result&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    resultDiv.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;p&gt;pt_key: <span class="hljs-subst">$&#123;ptKey&#125;</span>&lt;/p&gt;&lt;p&gt;pt_pin: <span class="hljs-subst">$&#123;ptPin&#125;</span>&lt;/p&gt;`</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endraw</span> %&#125;</span><br></code></pre></td></tr></table></div></figure><p>详细能用吧！直接复去创建一个html文件即可用了！</p>]]></content>
    
    
    <categories>
      
      <category>网页代码</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透ZeroTier和路由器上进行一些配置</title>
    <link href="/2024/10/31/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8FZeroTier%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/10/31/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8FZeroTier%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%8A%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="内网穿透ZeroTier和路由器上进行一些配置"><a href="#内网穿透ZeroTier和路由器上进行一些配置" class="headerlink" title="内网穿透ZeroTier和路由器上进行一些配置"></a>内网穿透ZeroTier和路由器上进行一些配置</h1><p>使用ZeroTier进行内网穿透并访问内网设备，需要在ZeroTier和路由器上进行一些配置：</p><h3 id="1-配置ZeroTier网络"><a href="#1-配置ZeroTier网络" class="headerlink" title="1. 配置ZeroTier网络"></a>1. 配置ZeroTier网络</h3><ul><li>登录 ZeroTier控制台 并创建或选择一个已有的网络。</li><li>进入网络设置页面，在 <code>Advanced</code> 选项中启用 <code>Allow Global IP</code> 和 <code>Allow Managed IPs</code> 以允许全局和托管IP的访问。</li><li>在 <code>IP Assignment</code> 中为你的ZeroTier网络分配一个IP段（如 <code>192.168.191.0/24</code>），用于ZeroTier节点的内部通讯。</li><li>将路由器和需要访问的内网设备都加入到该ZeroTier网络，并记录各设备分配到的ZeroTier IP地址。</li></ul><h3 id="2-在路由器上启用ZeroTier"><a href="#2-在路由器上启用ZeroTier" class="headerlink" title="2. 在路由器上启用ZeroTier"></a>2. 在路由器上启用ZeroTier</h3><p>确保路由器支持ZeroTier（如某些OpenWrt或自带ZeroTier插件的路由器），并按以下步骤操作：</p><ul><li>在路由器中安装并启动ZeroTier，加入ZeroTier网络，确认路由器获得了ZeroTier分配的IP地址。</li><li>路由器内设置路由表，将内网网段路由到ZeroTier网络。具体操作为：<ul><li>设置ZeroTier网络的转发路由。比如，若内网IP段为 <code>192.168.1.0/24</code>，则将 <code>192.168.1.0/24</code> 路由到ZeroTier IP段。</li><li>在ZeroTier的网络设置中，找到 <code>Route Settings</code> 选项，添加 <code>192.168.1.0/24 via &lt;路由器的ZeroTier IP&gt;</code>。</li></ul></li><li>保存并应用配置。</li></ul><h3 id="3-配置内网访问权限"><a href="#3-配置内网访问权限" class="headerlink" title="3. 配置内网访问权限"></a>3. 配置内网访问权限</h3><ul><li>确保路由器和内网设备允许ZeroTier IP段的访问，关闭防火墙限制。</li><li>测试从其他ZeroTier设备访问路由器的内网设备（使用设备的内网IP），验证连接是否成功。</li></ul><p>完成以上设置后，ZeroTier节点就可以通过ZeroTier网络访问路由器及其内网的设备了。</p><p>上面就是整个流程</p><hr><p>下面就是我的操作记录截图下次可能用到</p><hr><p><img src="https://app.fekepj.com/list-tu/2024/10/31/90a4434d3096a5a63d59efcc93705405.png" alt="屏幕截图 2024-10-24 113127"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/62683808e4800db2a4146edd3a246eb8.png" alt="屏幕截图 2024-10-24 123904"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/01047a1f8ea5f74b5c5f381ade090293.png" alt="屏幕截图 2024-10-24 124008"></p><p><img src="G:/%E5%9B%BE%E7%89%87/%E7%94%B5%E8%84%91%E6%88%AA%E5%9B%BE/1024/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-24%20124022.png" alt="屏幕截图 2024-10-24 124022"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/ecdcf7afb009e132cedb613540c25734.png" alt="屏幕截图 2024-10-24 124037"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/e1a6517a19008551690275d707334012.png" alt="屏幕截图 2024-10-24 124146"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/1e97496fabf1eec2696e9a1d0fc729f2.png" alt="屏幕截图 2024-10-24 124259"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/c58344624f5ee50d4598db49dd338ad4.png" alt="屏幕截图 2024-10-24 124345"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/813e8e250bbdf98e7348d206739038ba.png" alt="屏幕截图 2024-10-24 124442"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/3ff593daf98311a1e9d4f464e309594a.png" alt="屏幕截图 2024-10-24 124536"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/31/bc1aa34b03f3f08419b4f0365eabdd1a.png" alt="屏幕截图 2024-10-24 171928"></p><p>应该就可以了，我是可以了，但不知道有没漏截图的！呵呵</p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装zerotier的过程-飞牛os系统</title>
    <link href="/2024/10/29/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E5%AE%89%E8%A3%85ZeroTier%E6%8C%87%E5%8D%97%E9%A3%9E%E7%89%9BOS/"/>
    <url>/2024/10/29/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E5%AE%89%E8%A3%85ZeroTier%E6%8C%87%E5%8D%97%E9%A3%9E%E7%89%9BOS/</url>
    
    <content type="html"><![CDATA[<h1 id="飞牛OS-安装配置-ZeroTier-教程（含常见错误解决）"><a href="#飞牛OS-安装配置-ZeroTier-教程（含常见错误解决）" class="headerlink" title="飞牛OS 安装配置 ZeroTier 教程（含常见错误解决）"></a>飞牛OS 安装配置 ZeroTier 教程（含常见错误解决）</h1><p>ZeroTier 是一个开源虚拟局域网（VPN）工具，可以让不同网络下的设备像在同一局域网中互联。特点是无需公网 IP，无需复杂路由配置，适合远程办公、NAS 互联、家庭内网穿透等。本文基于飞牛OS（Debian 衍生）系统整理。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>系统环境：飞牛OS（可通过 <code>uname -r</code> 查看内核版本，如 <code>6.12.18-trim</code>）</li><li>权限要求：root</li><li>工具要求：curl（系统默认自带）</li></ul><h2 id="安装-ZeroTier"><a href="#安装-ZeroTier" class="headerlink" title="安装 ZeroTier"></a>安装 ZeroTier</h2><ol><li>更新系统包<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qmvuanmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-qmvuanmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt upgrade -y<br></code></pre></td></tr></table></div></figure></li><li>执行官方安装脚本<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-44qh2smfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-44qh2smfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s https://install.zerotier.com | <span class="hljs-built_in">sudo</span> bash<br></code></pre></td></tr></table></div></figure></li><li>启动 ZeroTier 并设置开机自启<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-730svymfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-730svymfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start zerotier-one<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> zerotier-one<br><span class="hljs-built_in">sudo</span> systemctl status zerotier-one<br></code></pre></td></tr></table></div></figure>如果看到 <code>Active: active (running)</code> 表示启动成功。</li></ol><h2 id="加入-ZeroTier-网络"><a href="#加入-ZeroTier-网络" class="headerlink" title="加入 ZeroTier 网络"></a>加入 ZeroTier 网络</h2><ol><li>在官网创建网络：打开 <a href="https://my.zerotier.com/">ZeroTier 官网</a>，注册账号并创建网络，记下 Network ID。</li><li>在飞牛OS 加入网络<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3n9gb9mfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-3n9gb9mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> zerotier-cli <span class="hljs-built_in">join</span> &lt;你的网络ID&gt;<br></code></pre></td></tr></table></div></figure>示例：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-s3phtsmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-s3phtsmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> zerotier-cli <span class="hljs-built_in">join</span> 115ea290854bf04a<br></code></pre></td></tr></table></div></figure></li><li>授权设备：登录 ZeroTier 管理后台，在 Members 中找到新设备，勾选 Authorized，可设置设备名称或固定 IP。</li><li>查看状态<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dlz75vmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-dlz75vmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> zerotier-cli info<br></code></pre></td></tr></table></div></figure>输出类似：<figure class="highlight basic"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-grrtiimfcwb3cp"></i><span>BASIC</span><div class="collapse show" id="collapse-grrtiimfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">200 </span>info &lt;设备ID&gt; <span class="hljs-number">1.14</span>.<span class="hljs-number">0</span> ONLINE<br></code></pre></td></tr></table></div></figure></li></ol><h2 id="常见错误及解决方法"><a href="#常见错误及解决方法" class="headerlink" title="常见错误及解决方法"></a>常见错误及解决方法</h2><ol><li><p>curl 未安装</p><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t40thrmfcwb3cp"></i><span>AVRASM</span><div class="collapse show" id="collapse-t40thrmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">curl:</span> command not found<br></code></pre></td></tr></table></div></figure><p>解决：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-e85i01mfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-e85i01mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install curl -y<br></code></pre></td></tr></table></div></figure></li><li><p>zerotier-cli 未找到</p><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rh6xtamfcwb3cp"></i><span>AVRASM</span><div class="collapse show" id="collapse-rh6xtamfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">zerotier-<span class="hljs-keyword">cli</span>: command not found<br></code></pre></td></tr></table></div></figure><p>解决：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5672o5mfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-5672o5mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s https://install.zerotier.com | <span class="hljs-built_in">sudo</span> bash<br></code></pre></td></tr></table></div></figure></li><li><p>systemctl 未找到</p><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cdnn6fmfcwb3cp"></i><span>AVRASM</span><div class="collapse show" id="collapse-cdnn6fmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">systemctl:</span> command not found<br></code></pre></td></tr></table></div></figure><p>解决：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5ihp0gmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-5ihp0gmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">service zerotier-one start<br>service zerotier-one status<br></code></pre></td></tr></table></div></figure></li><li><p>join 后显示 REQUESTING_CONFIGURATION<br>原因：设备未授权<br>解决：登录后台 Members 列表，勾选 Authorized</p></li><li><p>Ping 不通对方设备<br>排查：</p></li></ol><ul><li>对方未加入同一网络 → <code>zerotier-cli listnetworks</code></li><li>防火墙阻拦 → 检查 iptables&#x2F;ufw</li><li>没分配 IP → 在管理后台手动分配 IP</li></ul><h2 id="清理与维护"><a href="#清理与维护" class="headerlink" title="清理与维护"></a>清理与维护</h2><ul><li>卸载 Debian 官方 headers（防止与飞牛OS定制内核冲突）：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-h3nuxqmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-h3nuxqmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt remove --purge linux-headers-amd64 linux-headers-6.1.0-* -y<br></code></pre></td></tr></table></div></figure></li><li>查看飞牛OS内核头文件：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-oy3acpmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-oy3acpmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt search linux-headers-6.12<br></code></pre></td></tr></table></div></figure></li><li>安装对应内核 headers（若有）：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-836pf9mfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-836pf9mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install linux-headers-6.12.18-trim -y<br></code></pre></td></tr></table></div></figure></li><li>清理无用包：<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-38lhramfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-38lhramfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt autoremove -y<br><span class="hljs-built_in">sudo</span> apt clean<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h2><p>在同一 ZeroTier 网络的其他设备上：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o4vck2mfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-o4vck2mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping &lt;ZeroTier 虚拟 IP&gt;<br></code></pre></td></tr></table></div></figure><p>若有响应表示连接成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>飞牛OS 使用 ZeroTier 非常方便，可实现异地设备互联</li><li>核心步骤：安装 ZeroTier → 加入网络 → 授权 → 测试</li><li>常见问题可参考第五部分解决</li></ul><p><strong>作者</strong>：整理自官方文档与飞牛OS实测<br><strong>日期</strong>：2025-08-28</p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>飞牛OS</tag>
      
      <tag>软路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键重启路由器脚本添加学习</title>
    <link href="/2024/10/24/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E4%B8%80%E9%94%AE%E9%87%8D%E5%90%AF%E8%B7%AF%E7%94%B1%E5%99%A8%E8%84%9A%E6%9C%AC%E6%B7%BB%E5%8A%A0%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/24/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E4%B8%80%E9%94%AE%E9%87%8D%E5%90%AF%E8%B7%AF%E7%94%B1%E5%99%A8%E8%84%9A%E6%9C%AC%E6%B7%BB%E5%8A%A0%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="方案-1：在本地生成密钥并手动复制"><a href="#方案-1：在本地生成密钥并手动复制" class="headerlink" title="方案 1：在本地生成密钥并手动复制"></a>方案 1：在本地生成密钥并手动复制</h3><p>既然远程设备上没有这些工具，你可以在 <strong>本地机器</strong>（比如你正在用的 MINGW64 环境）上生成 SSH 密钥，然后手动将公钥复制到远程设备。</p><h4 id="第一步：在本地生成-SSH-密钥"><a href="#第一步：在本地生成-SSH-密钥" class="headerlink" title="第一步：在本地生成 SSH 密钥"></a>第一步：在本地生成 SSH 密钥</h4><p>在你的本地终端（MINGW64 或 Git）执行以下命令：</p><figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vv9azqmfcwb3cp"></i><span>APACHE</span><div class="collapse show" id="collapse-vv9azqmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span><br></code></pre></td></tr></table></div></figure><p>生成密钥对后，公钥通常保存在 <code>~/.ssh/id_rsa_wky101.pub</code></p><h4 id="第二步：手动将公钥复制到远程设备"><a href="#第二步：手动将公钥复制到远程设备" class="headerlink" title="第二步：手动将公钥复制到远程设备"></a>第二步：手动将公钥复制到远程设备</h4><ol><li><p>通过 </p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zw4ch5mfcwb3cp"></i><span>EBNF</span><div class="collapse show" id="collapse-zw4ch5mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh</span><br></code></pre></td></tr></table></div></figure><p> 登录到你的远程设备：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-p1j6qemfcwb3cp"></i><span>NGINX</span><div class="collapse show" id="collapse-p1j6qemfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">192.168.3.101</span><br></code></pre></td></tr></table></div></figure></li><li><p>在远程设备上，检查 </p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7upjc9mfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-7upjc9mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">~/.ssh<br></code></pre></td></tr></table></div></figure><p> 目录是否存在。如果不存在，创建该目录：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-31q6pcmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-31q6pcmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.ssh<br><span class="hljs-built_in">chmod</span> 700 ~/.ssh<br></code></pre></td></tr></table></div></figure></li><li><p>在本地机器上，使用 </p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vufnbqmfcwb3cp"></i><span>EBNF</span><div class="collapse show" id="collapse-vufnbqmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scp</span><br></code></pre></td></tr></table></div></figure><p> 将公钥复制到远程设备：</p><figure class="highlight ruby"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-z70s93mfcwb3cp"></i><span>RUBY</span><div class="collapse show" id="collapse-z70s93mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">scp ~<span class="hljs-regexp">/.ssh/id</span>_rsa_wky101.pub root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.3</span>.<span class="hljs-number">101</span><span class="hljs-symbol">:/tmp/id_rsa_wky101</span>.pub<br></code></pre></td></tr></table></div></figure></li><li><p>回到远程设备，将公钥添加到 </p><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gopicxmfcwb3cp"></i><span>ARCADE</span><div class="collapse show" id="collapse-gopicxmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">~<span class="hljs-regexp">/.ssh/</span>authorized_keys<br></code></pre></td></tr></table></div></figure><p> 文件中：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dy4ejxmfcwb3cp"></i><span>BASH</span><div class="collapse show" id="collapse-dy4ejxmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /tmp/id_rsa_wky101.pub &gt;&gt; ~/.ssh/authorized_keys<br><span class="hljs-built_in">chmod</span> 600 ~/.ssh/authorized_keys<br><span class="hljs-built_in">rm</span> /tmp/id_rsa_wky101.pub<br></code></pre></td></tr></table></div></figure></li><li><p>退出 SSH，并尝试重新登录：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mgkxu1mfcwb3cp"></i><span>NGINX</span><div class="collapse show" id="collapse-mgkxu1mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> root@<span class="hljs-number">192.168.3.101</span><br></code></pre></td></tr></table></div></figure><p>如果一切设置正确，应该无需密码即可登录。</p></li></ol><h3 id="方案-2：安装-dropbear-工具"><a href="#方案-2：安装-dropbear-工具" class="headerlink" title="方案 2：安装 dropbear 工具"></a>方案 2：安装 <code>dropbear</code> 工具</h3><p>如果你的远程设备使用的是 OpenWrt 或类似系统，可以考虑安装 <code>dropbear</code>（轻量级 SSH 服务器工具），它自带密钥管理功能。</p><ol><li><p>在远程设备上执行以下命令安装 <code>dropbear</code>（假设该系统有包管理器支持）：</p><figure class="highlight cmake"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yfnwgimfcwb3cp"></i><span>CMAKE</span><div class="collapse show" id="collapse-yfnwgimfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"> opkg update<br>opkg <span class="hljs-keyword">install</span> dropbear<br></code></pre></td></tr></table></div></figure><p>安装后，<code>dropbear</code> 自带的 SSH 服务器应该可以使用密钥认证。</p></li><li><p>按照 <strong>方案 1</strong> 的步骤生成和复制密钥。</p></li></ol><h3 id="方案-3：使用-sshpass"><a href="#方案-3：使用-sshpass" class="headerlink" title="方案 3：使用 sshpass"></a>方案 3：使用 <code>sshpass</code></h3><p>如果你确实不想通过密钥认证方式，可以在本地机器上安装 <code>sshpass</code> 工具，在脚本中使用它来自动输入密码。</p><p>在 MINGW64 环境下，使用包管理器（如 <code>pacman</code>）安装 <code>sshpass</code>：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-44oe7vmfcwb3cp"></i><span>EBNF</span><div class="collapse show" id="collapse-44oe7vmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pacman -S sshpass</span><br></code></pre></td></tr></table></div></figure><p>然后，你可以在脚本里这样写：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yktrtkmfcwb3cp"></i><span>NGINX</span><div class="collapse show" id="collapse-yktrtkmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sshpass</span> -p <span class="hljs-string">&#x27;ab7878771&#x27;</span> ssh root@<span class="hljs-number">192.168.3.101</span><br></code></pre></td></tr></table></div></figure><p>此方法虽然方便，但存在密码暴露的安全风险。</p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sh脚本</tag>
      
      <tag>路由器</tag>
      
      <tag>Git命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过cpolar内网穿透实现远程访问内网飞牛OS-NAS</title>
    <link href="/2024/10/24/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E9%80%9A%E8%BF%87cpolar%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E9%A3%9E%E7%89%9BOS-NAS/"/>
    <url>/2024/10/24/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E9%80%9A%E8%BF%87cpolar%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E9%A3%9E%E7%89%9BOS-NAS/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着数字化时代的到来，家庭和企业对于数据存储和远程访问的需求日益增加。网络附加存储（NAS）作为数据中心的重要组成部分，凭借其高扩展性、高可靠性和便捷性，已成为众多用户首选的数据存储解决方案。然而，传统的NAS设备在远程访问方面往往受限于网络环境，特别是在没有公网IP的情况下，如何实现远程访问成为了一个亟待解决的问题。</p><p>飞牛私有云fnOS NAS以其卓越的性能、强大的兼容性和智能化的管理界面，在NAS市场中脱颖而出。fnOS基于最新的Linux内核（Debian发行版）深度开发，不仅兼容主流x86硬件，还支持自由拓展和灵活扩容，为用户提供了前所未有的数据存储体验。然而，仅仅拥有优秀的NAS设备还不足以满足所有需求，特别是当需要在不同网络环境下进行远程访问时，内网穿透技术显得尤为重要。</p><p>Cpolar作为一款高效、稳定且易于使用的内网穿透工具，能够将本地服务暴露给外网用户访问。它支持https、tcp、等协议，且配置简单，使用方便。尤为重要的是，Cpolar提供了永久免费版，虽然带宽有限且域名随机变化，但对于日常远程访问和数据传输已足够应对。对于需要更高稳定性和更多功能的用户，Cpolar也提供了付费版本，以满足不同需求。</p><p>本文将详细介绍如何在飞牛私有云fnOS NAS上安装Cpolar穿透工具，并实现远程访问。通过本文的指导，您将能够轻松突破网络限制，随时随地访问您的NAS设备。无论您是家庭用户还是企业用户，本文都将为您提供有价值的参考和实用的解决方案。</p><p>接下来，我们将逐步介绍Cpolar的安装、配置和使用过程，帮助您快速上手并成功实现远程访问。请跟随我们的步伐，一起探索飞牛私有云fnOS NAS与Cpolar的无限可能。</p><h2 id="1-安装Cpolar工具"><a href="#1-安装Cpolar工具" class="headerlink" title="1. 安装Cpolar工具"></a>1. 安装Cpolar工具</h2><p>打开飞牛云NAS设置界面,开启ssh 连接,端口默认为22即可,开启后,我们就可以ssh 连接飞牛云NAS执行命令.</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/2845afa50932e874686fce69913d68a4.png" alt="image-20240904140930405"></p><p>然后我们通过局域网IP ssh远程连接进去,因为该NAS是基于Linux 内核开发的,所以我们可以按照cpolar的Linux安装方法进行安装</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/a3cebecf1d8ab9ba97e0b59cc5f15a79.png" alt="image-20240904142047011"></p><p>连接后执行下面cpolar Linux 安装命令</p><figure class="highlight shell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kfagktmfcwb3cr"></i><span>SHELL</span><div class="collapse show" id="collapse-kfagktmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash<br></code></pre></td></tr></table></div></figure><p>Bash</p><p>Copy</p><p>执行这个命令后可能会出现卡主,可以看到这个位置是提示需要输入NAS用户名对应的密码,直接输入密码回车即可,期间没有报错表示安装成功</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/cc0332a9bb13f795a7d6e38f5fe97be9.png" alt="image-20240904142640620"></p><p>然后执行下面系列命令来操作cpolar 服务</p><figure class="highlight shell"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mq1448mfcwb3cr"></i><span>SHELL</span><div class="collapse show" id="collapse-mq1448mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加入系统服务设置开机启动</span><br>sudo systemctl enable cpolar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动cpolar服务</span><br>sudo systemctl start cpolar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启cpolar服务</span><br>sudo systemctl restart cpolar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看cpolar服务状态</span><br>sudo systemctl status cpolar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止cpolar服务</span><br>sudo systemctl stop cpolar<br></code></pre></td></tr></table></div></figure><p>Bash</p><p>Copy</p><p>启动cpolar服务后,我们通过NAS局域网IP访问9200端口,即可看到cpolar的web ui 管理界面,一切操作在管理界面操作即可,如果没有账号,可以进入下面cpolar官网注册,或者点击登陆按钮下面免费注册也可以跳转去免费注册,注册后登录即可,这样cpolar在飞牛云安装就完成了,下面我们通过cpolar设置远程访问飞牛云NAS.</p><blockquote><p>cpolar官网地址: <a href="https://www.cpolar.com/">https://www.cpolar.com</a></p></blockquote><p><img src="https://app.fekepj.com/list-tu/2024/10/24/3f1d0dbdb4b785be2801d619ad97e507.png" alt="image-20240904143832209"></p><h2 id="2-配置远程访问地址"><a href="#2-配置远程访问地址" class="headerlink" title="2. 配置远程访问地址"></a>2. 配置远程访问地址</h2><p>登录后,在管理界面点击左侧仪表盘的隧道管理——创建隧道，创建一个飞牛云NAS 的公网http地址隧道!</p><ul><li>隧道名称：可自定义命名，注意不要与已有的隧道名称重复</li><li>协议：选择http</li><li>本地地址：8000 (访问飞牛云界面的端口)</li><li>域名类型：免费选择随机域名</li><li>地区：选择China vip</li></ul><p>点击<code>创建</code>(点击一次创建按钮即可,不要重复点击!)</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/9da335da16620235460224629a4e97d9.png" alt="image-20240904144842844"></p><p>隧道创建成功后，点击左侧的状态——在线隧道列表,查看所生成的公网访问地址，有两种访问方式,一种是http 和https,两种都可以访问</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/ba99764b8d010f095afeb2e710972040.png" alt="image-20240904144923655"></p><h2 id="3-远程访问飞牛云NAS"><a href="#3-远程访问飞牛云NAS" class="headerlink" title="3. 远程访问飞牛云NAS"></a>3. 远程访问飞牛云NAS</h2><p>在浏览器输入上面我们创建的Cpolar 公网域名,可以看到成功访问了我们飞牛云NAS界面</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/cc10b712926e6d2ef4f6127111231e2e.png" alt="image-20240904145035277"></p><p>同样我们输入账号密码,即可成功登录,这样一个远程访问的公网地址就设置好了,使用该地址可以在任意浏览器进行访问.</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/b34b528bc1425a011db4d68e719ebc91.png" alt="image-20240904145157480"></p><p><strong>小结</strong></p><p>为了更好地演示，我们在前述过程中使用了cpolar生成的隧道，其公网地址是随机生成的。</p><p>这种随机地址的优势在于建立速度快，可以立即使用。然而，它的缺点是网址由随机字符生成，不太容易记忆（例如：7ff0466b.r12.vip.cpolar.cn）。另外，这个地址在24小时内会发生随机变化，更适合于临时使用。</p><p>我一般会使用固定二级子域名，原因是我希望将网址发送给同事或客户时，它是一个固定、易记的公网地址（例如：fnostest.cpolar.cn），这样更显正式，便于流交协作。</p><h2 id="4-固定远程访问地址"><a href="#4-固定远程访问地址" class="headerlink" title="4. 固定远程访问地址"></a>4. 固定远程访问地址</h2><p>由于以上使用Cpolar所创建的隧道使用的是随机公网地址，24小时内会随机变化，不利于长期远程访问。因此我们可以为其配置二级子域名，该地址为固定地址，不会随机变化【ps：cpolar.cn已备案】</p><blockquote><p>注意需要将cpolar套餐升级至基础套餐或以上，且每个套餐对应的带宽不一样。【cpolar.cn已备案】</p></blockquote><p><a href="https://dashboard.cpolar.com/">点击进入和登录Cpolar官网</a>，点击左侧的预留，选择保留二级子域名，设置一个二级子域名名称，点击保留</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/032c6de7c3edaa5a6580be29e3f3ca56.png" alt="image-20240904150257232"></p><p>保留成功后复制保留成功的二级子域名的名称</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/be8f9750430528189ded55c50f3807e0.png" alt="image-20240904150447612"></p><p>返回登录cpolar web UI管理界面，点击左侧仪表盘的隧道管理——隧道列表，找到所要配置的隧道，点击右侧的编辑</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/d162478b5468ead7232603a980b33f51.png" alt="image-20240904150526977"></p><p>修改隧道信息，将保留成功的二级子域名配置到隧道中</p><ul><li>域名类型：选择二级子域名</li><li>Sub Domain：填写保留成功的二级子域名</li></ul><p>点击<code>更新</code>(注意,点击一次更新即可,不需要重复提交)</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/df5c54ac981939ba401e3a0cd4a20793.png" alt="image-20240904150553677"></p><p>更新完成后,打开在线隧道列表,此时可以看到公网地址已经发生变化,地址二级名称变成了我们自己设置的二级子域名名称</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/65a235d06017580703b5434396fd0a63.png" alt="image-20240904150619186"></p><p>再次打开浏览器,输入我们固定的cpolar公网地址,新地址访问可能需要登陆,登录后,可以看到同样访问成功了,这样一个固定的地址就设置好了,不用再担心地址会变化!</p><p><img src="https://app.fekepj.com/list-tu/2024/10/24/e2a5bb915457140004092a0a70055d25.png" alt="image-20240904150712856"></p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt编译App插件应用说明-L大</title>
    <link href="/2024/10/22/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/OpenWrt%E7%BC%96%E8%AF%91App%E6%8F%92%E4%BB%B6%E5%BA%94%E7%94%A8%E8%AF%B4%E6%98%8E-L%E5%A4%A7/"/>
    <url>/2024/10/22/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/OpenWrt%E7%BC%96%E8%AF%91App%E6%8F%92%E4%BB%B6%E5%BA%94%E7%94%A8%E8%AF%B4%E6%98%8E-L%E5%A4%A7/</url>
    
    <content type="html"><![CDATA[<p>OpenWrt 编译 LuCI —&gt; Applications 添加插件应用说明 【人人为我，我为人人】  2022.11.28 更新 ！！！</p><p>make menuconfig 进入定制界面<br>进入编译选项配置界面,.按照需要配置.( ‘*’ 代表编入固件，‘M’ 表示编译成模块或者IPK包， ‘空’不编译 )</p><p>非常感谢大佬”L有大雕“更正补充，20181121<br>大佬源码仓库：<a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a><br>内容仅供参考，请根据个人实际情况使用，如果出现问题则后果自负。</p><p>选择LuCI 配置 添加插件应用：<br>注：应用后面标记 “ ***** ” 为最近新添加；标记“ <strong>!</strong> ”与其他插件依赖或冲突。<br>-——————————————————————————————————————<br>LuCI —&gt; Applications —&gt; luci-app-accesscontrol #访问时间控制<br>LuCI —&gt; Applications —&gt; luci-app-acme #ACME自动化证书管理环境（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-adblock  #ADB广告过滤<br>LuCI —&gt; Applications —&gt; luci-app-adbyby-plus #广告屏蔽大师Plus +<br>LuCI —&gt; Applications —&gt; luci-app-adbyby  #广告过滤大师（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-adguardhome #AdGuard home广告过滤（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-adkill  #广告过滤（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-advanced-reboot #Linksys高级重启<br>LuCI —&gt; Applications —&gt; luci-app-advancedsetting #系统高级设置（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-ahcp #Ad-Hoc配置协议(AHCP) ipv6 and 双栈 自动配置协议 <strong>!</strong><br>LuCI —&gt; Applications —&gt; luci-app-airplay2  #Apple AirPlay2 AirPlay无损音乐推流(安卓+IOS)<br>LuCI —&gt; Applications —&gt; luci-app-aliddns  #阿里DDNS客户端（丢弃，集成至ddns）<br>LuCI —&gt; Applications —&gt; luci-app-aliyundrive-fuse #阿里云盘FUSE磁盘挂载 *****<br>LuCI —&gt; Applications —&gt; luci-app-aliyundrive-webdav #阿里云盘 WebDAV 服务<br>LuCI —&gt; Applications —&gt; luci-app-amule #aMule下载工具 <strong>!</strong><br>LuCI —&gt; Applications —&gt; luci-app-argon-config #Argon主题配置插件（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-aria2 # Aria2下载工具<br>LuCI —&gt; Applications —&gt; luci-app-arpbind #IP&#x2F;MAC绑定<br>LuCI —&gt; Applications —&gt; luci-app-asterisk #支持Asterisk电话服务器<br>LuCI —&gt; Applications —&gt; luci-app-attendedsysupgrade #固件更新升级相关<br>LuCI —&gt; Applications —&gt; luci-app-autoreboot #支持计划重启<br>LuCI —&gt; Applications —&gt; luci-app-baidupcs-web #百度网盘管理<br>LuCI —&gt; Applications —&gt; luci-app-bcp38 #BCP38网络入口过滤（不确定）<br>LuCI —&gt; Applications —&gt; luci-app-bird1-ipv4 #对Bird1-ipv4的支持<br>LuCI —&gt; Applications —&gt; luci-app-bird1-ipv6 #对Bird1-ipv6的支持<br>LuCI —&gt; Applications —&gt; luci-app-bird4  #Bird 4（未知）（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-bird6  #Bird 6（未知）（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-bmx6 #BMX6路由协议<br>LuCI —&gt; Applications —&gt; luci-app-bmx7 #BMX7路由协议（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-caldav #联系人（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-cifs-mount  #CIFS&#x2F;SMB挂载设置<br>LuCI —&gt; Applications —&gt; luci-app-cifsd #CIFS&#x2F;SMB网络共享<br>LuCI —&gt; Applications —&gt; luci-app-cjdns #加密IPV6网络相关<br>LuCI —&gt; Applications —&gt; luci-app-clamav #ClamAV杀毒软件<br>LuCI —&gt; Applications —&gt; luci-app-clash #Clash客户端（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-commands #Shell命令模块<br>LuCI —&gt; Applications —&gt; luci-app-cshark #CloudShark捕获工具<br>LuCI —&gt; Applications —&gt; luci-app-dawn #分布式AP管理程序<br>LuCI —&gt; Applications —&gt; luci-app-ddns  #动态域名 DNS（集成阿里DDNS客户端）<br>LuCI —&gt; Applications —&gt; luci-app-diag-core  #core诊断工具<br>LuCI —&gt; Applications —&gt; luci-app-diskman  #磁盘管理工具<br>  luci-app-diskman —&gt; Include btrfs-progs  #新型的写时复制 (COW)<br>  luci-app-diskman —&gt; Include lsblk  #lsblk命令 用于列出所有可用块设备的信息<br>  luci-app-diskman —&gt; Include mdadm  #mdadm命令 用于创建、管理、监控RAID设备的工具<br>  luci-app-diskman —&gt; Include kmod-md-raid456  #RAID 4,5,6 驱动程序模块（丢弃）<br>  luci-app-diskman —&gt; Include kmod-md-linear  #RAID 驱动程序模块（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-dnscrypt-proxy #DNSCrypt解决DNS污染<br>LuCI —&gt; Applications —&gt; luci-app-dnsfilter #DNSFilter基于DNS的广告过滤<br>LuCI —&gt; Applications —&gt; luci-app-dnsforwarder #DNSForwarder防DNS污染<br>LuCI —&gt; Applications —&gt; luci-app-dnspod #DNSPod动态域名解析（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-docker #Docker容器<br>LuCI —&gt; Applications —&gt; luci-app-dockerman #Dockerman容器 *****<br>LuCI —&gt; Applications —&gt; luci-app-dump1090 #民航无线频率（不确定）<br>LuCI —&gt; Applications —&gt; luci-app-dynapoint #DynaPoint（未知）<br>LuCI —&gt; Applications —&gt; luci-app-e2guardian  #Web内容过滤器<br>LuCI —&gt; Applications —&gt; luci-app-easymesh  #简单MESH(可有线+无线回程)<br>LuCI —&gt; Applications —&gt; luci-app-eqos #基于IP地址限速（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-familycloud  #家庭云盘（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-fileassistant  #文件管理助手（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-filetransfer #文件传输（可web安装ipk包）<br>LuCI —&gt; Applications —&gt; luci-app-firewall  #添加防火墙<br>LuCI —&gt; Applications —&gt; luci-app-flowoffload #Turbo ACC网络加速（集成FLOW,BBR,NAT,DNS（丢弃，移至TurboACC）<br>LuCI —&gt; Applications —&gt; luci-app-freifunk-diagnostics  #freifunk组件 诊断（未知）（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-freifunk-policyrouting #freifunk组件 策略路由（未知）（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-freifunk-widgets #freifunk组件 索引（未知）（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-frpc  #内网穿透Frp客户端<br>LuCI —&gt; Applications —&gt; luci-app-frps  #内网穿透Frp服务端<br>LuCI —&gt; Applications —&gt; luci-app-fwknopd #Firewall Knock Operator服务器<br>LuCI —&gt; Applications —&gt; luci-app-guest-wifi  #WiFi访客网络<br>LuCI —&gt; Applications —&gt; luci-app-gfwlist  #GFW域名列表（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-go-aliyundrive-webdav  #阿里云盘webdav协议(文件管理&#x2F;同步等) （丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-gost #隐蔽的https代理（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-haproxy-tcp  #HAProxy负载均衡-TCP<br>LuCI —&gt; Applications —&gt; luci-app-hd-idle #硬盘休眠<br>LuCI —&gt; Applications —&gt; luci-app-hnet #Homenet Status家庭网络控制协议<br>LuCI —&gt; Applications —&gt; luci-app-https-dns-proxy #通过HTTPS代理为DNS提供Web UI<br>LuCI —&gt; Applications —&gt; luci-app-ipsec-server #服务器 IPSec *****<br>LuCI —&gt; Applications —&gt; luci-app-ipsec-virtual<strong>d #virtual</strong>服务器 IPSec<br>LuCI —&gt; Applications —&gt; luci-app-jd-dailybonus #京东签到服务（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-kodexplorer #KOD可道云私人网盘（与vnStat冲突 <strong>!</strong> ）<br>LuCI —&gt; Applications —&gt; luci-app-kooldns #virtual<strong>服务器 ddns替代方案（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-koolproxy #KP去广告（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-lxc  #LXC容器管理<br>LuCI —&gt; Applications —&gt; luci-app-meshwizard #网络设置向导（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-minidlna  #完全兼容DLNA &#x2F; UPnP-AV客户端的服务器软件<br>LuCI —&gt; Applications —&gt; luci-app-mjpg-streamer  #兼容Linux-UVC的摄像头程序<br>LuCI —&gt; Applications —&gt; luci-app-mosdns  #MosDNS转发器 *****<br>LuCI —&gt; Applications —&gt; luci-app-mtwifi #MTWiFi驱动的支持 （丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-mmc-over-gpio  #添加SD卡操作界面（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-multiwan  #多拨虚拟网卡（丢弃，移至syncdial）<br>LuCI —&gt; Applications —&gt; luci-app-mwan  #MWAN负载均衡（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-music-remote-center  #PCHiFi 数字转盘遥控<br>LuCI —&gt; Applications —&gt; luci-app-mwan3  #MWAN3负载均衡<br>LuCI —&gt; Applications —&gt; luci-app-mwan3helper  #MWAN3分流助手<br>LuCI —&gt; Applications —&gt; luci-app-n2n_v2  #N2N内网穿透 N2N v2 virtual</strong>服务<br>LuCI —&gt; Applications —&gt; luci-app-netdata #Netdata实时监控（图形化）<br>LuCI —&gt; Applications —&gt; luci-app-nfs  #NFS网络共享<br>LuCI —&gt; Applications —&gt; luci-app-nft-qos #QOS流控 Nftables版<br>LuCI —&gt; Applications —&gt; luci-app-ngrokc #Ngrok 内网穿透（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-nlbwmon  #网络带宽监视器<br>LuCI —&gt; Applications —&gt; luci-app-noddos #NodDOS Clients 阻止DDoS攻击<br>LuCI —&gt; Applications —&gt; luci-app-nps  #内网穿透nps<br>LuCI —&gt; Applications —&gt; luci-app-ntpc  #NTP时间同步服务器<br>LuCI —&gt; Applications —&gt; luci-app-ocserv #OpenConnect virtual<strong>服务<br>LuCI —&gt; Applications —&gt; luci-app-olsr #OLSR配置和状态模块<br>LuCI —&gt; Applications —&gt; luci-app-olsr-services #OLSR服务器<br>LuCI —&gt; Applications —&gt; luci-app-olsr-viz  #OLSR可视化<br>LuCI —&gt; Applications —&gt; luci-app-ocserv  #OpenConnect virtual</strong>服务（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-omcproxy #嵌入式IGMPv3和MLDv2组播代理 *****<br>LuCI —&gt; Applications —&gt; luci-app-openclash #运行在OpenWrt上的Clash代理客户端（Le库以外的插件）<br>LuCI —&gt; Applications —&gt; luci-app-openvirtual** #Openvirtual<strong>客户端<br>LuCI —&gt; Applications —&gt; luci-app-openvirtual</strong>-server #易于使用的Openvirtual<strong>服务器 Web-UI<br>LuCI —&gt; Applications —&gt; luci-app-oscam  #OSCAM服务器（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-p910nd  #打印服务器模块<br>LuCI —&gt; Applications —&gt; luci-app-pagekitec  #Pagekitec内网穿透客户端<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷” #“师夷长技以制夷”（Li大佬插件）<br>  Configuration —&gt; Include Brook #Brook代理(跨平台强加密且不可检测代理)<br>  Configuration —&gt; Include china-dns-NG #防污染DNS服务<br>  Configuration —&gt; Include Haproxy #HAProxy #HAProxy负载均衡<br>  Configuration —&gt; Include Hysteria #Hysteria双边加速工具<br>  Configuration —&gt; Include Kcptun #Kcptun双边加速工具<br>  Configuration —&gt; Include NaiveProxy #NaiveProxy代理(Chrome网络堆栈伪装流量)<br>  Configuration —&gt; Include PDNSD #DNS服务器<br>  Configuration —&gt; Include SS Libev Client #SS Libev客户端(轻量级)<br>  Configuration —&gt; Include SS Libev Server #SS Libev服务端(轻量级)<br>  Configuration —&gt; Include SS Rust Client #SS Rust客户端(负载均衡&#x2F;探测延迟)<br>  Configuration —&gt; Include “师夷长技以制夷” Libev Client #“师夷长技以制夷” Libev客户端(轻量级)<br>  Configuration —&gt; Include “师夷长技以制夷” Libev Server #“师夷长技以制夷” Libev服务端(轻量级)<br>  Configuration —&gt; Include Simple-Obfs (SS plugin) #simple-Obfs简单混淆工具(Nginx)<br>  Configuration —&gt; Include Trojan_GO #Trojan_GO代理(直接模仿协议HTTPS)<br>  Configuration —&gt; Include Trojan_Plus #Trojan_Plus代理(直接模仿协议HTTPS)<br>  Configuration —&gt; Include “师夷长技以制夷” #“师夷长技以制夷”代理<br>  Configuration —&gt; Include “师夷长技以制夷”-plugin (SS plugin) #SS “师夷长技以制夷”插件(WebSocket+TLS )<br>  Configuration —&gt; Include Xray #Xray代理(XTLS)<br>  Configuration —&gt; Include Xray-Plugin (SS Plugin) #SS Xray插件(WebSocket+TLS )  *****<br>  Configuration —&gt; Include Dns2socks #DNS服务器（丢弃）<br>  Configuration —&gt; Include “师夷长技以制夷”2 #“师夷长技以制夷”2代理(透明TCP定向Socks&#x2F;HTTPS代理服务器)（丢弃）<br>  Configuration —&gt; Include SS #SS代理（丢弃）<br>  Configuration —&gt; Include SS Server #SS服务器（丢弃）<br>  Configuration —&gt; Include SS Rust (AEAD ciphers only) #“师夷长技以制夷”UST代理(AEAD加密)（丢弃）<br>  Configuration —&gt; Include “师夷长技以制夷”  #“师夷长技以制夷”代理（丢弃）<br>  Configuration —&gt; Include ShSR Server #“师夷长技以制夷”服务器（丢弃）<br>  Configuration —&gt; Include Https DNS Proxy(DoH) #HttpsDNS服务（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-pgyvirtual</strong> #蒲公英virtual**  *****<br>LuCI —&gt; Applications —&gt; luci-app-phtunnel #花生壳PHTunnel内网穿透  *****<br>LuCI —&gt; Applications —&gt; luci-app-polipo #Polipo代理(是一个小型且快速的网页缓存代理)<br>LuCI —&gt; Applications —&gt; luci-app-pppoe-relay #PPPoE NAT穿透 点对点协议（PPP）<br>LuCI —&gt; Applications —&gt; luci-app-p p t p-server #virtual<strong>服务器 p p t p<br>LuCI —&gt; Applications —&gt; luci-app-privoxy #Privoxy网络代理(带过滤无缓存)<br>LuCI —&gt; Applications —&gt; luci-app-ps3netsrv #PS3 NET服务器(用于加载蓝光&#x2F;游戏ISO&#x2F;PKG)<br>LuCI —&gt; Applications —&gt; luci-app-pushbot #全能推送(钉钉推送,企业微信推送,Bark,PushPlus推送)<br>LuCI —&gt; Applications —&gt; luci-app-qbittorrent #BT下载工具(qBittorrent)<br>  Build Version Selection (Static Build) —&gt; Static Build #选择静态编译版本<br>  Build Version Selection (Static Build) —&gt; Dynamic Build #选择动态编译版本<br>LuCI —&gt; Applications —&gt; luci-app-qbittorrent-simple #BT下载工具(qBittorrent)简化版  *****<br>  Build Version Selection (Static Build) —&gt; Static Build #选择静态编译版本<br>  Build Version Selection (Static Build) —&gt; Dynamic Build #选择动态编译版本<br>LuCI —&gt; Applications —&gt; luci-app-qos  #流量服务质量(QoS)流控<br>LuCI —&gt; Applications —&gt; luci-app-radicale  #CalDAV&#x2F;CardDAV同步工具<br>LuCI —&gt; Applications —&gt; luci-app-ramfree #释放内存<br>LuCI —&gt; Applications —&gt; luci-app-rclone #命令行云端同步工具<br>  Include rclone-webui #Rclone界面<br>  Include rclone-ng (another webui) #Rclone另一个界面<br>  Include fuse-utils (mount cloud storage) #fuse-utils（挂载云存储）（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-rp-pppoe-server #Roaring Penguin PPPoE Server 服务器<br>LuCI —&gt; Applications —&gt; luci-app-samba  #网络共享（Samba）<br>LuCI —&gt; Applications —&gt; luci-app-samba4  #网络共享（Samba4）<br>LuCI —&gt; Applications —&gt; luci-app-serverchan  #微信&#x2F;请不要发布这类群，谢谢推送的插件<br>LuCI —&gt; Applications —&gt; luci-app-sfe #Turbo ACC网络加速（丢弃，移至TurboACC）<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷”  #SS“师夷长技以制夷”（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷”-libes #SS-libev服务端<br>LuCI —&gt; Applications —&gt; luci-app-shairplay #支持AirPlay功能<br>LuCI —&gt; Applications —&gt; luci-app-siitwizard #SIIT配置向导 SIIT-Wizzard<br>LuCI —&gt; Applications —&gt; luci-app-simple-adblock #简单的广告拦截<br>LuCI —&gt; Applications —&gt; luci-app-smartdns #SmartDNS本地服务器（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-socat #Socat多功能的网络工具(端口转发)  *****<br>LuCI —&gt; Applications —&gt; luci-app-softethervirtual</strong> #SoftEther virtual<strong>服务器 NAT穿透<br>LuCI —&gt; Applications —&gt; luci-app-splash #Client-Splash是无线MESH网络的一个热点认证系统<br>LuCI —&gt; Applications —&gt; luci-app-sqm #流量智能队列管理（QOS）<br>LuCI —&gt; Applications —&gt; luci-app-squid  #Squid代理服务器<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷”-plus  #“师夷长技以制夷”“师夷长技以制夷”Plus+（Le大佬插件）<br>  SS Client Selection (SS-libev)  —&gt; None #不选 *****<br>  SS Client Selection (SS-libev)  —&gt; SS-libev #选择 SS Libev，C语言版(轻量级) *****<br>  SS Client Selection (SS-libev)  —&gt; “师夷长技以制夷”ust #选择 SS rust，Rust语言版(负载均衡&#x2F;探测延迟) *****<br>  SS Server Selection (SS-libev)  —&gt; None #不选 *****<br>  SS Server Selection (SS-libev)  —&gt; SS-libev #选择 SS Libev，C语言版(轻量级) *****<br>  SS Server Selection (SS-libev)  —&gt; “师夷长技以制夷”ust #选择 SS rust，Rust语言版(负载均衡&#x2F;探测延迟) *****<br>  “师夷长技以制夷”-core Selection (Xray-core) —&gt; None #不选 *****<br>  “师夷长技以制夷”-core Selection (Xray-core) —&gt; “师夷长技以制夷”-core #“师夷长技以制夷”核心 *****<br>  “师夷长技以制夷”-core Selection (Xray-core) —&gt; Xray-core #Xray核心 *****<br>  “师夷长技以制夷”-core Selection (Xray-core) —&gt; SagerNet-core #“师夷长技以制夷”核心增强版 *****<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Kcptun #Kcptun双边加速工具<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Hysteria #轻量代理-专为恶劣网络环境进行优化的网络工具(双边加速) *****<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include IPT2Socks #IPT2Socks轻量代理 *****<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include NaiveProxy #NaiveProxy代理(Chrome网络堆栈伪装流量)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include “师夷长技以制夷”2 #“师夷长技以制夷”2代理(透明TCP定向Socks&#x2F;HTTPS代理服务器)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Simple-Obfs Plugin #SS Simple-Obfs混淆代理(Nginx)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS “师夷长技以制夷” Plugin #SS “师夷长技以制夷”代理(WebSocket+TLS )<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include “师夷长技以制夷” Libev Client #“师夷长技以制夷” Libev客户端(轻量级)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include “师夷长技以制夷” Libev Server #“师夷长技以制夷” Libev服务端(轻量级)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Trojan #Trojan代理(直接模仿协议HTTPS)<br>  Include libustream-ssl —&gt; Include libustream-wolfssl #选择wolfSSL库(传输层安全协议)<br>  Include libustream-ssl —&gt; Include libustream-openssl #选择OpenSSL库(传输层安全协议)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS Libev Client #SS Libev客户端(轻量级)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS Libev Server #SS Libev服务端(轻量级)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS Rust Client #SS Rust客户端(负载均衡&#x2F;探测延迟)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS Rust Server #SS Rust服务端(负载均衡&#x2F;探测延迟)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Xray #Xray代理(XTLS)<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS New Version #新SS代理（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS #SS代理（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS Rust (AEAD ciphers only) #“师夷长技以制夷”UST代理(AEAD密码) （丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include “师夷长技以制夷” #“师夷长技以制夷”代理（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Xray (“师夷长技以制夷”&#x2F;Trojan-GO implemented) #Xray代理（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Trojan-go #Trojan-go代理（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS Server #SS服务器（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include SS Rust Server #SS Rust服务器（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include “师夷长技以制夷” Server #“师夷长技以制夷”服务器（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include DNS2SOCKS #DNS服务器（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include “师夷长技以制夷” Socks and Tunnel（丢弃）<br>  luci-app-“师夷长技以制夷”-plus —&gt; Include Socks Server #socks代理服务器（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷”-pro #“师夷长技以制夷”-Pro（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷”server-python #“师夷长技以制夷”R Python服务器<br>LuCI —&gt; Applications —&gt; luci-app-statistics #流量监控工具<br>LuCI —&gt; Applications —&gt; luci-app-syncdial #多拨虚拟网卡（原macvlan）<br>LuCI —&gt; Applications —&gt; luci-app-tinyproxy #Tinyproxy是 HTTP(S)代理服务器<br>LuCI —&gt; Applications —&gt; luci-app-transmission  #BT下载工具<br>LuCI —&gt; Applications —&gt; luci-app-travelmate #旅行路由器<br>LuCI —&gt; Applications —&gt; luci-app-ttyd  #网页终端命令行<br>LuCI —&gt; Applications —&gt; luci-app-turboacc  #Turbo ACC 网络加速(支持 Fast Path 或者 硬件 NAT)<br>  luci-app-turboacc —&gt; Include Flow Offload  #Flow Offload加速(提高路由转发效率) *****<br>  luci-app-turboacc —&gt; Include Shortcut-FE #Shortcut-FE 流量分载<br>  luci-app-turboacc —&gt; Include Shortcut-FE CM  #Shortcut-FE 流量分载(高通芯片版) *****<br>  luci-app-turboacc —&gt; Include BBR CCA #BBR拥塞控制算法提升TCP网络性能<br>  luci-app-turboacc —&gt; Include Pdnsd  #DNS防污染 Pdnsd *****<br>  luci-app-turboacc —&gt; Include DNSForwarder #DNS防污染 Forwarder<br>  luci-app-turboacc —&gt; Include DNSProxy #DNS防污染 Proxy<br>LuCI —&gt; Applications —&gt; luci-app-udpxy #udpxy做组播服务器<br>LuCI —&gt; Applications —&gt; luci-app-uhttpd #uHTTPd Web服务器<br>LuCI —&gt; Applications —&gt; luci-app-unblockmusic #解锁网易云灰色歌曲3合1新版本<br>  UnblockNeteaseMusic Golang Version #Golang版本<br>  UnblockNeteaseMusic NodeJS Version #NodeJS版本<br>LuCI —&gt; Applications —&gt; luci-app-unblockneteasemusic-go #解除网易云音乐（合并）<br>LuCI —&gt; Applications —&gt; luci-app-unblockneteasemusic-mini #解除网易云音乐（合并）<br>LuCI —&gt; Applications —&gt; luci-app-unbound #Unbound DNS解析器<br>LuCI —&gt; Applications —&gt; luci-app-upnp  #通用即插即用UPnP（端口自动转发）<br>LuCI —&gt; Applications —&gt; luci-app-usb-printer #USB 打印服务器<br>LuCI —&gt; Applications —&gt; luci-app-uugamebooster #UU网游加速器<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷”-server  #“师夷长技以制夷” 服务器<br>LuCI —&gt; Applications —&gt; luci-app-“师夷长技以制夷”-pro #“师夷长技以制夷”透明代理（丢弃，集成“师夷长技以制夷”）<br>LuCI —&gt; Applications —&gt; luci-app-verysync #微力同步<br>LuCI —&gt; Applications —&gt; luci-app-vlmcsd #KMS服务器设置<br>LuCI —&gt; Applications —&gt; luci-app-vnstat  #vnStat网络监控（图表）（与kodexplorer冲突 <strong>!</strong> ）<br>LuCI —&gt; Applications —&gt; luci-app-virtual</strong>bypass #virtual** BypassWebUI 绕过virtual<strong>设置<br>LuCI —&gt; Applications —&gt; luci-app-vsftpd #FTP服务器<br>LuCI —&gt; Applications —&gt; luci-app-v“师夷长技以制夷” #V“师夷长技以制夷”“师夷长技以制夷”（je大佬插件）<br>  luci-app-v“师夷长技以制夷” —&gt; Include Xray #Xray代理(XTLS)<br>  luci-app-v“师夷长技以制夷” —&gt; Include Trojan #Trojan代理(直接模仿协议HTTPS)<br>  luci-app-v“师夷长技以制夷” —&gt; Include Kcptun #Kcptun双边加速工具<br>  luci-app-v“师夷长技以制夷” —&gt; Include “师夷长技以制夷” Xray Plugin #SS Xray代理<br>  luci-app-v“师夷长技以制夷” —&gt; Include “师夷长技以制夷”R Libev Server #“师夷长技以制夷” Libev服务端(轻量级)<br>LuCI —&gt; Applications —&gt; luci-app-watchcat #断网检测功能与定时重启<br>LuCI —&gt; Applications —&gt; luci-app-webadmin #Web管理页面设置<br>LuCI —&gt; Applications —&gt; luci-app-webdav #WebDAV阿里云盘 *****<br>LuCI —&gt; Applications —&gt; luci-app-webshell #网页命令行终端（丢弃）<br>LuCI —&gt; Applications —&gt; luci-app-wifischedule #WiFi 计划<br>LuCI —&gt; Applications —&gt; luci-app-wireguard #virtual</strong>服务器 WireGuard状态<br>LuCI —&gt; Applications —&gt; luci-app-wirele“师夷长技以制夷”egdb #WiFi无线<br>LuCI —&gt; Applications —&gt; luci-app-wol  #WOL网络唤醒<br>LuCI —&gt; Applications —&gt; luci-app-wrtbwmon #实时流量监测<br>LuCI —&gt; Applications —&gt; luci-app-xlnetacc #迅雷快鸟<br>LuCI —&gt; Applications —&gt; luci-app-zerotier #ZeroTier内网穿透<br>-—————————————————————————————<br>转载的时候请注明出处</p><p>支持 iPv6：<br>1、Extra packages —&gt; ipv6helper （选定这个后下面几项自动选择了）<br>Network —&gt; odhcp6c<br>Network —&gt; odhcpd-ipv6only<br>LuCI —&gt; Protocols —&gt; luci-proto-ipv6<br>LuCI —&gt; Protocols —&gt; luci-proto-ppp</p><p>2、打开适用于VMware的VM Tools<br>Utilities —&gt; open-vm-tools #打开适用于VMware的VM Tools<br>Utilities —&gt; open-vm-tools-fuse #打开适用于VMware的VM Tools</p><p>3、第二次编译：<br>cd lede                                                    # 进入LEDE目录<br>git pull                                                     # 同步更新大雕源码<br>.&#x2F;scripts&#x2F;feeds update -a &amp;&amp; .&#x2F;scripts&#x2F;feeds install -a          # 更新Feeds<br>rm -rf .&#x2F;tmp &amp;&amp; rm -rf .config                               # 清除编译配置和缓存<br>make menuconfig                                          # 进入编译配置菜单<br>make -jn V&#x3D;99                                             # 开始编译 n&#x3D;线程数+1，例如4线程的I5填-j5</p><p>4、编译丰富插件时，建议修改下面两项默认大小，留足插件空间。（ x86&#x2F;64 ）！！！<br>Target Images —&gt; (16) Kernel partition size (in MB)                #默认是 (16) 建议修改 (256)<br>Target Images —&gt; (400) Root filesystem partition size (in MB)      #默认是 (400) 建议修改 (512)</p><p>另外有Excel文档方便修改查找：202211 </p><p><img src="https://www.right.com.cn/forum/static/image/filetype/zip.gif" alt="img"> <a href="https://www.right.com.cn/forum/forum.php?mod=misc&action=attachpay&aid=327014&tid=344825">OpenWRT编译LUCI插件说明2022.11.xlsx.zip</a> <em>(24.25 KB, 下载次数: 7061, 售价: 2 币恩山币)</em></p><p>最好的支持就是你们的回帖！  谢谢！<br>最好的支持就是你们的回帖！  谢谢！<br>最好的支持就是你们的回帖！  谢谢！</p><p>由于之前帖子不能编辑只能补充，这里是备份链接：<br><a href="https://www.right.com.cn/forum/thread-3682029-1-1.html">https://www.right.com.cn/forum/thread-3682029-1-1.html</a></p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenWrt 编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩客云离线安装软件</title>
    <link href="/2024/10/22/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E7%8E%A9%E5%AE%A2%E4%BA%91%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    <url>/2024/10/22/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E7%8E%A9%E5%AE%A2%E4%BA%91%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>玩客云离线安装软件</p><p>下载完所需要的安装包，上传到路由tmp目录<br>cd &#x2F;tmp<br>安装命令是opkg install +软件包名</p><p>或者在首页执行下面</p><p> 这个中文可以用</p><p> 例如这个是软件全名<code>luci-app-usb-printer_svn-r9961-1_all.ipk</code><br> 复制下面代码在命令窗口执行即可安装<br> <figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ooki1hmfcwb3cr"></i><span>ADA</span><div class="collapse show" id="collapse-ooki1hmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">opkg install /tmp/luci-app-usb-printer_svn-r9961-<span class="hljs-number">1_</span><span class="hljs-keyword">all</span>.ipk<br></code></pre></td></tr></table></div></figure></p><p>如果要删除软件，可以以下命令</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-twc67umfcwb3cr"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-twc67umfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">opkg <span class="hljs-built_in">remove</span> luci-app-usb-printer<br></code></pre></td></tr></table></div></figure><p>上传一次重启会删除安装包的！要注意!</p><p>玩客云：从你提供的系统架构信息来看，你的设备支持以下架构：</p><p>all<br>noarch<br>arm_cortex-a5_vfpv4<br>而你尝试安装的 .ipk 包是针对 ar71xx 架构的，这与当前系统的架构 (arm_cortex-a5_vfpv4) 不兼容。因此，出现了架构不匹配的错误。</p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>玩客云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩客云刷机（保姆级教程）ArmBian+Casaos</title>
    <link href="/2024/10/19/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%88%B7%E6%9C%BA%EF%BC%88%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%EF%BC%89ArmBian-Casaos/"/>
    <url>/2024/10/19/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%88%B7%E6%9C%BA%EF%BC%88%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%EF%BC%89ArmBian-Casaos/</url>
    
    <content type="html"><![CDATA[<h1 id="玩客云刷机（保姆级教程）ArmBian-Casaos"><a href="#玩客云刷机（保姆级教程）ArmBian-Casaos" class="headerlink" title="玩客云刷机（保姆级教程）ArmBian+Casaos"></a>玩客云刷机（保姆级教程）ArmBian+Casaos</h1><p>的玩客云会24小时写我的硬盘，后面了解了一下，玩客云有链克计划，会一直写你的盘，且关不掉，所以我就自己刷了个机，刷成了Armbian，下面就是我的教程</p><p>准备材料</p><ol><li>一根usb公对公的线，你们可以到淘宝上去买（<strong>注意，一定要是刷机的数据线，不能是充电线</strong>）</li><li>一台电脑</li><li>把我下面的百度网盘的刷机要用到的资料下载下载<br><a href="https://pan.baidu.com/s/1KyB1guXcUwkf4IR_PHmN4A?pwd=qub9" title="链接">链接</a>提取码: qub9</li></ol><p>然后我们双击里面的刷机工具USB buring tools2.1.6.8,解压之后双击安装APP，安装好了之后打开，然后选择右上角的导入固件，选择我资源里面的得Armbian开头的文件，然后导入，导入完了之后先放在那里，等会再用。</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/0c3dbe741df87c4a3f2152b351110e37.png"></p><p>我们先用热风枪或者是吹风机吧玩客云的有USB口的那一面加热，大概一分钟左右，热风枪的话温度差不多是100度，加热用撬棒把最外面的壳给拆下来，然后你会看到有六颗螺丝，把他们拧下来，然后把那个挡板拆下来，最后把主板拿下来，下面是成品图</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/252ebf55096ace29ee08fc18fb712135.png">拆下主板之后，我们把主板翻到背面，然后找到主板短接的点，1.1主板的是下面的第一张图，画蓝色圈圈的是短接位置，图二是1.3主板的短接位置，如果你的玩客云的sd卡的位置没有写字，那么你的主板就是1.1的，反之你的主板就是1.3的主板。</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/e96ea4002142a730545d3a1058e1c76d.png"><img src="https://app.fekepj.com/list-tu/2024/10/19/ed603095f53fcb1d0b448e5224442386.png">按照上面的图片用两段小铜丝连在一起（不建议用夹子，因为你需要拿夹子放在上面一动不动4分钟）然后插上买的usb公对公的线，一头插在电脑上，另外一头插在玩客云的2号口，也就是靠近HDMI的那个usd口，准备好之后，点击电脑上的开始，然后给玩客云插上电源，就开始<a href="https://so.csdn.net/so/search?q=%E5%88%B7%E6%9C%BA&spm=1001.2101.3001.7020">刷机</a>了，如果提示USB控制器错误，可以换个USB口，如果还是不行，建议换台电脑（注意：如果你的玩客云通电之后那个指示灯是亮着的话，那么就说明你的短接有问题或者是usb连接有问题）</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/33a8f80132b3007d9242e4edd091c551.png">烧录完成之后，把短接的铜线拿掉，然后重新通电开机，插上网线，等玩客云上线，如果网口的灯已经亮了，那么你可以到路由器管理地址去查看玩客云的ip地址(路由器后台管理地址不同的路由器都不一样，大家可以自行百度）玩客云上线之后在路由器里叫onecloud,<img src="https://app.fekepj.com/list-tu/2024/10/19/89786a04c5e8cb042268e391fd562924.png">下面我用红线画出来了，就是玩客云的ip地址，记住他，然后打开putty软件，选择ssh,然后输入刚刚看到的ip地址，端口的话不用更改,点击打开（注意，你的电脑一定要和玩客云处在同一网络下）</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/0938df71a1b022377251d407c3b547ea.png"></p><p>第一次连接，登录的账户是root ,密码是1234.登陆完成之后它会要求你创建账户，修改密码，都处理完后，你会进入到一个类似于下面的界面。<br><img src="https://app.fekepj.com/list-tu/2024/10/19/34e8c99825112cc1f24ff5bd928df2b6.png"></p><p>然后你在下面输入这行代码，玩客云就开始安装casaos了</p><figure class="highlight plaintext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lsjs87mfcwb3cp"></i><span>COBOL</span><div class="collapse show" id="collapse-lsjs87mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">curl -fsSL https://get.casaos.io | sudo bash<br></code></pre></td></tr></table></div></figure><p>安装过程大概要半个小时，具体速度取决于网络情况，等安装好了之后，你就可以在浏览器里输入之前的ip地址，然后创建casaos的账号和密码，创建好了之后，你就进入到了casaos了</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/452370d065fa474cf1c537f9790bfaab.png"></p><p>这篇教程就结束了，如果你想更好的使用玩客云，那么你可以看文章</p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Casaos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20元的玩客云刷CasaOS加装jellyfin</title>
    <link href="/2024/10/19/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/20%E5%85%83%E7%9A%84%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%88%B7CasaOS%E5%8A%A0%E8%A3%85jellyfin/"/>
    <url>/2024/10/19/%E8%BD%AF%E8%B7%AF%E7%94%B1%E4%B8%93%E6%A0%8F/20%E5%85%83%E7%9A%84%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%88%B7CasaOS%E5%8A%A0%E8%A3%85jellyfin/</url>
    
    <content type="html"><![CDATA[<h1 id="20元的玩客云刷CasaOS加装jellyfin"><a href="#20元的玩客云刷CasaOS加装jellyfin" class="headerlink" title="20元的玩客云刷CasaOS加装jellyfin"></a>20元的玩客云刷CasaOS加装jellyfin</h1><h2 id="20块的NAS，支持海报墙？xiaoya-alist-内网穿透-jellyfin硬解"><a href="#20块的NAS，支持海报墙？xiaoya-alist-内网穿透-jellyfin硬解" class="headerlink" title="20块的NAS，支持海报墙？xiaoya+alist+内网穿透+jellyfin硬解"></a>20块的NAS，支持海报墙？xiaoya+alist+内网穿透+jellyfin硬解</h2><p>视频地址： <a href="https://www.bilibili.com/video/BV1dM4m1f7t9">20块的NAS，支持docker xiaoya alist 内网穿透 jellyfin 解码部署教程</a></p><p><strong>理论上支持所有 armhf 架构的各类盒子</strong>，至于硬解嘛，要看机器性能了~</p><p><strong>一、拆机</strong></p><p>重点讲一下：</p><p>吹热把胶软化后，从SD卡口横向插入摆动下，慢慢来，就像对待你的女朋友一样~</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/115a9463ec5a7ac52f86fb4ba9a779d5.avif" alt="img">吹热软化胶板</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/7a189e08a78a59e510134f736b80678e.avif" alt="img">从SD卡处插入</p><p><strong>二、刷机</strong></p><p>烧录最新armbian底包到eMMC，你可以在GitHub的armbian官网上找到它，并下载下来，当然我也在分享里也提供给了大家。</p><p>需要注意的是，第一次刷机的时候请先连接号USB数据线，然后选择img底包，勾选擦除flash和bootloader，点击开始后，短接刷机触点，然后接通电源。</p><p>**<br>**</p><p><strong>三、安装CasaOS（面板管理工具）</strong></p><p><strong>1、finashell（或其他远程终端）连接到设备后，修改系统时区：</strong></p><p>输入timedatectl                        #可以看到当前时区信息</p><p>输入timedatectl list-timezones             #可查看可选时区</p><p>输入timedatectl set-timezone Asia&#x2F;Shanghai #将时区设置为中国标准时间</p><p><strong>2、终端输入：</strong></p><p>nano &#x2F;etc&#x2F;apt&#x2F;sources.list</p><p>用#注释掉自带的软件源，在文件最后添加清华大学镜像源地址</p><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/</a> jammy main restricted universe multiverse</p><p># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/</a> jammy main restricted universe multiverse</p><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/</a> jammy-updates main restricted universe multiverse</p><p># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/</a> jammy-updates main restricted universe multiverse</p><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/</a> jammy-backports main restricted universe multiverse</p><p># deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/</a> jammy-backports main restricted universe multiverse</p><p>deb <a href="http://ports.ubuntu.com/ubuntu-ports/">http://ports.ubuntu.com/ubuntu-ports/</a> jammy-security main restricted universe multiverse</p><p># deb-src <a href="http://ports.ubuntu.com/ubuntu-ports/">http://ports.ubuntu.com/ubuntu-ports/</a> jammy-security main restricted universe multiverse</p><p>按ctrl+x键退出编辑，输入y保存，回车</p><p><strong>3、更新软件源数据：</strong></p><p>apt-get update</p><p><strong>4、更新完成后使用casaos一键安装命令，完成部署：</strong></p><p>curl -fsSL <a href="https://get.casaos.io/">https://get.casaos.io</a> | sudo bash</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/1e41b6f9ca8a549a6d29f9391bda477c.avif" alt="img">CasaOS系统（管理面板）</p><p>**<br>**</p><p><strong>四、xiaoya影音超集部署</strong></p><p><strong>1、新建&#x2F;mnt&#x2F;docker&#x2F;xiaoya文件夹；</strong></p><p><strong>2、根据mytoken.txt、myopentoken.txt、temp_transfer_folder_id.txt 内的连接，用手机扫码获得到对应的配置数据，覆盖掉原来的txt文档内容保存，docker_address.txt不用变动，然后上传到新建好的xiaoya文件夹内；</strong></p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/abf250318837c782ab1a44b08869e0d6.avif" alt="img">配置文件</p><p><strong>3、终端输入命令对docker文件夹提权：</strong></p><p>chmod -R 777 &#x2F;mnt&#x2F;docker</p><p><strong>4、执行xiaoya-alist一键安装命令完成安装：</strong></p><p>docker run -d –restart&#x3D;always –name&#x3D;”xiaoya” -p 5678:80 -p 2345:2345 -p 2346:2346 -v &#x2F;mnt&#x2F;docker&#x2F;xiaoya:&#x2F;data xiaoyaliu&#x2F;alist:latest</p><p><strong>5、xiaoya启动情况查看：</strong></p><p>docker logs -f xiaoya   #查看xiaoya容器运行日志，等待日志显示xx@版本后以后说明加载完成，就可以通过设备IP:5678 访问xiaoya-alist了，此时已经可以在网页上进行播放了。</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/a683be7dad7e69a03434197eb5d9fd30.avif" alt="img">xiaoya-alist网页端</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/5ae56fbcc2dc071cf41175a936e4ea15.avif" alt="img">播放测速</p><p>模式0：每天自动清理一次。如果系统重启需要手动重新运行或把命令加入系统启动</p><p>bash -c “$(curl -s <a href="https://xiaoyahelper.ddsrem.com/aliyun_clear.sh">https://xiaoyahelper.ddsrem.com/aliyun_clear.sh</a> | tail -n +2)” -s 0</p><p>模式1：一次性清理，一般用于测试效果</p><p>bash -c “$(curl -s <a href="https://xiaoyahelper.ddsrem.com/aliyun_clear.sh">https://xiaoyahelper.ddsrem.com/aliyun_clear.sh</a> | tail -n +2)” -s 1</p><p>模式2：已废弃，不再支持</p><p>模式3：创建一个名为 xiaoyakeeper 的docker定时运行小雅转存清理并升级小雅镜像</p><p>bash -c “$(curl -s <a href="https://xiaoyahelper.ddsrem.com/aliyun_clear.sh">https://xiaoyahelper.ddsrem.com/aliyun_clear.sh</a> | tail -n +2)” -s 3</p><p>模式4：同模式3</p><p>模式5：与模式3的区别是实时清理，只要产生了播放缓存一分钟内立即清理。签到和定时升级同模式3</p><p>bash -c “$(curl -s <a href="https://xiaoyahelper.ddsrem.com/aliyun_clear.sh">https://xiaoyahelper.ddsrem.com/aliyun_clear.sh</a> | tail -n +2)” -s 5</p><p><strong>7、在CasaOS中，使用Appstore中安装alist，并根据视频操作完成xiaoya的套娃挂载。</strong></p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/ed9aae3e03c9f8f234f3a8f11f67c25c.avif" alt="img">alist挂载xiaoya-alist</p><p><strong>五、免费内网穿透，实现外网访问设备</strong></p><p><strong>1、访问cpolar官网：</strong></p><p><a href="https://www.cpolar.com/">https://www.cpolar.com/</a>  注册账号并登录</p><p><strong>2、下载linux arm的安装程序，并解压缩的到cpolar；</strong></p><p><strong>3、上传 cpolar到 &#x2F;mnt 目录；</strong></p><p><strong>4、终端依次执行：</strong></p><p>cd &#x2F;mnt</p><p>chmod -R 777 cpolar</p><p><strong>5、回到colar个人页面，获得带有账号密钥的执行命令，并在SSH终端执行该命令；</strong></p><p><strong>6、将内cpolar加入到系统自启：</strong></p><p>systemctl start cpolar    #cpolar添加到系统</p><p>systemctl enable cpolar  #cpolar添加到系统启动项</p><p><strong>六、TV-box挂载xiaoya-alist</strong></p><p>1、安装影视仓.apk（tvbox二次开发版本）</p><p>2、配置地址</p><p>小雅：http:&#x2F;&#x2F;设备IP:5678&#x2F;tvbox&#x2F;my.json</p><p>多仓聚合：http:&#x2F;&#x2F;设备IP:5678&#x2F;tvbox&#x2F;my_ext.json</p><p>！xiaoya-alist内置了多条线路，大家按需使用~</p><p>守护进程的的运行除了会清楚网盘缓存外，还会自动更新很多配置地址</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/7cefed91ad34d982a7285c6aa7f9001c.avif" alt="img">tvbox挂载xiaoya-alist</p><p><strong>七、jellyfin挂载xiaoya影视库</strong></p><p><strong>1、浏览访问xiaoya网页，将 &#x2F;元数据&#x2F;jellyfin&#x2F;all_if.mp4 影视库数据下载下来（也可以是&#x2F;元数据all.mp4）;</strong></p><p><strong>2、用7z解压缩工具根据自己的需求解压缩影视文件；</strong></p><p><strong>3、SSH格式化硬盘（U盘）：</strong></p><p>fdisk -l            #查看硬盘系统路径，我这里是在&#x2F;dev&#x2F;sda</p><p>mkfs.ext4 &#x2F;dev&#x2F;sda  #将硬盘格式化为linux系统的Ext4格式</p><p><strong>4、格式化完成后，将硬盘（U盘）插入PC，打开diskgenius，依次新建&#x2F;xiaoya&#x2F;media文件夹，并将解压好的数据文件夹复制到&#x2F;xiaoya&#x2F;media文件夹内后，插回设备；</strong></p><p><strong>5、硬盘开启自动挂载：</strong></p><p>新建 &#x2F;mnt&#x2F;devdata 文件夹</p><p>ssh输入</p><p>blkid           #查看硬盘UUID号</p><p>nano &#x2F;etc&#x2F;fstab   #编辑开机挂载文件</p><p>UUID&#x3D;你设备的UUID号 &#x2F;mnt&#x2F;devdata ext4 noatime,acl,user_xattr 0 2   #将开机挂载命令填入文件底部</p><p>ctrl+x y 回车</p><p>mount -a       #挂载所有硬盘设备</p><p>nano &#x2F;etc&#x2F;hosts  #编辑hosts文件</p><p>127.0.0.1   xiaoya.host  #填入文件底部</p><p>ctrl+x y 回车</p><p><strong>6、jellyfin部署准备</strong></p><p>新建 &#x2F;mnt&#x2F;devdata&#x2F;docker&#x2F;jellyfin 文件夹，并在jellyfin文件夹下新建 config cache 两个文件夹，上传assfonts和fonts文件夹，再上传ffmpeg的arm解码包</p><p><strong>7、解码包安装：</strong></p><p>chmod -R 777 &#x2F;mnt&#x2F;devdata&#x2F;docker   #提权</p><p>chmod -R 777 &#x2F;dev&#x2F;dri             #提权</p><p>apt-get install -f                   #依赖修复命令</p><p>执行命令，安装解码依赖：</p><p>apt-get install libbluray2 libdrm2 libmp3lame0 libopenmpt0 libopus0 libtheora0 libvorbis0a libvorbisenc2 libvpx7 libwebp7 libwebpmux3 libx264-163 libx265-199 libzvbi0 ocl-icd-libopencl1 libopencl1 libopencl-1.2-1</p><p>转到ffmpeg安装文件在路径</p><p>cd &#x2F;mnt&#x2F;docker&#x2F;jellyfin</p><p>dpkg -i jellyfin-ffmpeg6_6.0.1-6-jammy_armhf.deb  #安装ffmpeg解码包</p><p><strong>8、部署官方jellyfin：</strong></p><p>docker run -d –name&#x3D;jellyfin \</p><p>–device &#x2F;dev&#x2F;dri&#x2F;renderD128:&#x2F;dev&#x2F;dri&#x2F;renderD128 \</p><p>-v &#x2F;mnt&#x2F;devdata&#x2F;docker&#x2F;jellyfin&#x2F;config:&#x2F;config:rw \</p><p>-v &#x2F;mnt&#x2F;devdata&#x2F;docker&#x2F;jellyfin&#x2F;cache:&#x2F;cache:rw \</p><p>-v &#x2F;mnt&#x2F;devdata&#x2F;docker&#x2F;jellyfin&#x2F;fonts:&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;truetype&#x2F;dejavu \</p><p>-v &#x2F;mnt&#x2F;devdata&#x2F;docker&#x2F;jellyfin&#x2F;assfonts:&#x2F;assfont \</p><p>-v &#x2F;mnt:&#x2F;mnt \</p><p>–net&#x3D;host \</p><p>–restart&#x3D;always \</p><p>jellyfin&#x2F;jellyfin</p><p><img src="https://app.fekepj.com/list-tu/2024/10/19/b27f756ee77c1cb98d6a09eb046a8743.avif" alt="a">jellyfin部署完成</p><p>相关软件包和工具详见：<a href="https://www.bilibili.com/video/BV1dM4m1f7t9/?spm_id_from=333.976.0.0">20块的NAS，支持docker xiaoya alist 内网穿透 jellyfin 解码部署教程</a> 置顶评论</p><p><strong>感谢你的一键三连+关注哦</strong></p>]]></content>
    
    
    <categories>
      
      <category>软路由专栏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>玩客云</tag>
      
      <tag>玩客云刷机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看git绑定的仓库-解绑重绑远程仓库</title>
    <link href="/2024/10/18/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E6%9F%A5%E7%9C%8Bgit%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BB%93%E5%BA%93-%E8%A7%A3%E7%BB%91%E9%87%8D%E7%BB%91%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/2024/10/18/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E6%9F%A5%E7%9C%8Bgit%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BB%93%E5%BA%93-%E8%A7%A3%E7%BB%91%E9%87%8D%E7%BB%91%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="查看git绑定的仓库-解绑重绑远程仓库"><a href="#查看git绑定的仓库-解绑重绑远程仓库" class="headerlink" title="查看git绑定的仓库-解绑重绑远程仓库"></a>查看git绑定的仓库-解绑重绑远程仓库</h1><p>解决 GitHub S&#96;&#96;&#96; 连接问题</p><ol><li>初始化本地仓库（如果还没有初始化）：</li></ol><figure class="highlight csharp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8d3jrzmfcwb3cs"></i><span>CSHARP</span><div class="collapse show" id="collapse-8d3jrzmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>将远程仓库添加为远程分支（使用你提供的仓库名）：</li></ol><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5yk4t7mfcwb3cs"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-5yk4t7mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin git@github.com:lifuaini2019/publii-bk.git</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li>拉取远程仓库的 <code>befe</code> 分支到本地：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-edb49amfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-edb49amfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git fetch origingit checkout befe</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li>添加本地文件到暂存区：</li></ol><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ndm0zomfcwb3cs"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-ndm0zomfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></div></figure><ol start="5"><li>提交更改：</li></ol><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gxh1tumfcwb3cs"></i><span>NGINX</span><div class="collapse show" id="collapse-gxh1tumfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;Initial commit&quot;</span><br></code></pre></td></tr></table></div></figure><ol start="6"><li>推送本地更改到远程 <code>befe</code> 分支：</li></ol><figure class="highlight autohotkey"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-22xxpimfcwb3cs"></i><span>AUTOHOTKEY</span><div class="collapse show" id="collapse-22xxpimfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">git pu``` origin befe<br></code></pre></td></tr></table></div></figure><p>这些命令会执行你需要的所有步骤：初始化本地仓库，绑定到远程仓库，检出远程分支，添加和提交本地文件，最后将更改推送到远程仓库的指定分支。</p><h1 id="要查看本地文件夹与哪个远程仓库绑定"><a href="#要查看本地文件夹与哪个远程仓库绑定" class="headerlink" title="要查看本地文件夹与哪个远程仓库绑定"></a>要查看本地文件夹与哪个远程仓库绑定</h1><p>要查看本地文件夹与哪个远程仓库绑定，以及该远程仓库的别名，你可以使用以下 Git 命令：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-66fumbmfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-66fumbmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></div></figure><p>这个命令会列出所有远程仓库及其别名，以及每个远程仓库的 URL。对于每个绑定的远程仓库，-v 选项（即 –verbose）会提供更多的信息，包括绑定时的 URL。</p><p>执行这个命令后，你会看到类似以下的内容（假设你的本地仓库已经与一个名为 origin 的远程仓库绑定了）：</p><figure class="highlight scss"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zv0ha4mfcwb3cs"></i><span>SCSS</span><div class="collapse show" id="collapse-zv0ha4mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">origin  git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:username/repo.git (fetch)<br>origin  git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:username/repo.git (push)<br><br></code></pre></td></tr></table></div></figure><p>在这个输出中：</p><ul><li><code>origin</code> 是远程仓库的别名。</li><li><code>git@github.com:username/repo.git</code> 是远程仓库的 URL。</li><li><code>(fetch)</code> 和 <code>(pu```)</code> 表示你可以从这个远程仓库拉取和推送内容。</li></ul><p>这样你就可以清楚地看到本地仓库与哪个远程仓库绑定了。</p><h1 id="解绑远程仓库"><a href="#解绑远程仓库" class="headerlink" title="解绑远程仓库"></a>解绑远程仓库</h1><p>用什么命令给解绑。再绑到新的仓库，并克隆指定的分支到这个文件夹里？</p><ol><li>解绑远程仓库：</li></ol><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ps0az2mfcwb3cs"></i><span>MAXIMA</span><div class="collapse show" id="collapse-ps0az2mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git remote <span class="hljs-built_in">remove</span> <span class="hljs-built_in">origin</span><br></code></pre></td></tr></table></div></figure><p>这条命令会移除名为 <code>origin</code> 的远程仓库。如果你为远程仓库设置了多个别名，你需要为每个别名重复这个操作。</p><ol start="2"><li>将本地仓库绑定到新的远程仓库。假设新的远程仓库 URL 是 <code>git@github.com:lifuaini2019/publii-bk.git</code>，你可以使用以下命令：</li></ol><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6to4spmfcwb3cs"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-6to4spmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin git@github.com:lifuaini2019/publii-bk.git</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li>克隆指定的分支到本地文件夹。如果你想要克隆特定的分支，例如 <code>befe</code> 分支，你可以使用以下命令：</li></ol><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8to6htmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-8to6htmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@github.com:lifuaini2019/publii-bk.git<br></code></pre></td></tr></table></div></figure><p>这样就会在当前目录下多了一个publii-bk的文件夹<br>可以用这命令快速打开当前文件夹</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-33wakymfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-33wakymfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span> .<br></code></pre></td></tr></table></div></figure><p>这里 <code>-b befe</code> 选项指定了克隆时要使用的分支。</p><p>如果你已经有一个本地仓库，并且想要将远程仓库克隆到这个现有文件夹中，你需要先解绑现有的远程仓库，然后再使用 <code>git clone</code> 命令。以下是完整的步骤：</p><p>.  绑定到新的远程仓库：</p><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-h72vsimfcwb3cs"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-h72vsimfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin git@github.com:lifuaini2019/publii-bk.git</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li>克隆指定的分支到本地文件夹：</li></ol><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mvn3avmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-mvn3avmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe origin<br></code></pre></td></tr></table></div></figure><p>如果本地文件夹已经有内容，你需要先清空或备份该文件夹，然后执行克隆操作，因为 <code>git clone</code> 会覆盖本地文件夹的内容。如果你想要保留本地文件夹的内容，你可以克隆到一个新的文件夹中：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-n45pvymfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-n45pvymfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe origin /path/to/new/directory<br></code></pre></td></tr></table></div></figure><p>确保将 <code>/path/to/new/directory</code> 替换为你希望克隆到的目标文件夹路径。</p><p>G:\我的文档\Publii\backups\fei-ke-piao-ji 要把上面的文件夹绑定到<a href="mailto:&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;</a>:lifuaini2019&#x2F;publii-bk.git 分支befe</p><p>要将位于 <code>G:\我的文档\Publii\backups\fei-ke-piao-ji</code> 的文件夹绑定到 <code>git@github.com:lifuaini2019/publii-bk.git</code> 仓库，并克隆指定的分支 <code>befe</code>，请按照以下步骤操作：</p><ol><li><p>首先，确保你的 Git 工具和命令行环境已经配置好。</p></li><li><p>打开命令提示符或终端窗口。</p></li><li><p>使用 <code>cd</code> 命令切换到 <code>G:\我的文档\Publii\backups\fei-ke-piao-ji</code> 文件夹：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-iw3rmmmfcwb3cs"></i><span>BASH</span><div class="collapse show" id="collapse-iw3rmmmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> G:\我的文档\Publii\backups\fei-ke-piao-ji<br></code></pre></td></tr></table></div></figure><ol start="4"><li>初始化一个新的 Git 仓库（如果这个文件夹还不是 Git 仓库的话）：</li></ol><figure class="highlight csharp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4mrcrcmfcwb3cs"></i><span>CSHARP</span><div class="collapse show" id="collapse-4mrcrcmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></div></figure><ol start="5"><li>添加远程仓库（假设这个仓库还没有绑定任何远程仓库）：</li></ol><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pmgrenmfcwb3cs"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-pmgrenmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin git@github.com:lifuaini2019/publii-bk.git</span><br></code></pre></td></tr></table></div></figure><ol start="6"><li>拉取远程仓库的 <code>befe</code> 分支到本地：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9o5fnzmfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-9o5fnzmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git fetch origin</span><br></code></pre></td></tr></table></div></figure><ol start="7"><li>切换 <code>befe</code> 分支：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9pwpexmfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-9pwpexmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout befe</span><br></code></pre></td></tr></table></div></figure><p>如果你想要将 <code>befe</code> 分支克隆到这个文件夹中，而不是从现有的本地仓库拉取分支，你应该先克隆仓库，然后再切换到 <code>befe</code> 分支。以下是执行这个操作的命令：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fqmbqbmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-fqmbqbmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@github.com:lifuaini2019/publii-bk.git<br></code></pre></td></tr></table></div></figure><p>这个命令会在当前目录下创建一个名为 <code>publii-bk</code> 的文件夹，并从中克隆 <code>befe</code> 分支的内容。</p><p>请确保在执行上述命令之前，你已经在正确的目录中，并且你有权访问 <code>git@github.com:lifuaini2019/publii-bk.git</code> 仓库。如果你之前已经在这个文件夹中初始化了 Git 仓库，并且想要更新到 <code>befe</code> 分支，那么步骤 4 和 5 是必要的。如果你只是想克隆一个分支到这个文件夹中，那么步骤 6 和 7 就足够了。</p><h2 id="我不想创建publii-bk文件夹，我只想把publii-bk文件夹下的内容拉到G-我的文档-Publii-backups-fei-ke-piao-ji"><a href="#我不想创建publii-bk文件夹，我只想把publii-bk文件夹下的内容拉到G-我的文档-Publii-backups-fei-ke-piao-ji" class="headerlink" title="我不想创建publii-bk文件夹，我只想把publii-bk文件夹下的内容拉到G:\我的文档\Publii\backups\fei-ke-piao-ji"></a>我不想创建publii-bk文件夹，我只想把publii-bk文件夹下的内容拉到G:\我的文档\Publii\backups\fei-ke-piao-ji</h2><p>如果你只想将 <code>publii-bk</code> 仓库的内容拉取到 <code>G:\我的文档\Publii\backups\fei-ke-piao-ji</code> 文件夹中，而不创建新的 <code>publii-bk</code> 文件夹，你需要执行以下步骤：</p><ol><li><p>首先，打开命令提示符或终端窗口。</p></li><li><p>使用 <code>cd</code> 命令切换到 <code>G:\我的文档\Publii\backups\fei-ke-piao-ji</code> 文件夹：</p></li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hlg801mfcwb3cs"></i><span>BASH</span><div class="collapse show" id="collapse-hlg801mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> G:\我的文档\Publii\backups\fei-ke-piao-ji<br></code></pre></td></tr></table></div></figure><ol start="3"><li>初始化一个新的 Git 仓库（如果这个文件夹还不是 Git 仓库的话）：</li></ol><figure class="highlight csharp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t6njqsmfcwb3cs"></i><span>CSHARP</span><div class="collapse show" id="collapse-t6njqsmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li>添加远程仓库：</li></ol><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-csar0gmfcwb3cs"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-csar0gmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin git@github.com:lifuaini2019/publii-bk.git</span><br></code></pre></td></tr></table></div></figure><ol start="5"><li>拉取远程仓库的 <code>befe</code> 分支到本地：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-w9g40amfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-w9g40amfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git fetch origin befe</span><br></code></pre></td></tr></table></div></figure><ol start="6"><li>检出 <code>befe</code> 分支到当前文件夹：</li></ol><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7e6rlpmfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-7e6rlpmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout befe</span><br></code></pre></td></tr></table></div></figure><p>或者，如果你想直接拉取内容而不创建分支，可以这样做：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5rgcu4mfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-5rgcu4mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull origin befe</span><br></code></pre></td></tr></table></div></figure><p>这条命令会拉取远程仓库 <code>origin</code> 的 <code>befe</code> 分支，并将内容合并到当前分支上。如果当前文件夹已经是 Git 仓库，<code>git pull</code> 会自动将远程分支合并到本地当前分支。</p><p>执行这些命令后，<code>G:\我的文档\Publii\backups\fei-ke-piao-ji</code> 文件夹中的内容将被更新为远程仓库 <code>publii-bk</code> 中 <code>befe</code> 分支的内容。</p><p>如果我本地文件更新，我只选择两种文件类型推送到仓库，例如*.&#96;&#96;&#96;文件和*.tar只更新推送这两种文件到远程仓库，用什么命令</p><p>如果你只想更新和推送特定类型的文件（例如 <code>.```` 和 </code>.tar<code>）到远程仓库，你可以使用 </code>git add<code>命令配合</code>find<code>或</code>grep<code>命令来选择这些文件，然后执行</code>git pu&#96;&#96;&#96;&#96; 来更新远程仓库。</p><p>以下是一个基本的例子，说明如何操作：</p><ol><li>首先，切换到包含你想要更新的文件的目录：</li></ol><figure class="highlight livecodeserver"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-q2i9rsmfcwb3cs"></i><span>LIVECODESERVER</span><div class="collapse show" id="collapse-q2i9rsmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cd /path/<span class="hljs-built_in">to</span>/your/<span class="hljs-built_in">local</span>/<span class="hljs-built_in">directory</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>使用 <code>find</code> 命令来找到所有的 <code>.```` 和 </code>.tar<code>文件，并使用</code>git add&#96; 命令来添加它们到暂存区：</li></ol><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-z9ve3amfcwb3cs"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-z9ve3amfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name <span class="hljs-string">&quot;*.```&quot;</span> -exec git <span class="hljs-built_in">add</span> &#123;&#125; \; &amp;&amp; <span class="hljs-built_in">find</span> . -name <span class="hljs-string">&quot;*.tar&quot;</span> -exec git <span class="hljs-built_in">add</span> &#123;&#125; \;<br></code></pre></td></tr></table></div></figure><p>这条命令会找到当前目录及其子目录下所有的 <code>.```` 和 </code>.tar&#96; 文件，并将它们添加到 Git 的暂存区。</p><ol start="3"><li>接下来，使用 <code>git commit</code> 命令来提交更改：</li></ol><figure class="highlight autohotkey"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tbw8jpmfcwb3cs"></i><span>AUTOHOTKEY</span><div class="collapse show" id="collapse-tbw8jpmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">git commit -m <span class="hljs-string">&quot;Update .``` and .tar files&quot;</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li>最后，使用 &#96;git pu&#96;&#96;&#96;&#96; 命令来将更改推送到远程仓库：</li></ol><figure class="highlight autohotkey"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ua5q43mfcwb3cs"></i><span>AUTOHOTKEY</span><div class="collapse show" id="collapse-ua5q43mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">git pu``` origin &lt;branch-name&gt;<br></code></pre></td></tr></table></div></figure><p>将 <code>&lt;branch-name&gt;</code> 替换为你想要推送到远程仓库的分支名称。</p><p>如果你使用的是 Unix-like 系统（如 Linux 或 macOS），上面的命令链可以简化为：</p><figure class="highlight ceylon"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-42yv8ymfcwb3cs"></i><span>CEYLON</span><div class="collapse show" id="collapse-42yv8ymfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">find . \( -name <span class="hljs-string">&quot;*.``<span class="hljs-subst">`<span class="hljs-string">&quot; -o -name &quot;</span>*.tar<span class="hljs-string">&quot; \) -exec git add &#123;&#125; \; &amp;&amp; git commit -m &quot;</span>Update .</span>``` and .tar files&quot;</span> &amp;&amp; git pu``` origin &lt;branch-name&gt;<br></code></pre></td></tr></table></div></figure><p>如果你使用的是 Windows 系统，可能需要使用批处理或 Power&#96;&#96;&#96;ell 来执行类似操作，因为 <code>find</code> 命令在 Windows 中不是内置的。</p><p>请注意，使用 <code>find</code> 和 <code>git add</code> 可能会将所有匹配的文件（包括隐藏文件）添加到暂存区。如果你只想添加特定的文件，你可能需要修改 <code>find</code> 命令来更精确地指定路径或文件名。</p><p>如果我要推送到befe 的分支，又是怎样写</p><p>如果你只想推送特定类型的文件（例如 <code>.```` 和 </code>.tar<code>）到远程仓库的 </code>befe&#96; 分支，你需要按照以下步骤操作：</p><ol><li>切换到包含你想要更新的文件的本地目录：</li></ol><figure class="highlight livecodeserver"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zka6o2mfcwb3cs"></i><span>LIVECODESERVER</span><div class="collapse show" id="collapse-zka6o2mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cd /path/<span class="hljs-built_in">to</span>/your/<span class="hljs-built_in">local</span>/<span class="hljs-built_in">directory</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li>使用 <code>find</code> 命令来找到所有的 <code>.```` 和 </code>.tar<code>文件，并使用</code>git add&#96; 命令来添加它们到暂存区：</li></ol><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5c9he1mfcwb3cs"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-5c9he1mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . \( -name <span class="hljs-string">&quot;*.```&quot;</span> -o -name <span class="hljs-string">&quot;*.tar&quot;</span> \) -exec git <span class="hljs-built_in">add</span> &#123;&#125; \;<br></code></pre></td></tr></table></div></figure><p>这条命令会找到当前目录及其子目录下所有的 <code>.```` 和 </code>.tar&#96; 文件，并将它们添加到 Git 的暂存区。</p><ol start="3"><li>提交更改到 <code>befe</code> 分支：</li></ol><figure class="highlight autohotkey"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-feh9n1mfcwb3cs"></i><span>AUTOHOTKEY</span><div class="collapse show" id="collapse-feh9n1mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">git commit -m <span class="hljs-string">&quot;Update .``` and .tar files&quot;</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li>推送更改到远程仓库的 <code>befe</code> 分支：</li></ol><figure class="highlight autohotkey"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tbydmzmfcwb3cs"></i><span>AUTOHOTKEY</span><div class="collapse show" id="collapse-tbydmzmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">git pu``` origin befe<br></code></pre></td></tr></table></div></figure><p>这里，<code>origin</code> 是你配置的远程仓库的别名，而 <code>befe</code> 是你想要推送到远程仓库的目标分支。</p><p>如果你执行以上命令，Git 会将本地 <code>befe</code> 分支上的更改（只包含 <code>.```` 和 </code>.tar<code>文件）推送到远程仓库中的</code>befe&#96; 分支。</p><p>确保在执行这些命令之前，你已经切换到了正确的分支，并且本地分支 <code>befe</code> 已经与远程分支同步。如果需要，你可以使用以下命令来确保本地分支与远程分支同步：</p><figure class="highlight mipsasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9qu682mfcwb3cs"></i><span>MIPSASM</span><div class="collapse show" id="collapse-9qu682mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git fetch <span class="hljs-keyword">origingit </span>checkout <span class="hljs-keyword">befegit </span>merge <span class="hljs-keyword">origin/befe</span><br></code></pre></td></tr></table></div></figure><p>这样，在执行推送命令之前，你的本地 <code>befe</code> 分支将是最新且与远程 <code>befe</code> 分支同步的。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git仓库</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typora免费安装教程-已支持最新版1.9.5</title>
    <link href="/2024/10/18/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Typora%E5%85%8D%E8%B4%B9%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-%E5%B7%B2%E6%94%AF%E6%8C%81%E6%9C%80%E6%96%B0%E7%89%881.9.5/"/>
    <url>/2024/10/18/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Typora%E5%85%8D%E8%B4%B9%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-%E5%B7%B2%E6%94%AF%E6%8C%81%E6%9C%80%E6%96%B0%E7%89%881.9.5/</url>
    
    <content type="html"><![CDATA[<h1 id="typora免费安装教程-已支持最新版"><a href="#typora免费安装教程-已支持最新版" class="headerlink" title="typora免费安装教程-已支持最新版"></a>typora免费安装教程-已支持最新版</h1><blockquote><p>实测可用，无需修改<a href="https://so.csdn.net/so/search?q=%E6%B3%A8%E5%86%8C%E8%A1%A8&spm=1001.2101.3001.7020">注册表</a>、修改代码等复杂操作。</p></blockquote><h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><ul><li><ul><li><a href="#Typora__3">一、Typora 简介</a><ul><li><a href="#_7">二、安装教程</a></li><li><ul><li><a href="#1__11">1. 下载安装包与工具</a><ul><li><a href="#2__18">2. 安装与解压</a></li><li><a href="#3__22">3. 复制文件至安装目录</a></li><li><a href="#4__CMD_26">4. 以管理员身份运行 CMD</a></li><li><a href="#5__30">5. 运行工具</a></li><li><a href="#6__39">6. 输入序列号</a></li><li><a href="#7__43">7. 错误处理</a></li><li><a href="#8__47">8. 安装完成</a></li></ul></li></ul></li><li><a href="#_51">三、结语</a></li></ul></li></ul></li></ul><h3 id="一、Typora-简介"><a href="#一、Typora-简介" class="headerlink" title="一、Typora 简介"></a>一、Typora 简介</h3><p><strong>Typora</strong> 是一款跨平台的 Markdown 编辑器，因其简洁的界面和流畅的用户体验而受到广泛欢迎。它支持实时预览功能，让您在编辑 Markdown 文档的同时即时查看最终效果，无需切换视图。此外，Typora 还提供自动保存、多种导出格式（如 PDF、HTML、Word 等）、丰富的主题和样式选项，能够满足不同用户的需求。通过直观的操作界面和快捷键支持，您可以轻松进行文本编辑、格式调整和内容管理，极大提升写作、笔记记录和文档编写的效率。无论您是编程开发者、作家还是学生，Typora 都能为您带来出色的 Markdown 编辑体验。<br><img src="https://app.fekepj.com/list-tu/2024/10/18/d302a5ff6ae440f0bf9f0444f044fb76.jpeg" alt="Typora 主页"></p><h3 id="二、安装教程"><a href="#二、安装教程" class="headerlink" title="二、安装教程"></a>二、安装教程</h3><blockquote><p>该工具来自 <a href="https://github.com/DiamondHunters/NodeInject_Hook_example">GitHub 开源项目：DiamondHunters&#x2F;NodeInject_Hook_example</a><br>有编程基础者及 Linux 用户可自行编译使用。<br>我已经将 Windows 版工具打包，下载即用，以下是操作步骤：</p></blockquote><h4 id="1-下载安装包与工具"><a href="#1-下载安装包与工具" class="headerlink" title="1. 下载安装包与工具"></a>1. 下载安装包与工具</h4><p>Typora 官网地址：<a href="https://typora.io/">https://typora.io</a><br>Typora 中文官网地址：<a href="https://typoraio.cn/">https://typoraio.cn</a><br>工具下载地址：<a href="https://www.lanzouh.com/i7j9H26waded">蓝奏云，密码：fkmj</a> || <a href="https://pan.baidu.com/s/1gga2OZ732Xvig1QKn52NHQ">百度网盘，密码：dcqe</a><br><img src="https://app.fekepj.com/list-tu/2024/10/18/024d34d5b627ce93e1c6880ffe8defc9.jpeg" alt="下载 Typora"><br><img src="https://app.fekepj.com/list-tu/2024/10/18/a1c569e16b88843da2822c99bba2304e.jpeg" alt="下载工具"></p><h4 id="2-安装与解压"><a href="#2-安装与解压" class="headerlink" title="2. 安装与解压"></a>2. 安装与解压</h4><p>Typora 的安装过程我就不演示了，只需按提示点击“下一步”即可。接着，将下载的工具压缩包解压，您会看到两个 <code>exe</code> 文件。<img src="https://app.fekepj.com/list-tu/2024/10/18/4539ac76f35ed96ec59473aff9ed3fdc.jpeg" alt="安装包和压缩包"><br><img src="https://app.fekepj.com/list-tu/2024/10/18/6d98f999f27474623f64dce3cd912cba.jpeg" alt="工具"></p><h4 id="3-复制文件至安装目录"><a href="#3-复制文件至安装目录" class="headerlink" title="3. 复制文件至安装目录"></a>3. 复制文件至安装目录</h4><p>把解压出来的两个 <code>exe</code> 文件复制到 Typora 的安装目录下，默认路径为：<code>C:\Program Files\Typora</code>，如安装在其他路径，请自行替换。<br><img src="https://app.fekepj.com/list-tu/2024/10/18/976ac19891132368aec1c836463651f8.jpeg" alt="Typora 安装目录"></p><h4 id="4-以管理员身份运行-CMD"><a href="#4-以管理员身份运行-CMD" class="headerlink" title="4. 以管理员身份运行 CMD"></a>4. 以管理员身份运行 CMD</h4><p>点击 Windows 键或在系统搜索框搜索 <code>CMD</code>（即命令提示符），并以管理员身份运行。<br><img src="https://app.fekepj.com/list-tu/2024/10/18/34779d8e852780d340f33beed5f933c0.jpeg" alt="以管理员身份运行 CMD"></p><h4 id="5-运行工具"><a href="#5-运行工具" class="headerlink" title="5. 运行工具"></a>5. 运行工具</h4><blockquote><p>如果 <a href="https://so.csdn.net/so/search?q=Typora%20%E5%AE%89%E8%A3%85&spm=1001.2101.3001.7020">Typora 安装</a>在 D 盘或其他盘，需要先输入<code>D:</code>跳转到对应盘符，再输入以下内容：</p></blockquote><p>（1）输入 &#x3D;&#x3D;cd C:\Program Files\Typora&#x3D;&#x3D; 按回车，跳转到 Typora 安装路径。<br>（2）输入 &#x3D;&#x3D;node_inject.exe&#x3D;&#x3D; 按回车，等待提示“**done!**”。<br>（3）输入 &#x3D;&#x3D;license-gen.exe&#x3D;&#x3D; 按回车，等待显示序列号。<br><img src="https://app.fekepj.com/list-tu/2024/10/18/4f75d5aac3291b733596e8690a414aab.jpeg" alt="在 CMD 中切换路径"><br><img src="https://app.fekepj.com/list-tu/2024/10/18/ec5adf213b2fc7020ccbd5c9c2817262.jpeg" alt="在 CMD 中运行工具"></p><h4 id="6-输入序列号"><a href="#6-输入序列号" class="headerlink" title="6. 输入序列号"></a>6. 输入序列号</h4><p>启动 Typora，随意输入邮箱地址，并将生成的序列号粘贴到激活窗口中，点击按钮。<br><img src="https://app.fekepj.com/list-tu/2024/10/18/5d49bde12f5f7a32f78c794ab86a983a.jpeg" alt="输入序列号"></p><h4 id="7-错误处理"><a href="#7-错误处理" class="headerlink" title="7. 错误处理"></a>7. 错误处理</h4><p>稍等数秒后，若因网络原因出现错误提示，点击确认即可，无需担心。<br><img src="https://app.fekepj.com/list-tu/2024/10/18/b4834e78fb57125b5850657db2833bf8.jpeg" alt="错误提示"></p><h4 id="8-安装完成"><a href="#8-安装完成" class="headerlink" title="8. 安装完成"></a>8. 安装完成</h4><p>安装完成后请勿更新 Typora，否则可能失效。如果需要更新，请先彻底卸载旧版本，再重新安装新版本。<br><img src="https://app.fekepj.com/list-tu/2024/10/18/ad035baad6f630f506c4e7894f4fb5b2.jpeg" alt="安装完成"></p><h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>通过上述步骤，您可以免费安装并使用 <strong>Typora</strong>，使其成为您日常工作中不可或缺的 Markdown 编辑器。其简洁高效的功能和友好的用户界面，将极大提升您的写作、编程和文档处理效率。如果您觉得本教程对您有帮助，请留下好评，您的支持是我持续分享有用资源的动力！感谢阅读，祝您使用愉快！</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notepad++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>财富与成功的智慧-真正有钱后你会明白</title>
    <link href="/2024/10/18/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E8%B4%A2%E5%AF%8C%E4%B8%8E%E6%88%90%E5%8A%9F%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    <url>/2024/10/18/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E8%B4%A2%E5%AF%8C%E4%B8%8E%E6%88%90%E5%8A%9F%E7%9A%84%E6%99%BA%E6%85%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="真正有钱后你会明白"><a href="#真正有钱后你会明白" class="headerlink" title="真正有钱后你会明白"></a><strong>真正有钱后你会明白</strong></h1><ol><li><p>一个人，挣大钱往往就是三五年的时间，有就有，没有就没有了。</p></li><li><p>登天难，求人更难；黄连苦，贫穷更苦。</p></li><li><p>没有赚钱的能力，其他能力再好也没用。</p></li><li><p>当你知道自己50万买的房子，住了十年，500万卖给别人时，你突然意识到：财富跟勤劳劳无关。</p></li><li><p>你必须在风调雨顺的三五年里，攒下你未来十年的生活费。然后在生意的顶峰把生意转手，在接下来的日子里喝茶、考察、摸索下一个机会，寻找下个风口。</p></li><li><p>上流社会，多半是下流之人；下流社会，多半是清高之人。</p></li><li><p>只有愿意为你花钱的人，才是真正支持你的人；真心帮你的，不会多废话。</p></li><li><p>通过走关系办成的事，烂在肚子里都不要说。</p></li><li><p>千万别死守不放，不然往往就是把三年盈利原封不动亏回去，最后负债累累。</p></li><li><p>赚过钱的人，从不相信人品，只相信人性。</p></li><li><p>100百块钱都要借的人，不要联系。</p></li><li><p>说点好话可以搞定50%的人，送点东西可以搞定70%的人；说恰如其分的话，再送点别人喜欢的东西，可以搞定90%的人。</p></li><li><p>永远不要让身边的任何人知道你靠什么赚钱，也不要让他们知道你赚了多少钱。</p></li><li><p>穷人唯一的筹码就是时间。如果你想改变现状，想逆袭翻盘，必须取消一切的娱乐。</p></li><li><p>没有被动收入，你将工作到80岁。</p></li><li><p>许多人抱着一种非常愚蠢的想法，认为开一家店或公司希望能经营一辈子，养活自己一生。然而，现实却是残酷的。</p></li><li><p>条件允许，一定要雇个保姆，富人都明白这个秘密。</p></li><li><p>找一个好妻子，比挣100万还要重要。</p></li><li><p>闷声，才能发大财。</p></li><li><p>原则上可以，其实就是不可以。</p></li><li><p>跟着苍蝇找厕所，跟着蜜蜂找花朵。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>生活与日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>人生</tag>
      
      <tag>感语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸿蒙3.0完美安装谷歌GMS框架教程-华为通用</title>
    <link href="/2024/10/18/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/%E9%B8%BF%E8%92%993-0%E5%AE%8C%E7%BE%8E%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8CGMS%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%8D%8E%E4%B8%BA%E9%80%9A%E7%94%A8/"/>
    <url>/2024/10/18/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/%E9%B8%BF%E8%92%993-0%E5%AE%8C%E7%BE%8E%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8CGMS%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B-%E5%8D%8E%E4%B8%BA%E9%80%9A%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>【教程】鸿蒙3.0完美安装谷歌GMS框架教程-华为通用</p><p>【文件下载】</p><p>谷歌云盘地址:两个压缩文件都下吧，那个60M左右的mobule6.zip这个文件听理论上用不到，或者只用里面的Huawei这个备份文件夹即可！我就是用这个</p><p><a href="https://drive.google.com/file/d/1-12H7ChRazhODWE01pNoLJSKvpXhMqZ-/view?usp=sharing">https://drive.google.com/file/d/1-12H7ChRazhODWE01pNoLJSKvpXhMqZ-/view?usp=sharing</a></p><p><a href="https://drive.google.com/file/d/1-2CPv94nQaDtKq00r8Q3E3RTjRcro3Y1/view?usp=sharing">https://drive.google.com/file/d/1-2CPv94nQaDtKq00r8Q3E3RTjRcro3Y1/view?usp=sharing</a></p><p>如果你没有能办访问谷歌，你装了也没用！呵呵</p><p><img src="https://app.fekepj.com/list-tu/2024/10/18/799851bd635f108c6104bfd3304adac5.jpg" alt="img"></p><p>【教程声明】</p><p>本教程采用的是恢复官方备份文件的方式进行软件安装，不涉及系统破解，请审核老师仔细辨别。</p><p>米OV等国产手机品牌的安卓系统，都已内置谷歌GMS基础框架，并不违反我国现行政策。</p><p>本教程旨在帮助有出国工作、留学等应用需求的鸿蒙系统用户，安装谷歌GMS基础框架，不涉及VPN等非法网络服务。</p><p>【安装说明】</p><p>鸿蒙3.0系统的手机上安装谷歌GMS框架的保姆级教程：</p><p>其实这方法通用安卓系统和鸿蒙3.0系统</p><p>我装了两部手机，一部是华为畅享10P（[Android10系统）</p><p>还有一部是nova 7 SE 5G(鸿蒙3.0系统)</p><p>都是用这个方法！</p><p>听说系统升级到鸿蒙4.0以后，依然可以正常完美使用。理论上华为Mate50、P50、Mate40等鸿蒙3.0的机型都可以支持。</p><p>安装过程需要用到电脑和数据线，需要提前上面的A压缩包和mobule6.zip压缩包！</p><p><a href="https://drive.google.com/file/d/1-12H7ChRazhODWE01pNoLJSKvpXhMqZ-/view?usp=sharing">A.zip</a> (144M) 文件</p><p> <a href="https://drive.google.com/file/d/1-2CPv94nQaDtKq00r8Q3E3RTjRcro3Y1/view?usp=sharing">mobile6.zip</a> (67M) 文件</p><p><strong>配套视频教程</strong>：<a href="https://weibo.cn/sinaurl?u=https://www.ixigua.com/i7153543436447154701/">【教程】鸿蒙3.0 完美安装谷歌GMS框架教程！华为Mate50等适用</a></p><p>【安装步骤】</p><p>安装分为四步，请大家参照视频教程，依次对照执行。</p><p><img src="https://app.fekepj.com/list-tu/2024/10/18/9e9990f1e6c7104f0ae2a805b3bc5b33.jpg" alt="img"></p><p><strong>第一步：手机环境设置；</strong><br> 首先需要确保系统里全部谷歌相关应用都已经清除干净，包括谷歌服务助手、Google Play服务、Play商店、服务框架、通讯录同步、账户管理程序等等。在应用管理界面卸载的时候，记得要点击右上角的“显示系统应用”，这样才能显示全部已安装应用。之前没安装过谷歌框架的可以忽略。</p><p>关闭所有“应用分身”和”隐私空间”功能，全部安装好之后可以再打开。</p><p>然后执行下列步骤：</p><p>1、进入“关于手机”，连续点击“软件版本”，开启“开发人员选项”；</p><p>2、进入“设置”，“系统和更新”，点击“纯净模式”，关闭“增强保护“，（这里等到全部安装完以后可以重新打开）。然后返回。</p><p>3、进入开发人员选项，打开“USB调试“，下面的“连接USB时总是弹出提示”也选上，关闭“监控ADB安装应用”。</p><p>4、进入“设置”，“应用和服务”，“应用管理”，搜索“备份”app。点击右上角四个点，选择“显示系统程序”，点击“备份”应用，进入“权限”，把“备份”应用的全部权限都打开。</p><p><strong>第二步：电脑连接手机操作；</strong></p><p>1、电脑端先安装华为手机助手PC端应用，主要是为了安装ADB驱动。然后用数据线连接手机，USB连接方式，选择“传输文件”。</p><p>2、把下载好的ADB文件包解压缩，双击执行“CMD.exe”，打开命令行窗口。</p><p>3、双击打开“ADB命令.txt” 文件。</p><p>复制第一行命令，到命令行窗口运行，检查手机连接。如果是第一次连接，手机屏幕上会提示“是否允许USB调试”，选择“始终允许”，然后确定。</p><p>复制“卸载备份”命令，到命令行窗口运行。</p><p>然后将 oldbackup.apk 这个文件，复制到C盘根目录。</p><p>复制“安装备份”命令，到命令行窗口运行。这里英文提示“Faillure”没有关系。</p><p>4、把下载的A.zip文件，解压缩到“A”目录，然后把整个目录复制到手机根目录。</p><p><strong>第三步：在手机上恢复备份文件；</strong></p><p>（如果用 <a href="https://drive.google.com/file/d/1-2CPv94nQaDtKq00r8Q3E3RTjRcro3Y1/view?usp=sharing">mobile6.zip</a> (67M) 文件解压出来的是在手机上恢复）</p><p>1、在手机上打开“文件管理”app，点击“我的手机”，进入刚才复制好的“A”目录，长按“Huawei.zip”，右下角点击”更多“，选择”解压至“，选择”自定义存储位置“，点”修改“，点击最上面”我的手机”，确定，再确定，这个时候备份文件会自动释放到备份目录。</p><p>2、进入“设置”，“系统和更新‘，”日期和时间“，把“自动设置”关闭，把日期改为“2019年”随便哪一天。然后返回。</p><p>3、进入“备份和恢复“，点击右上角四个点，选择”从内部存储恢复“，点进2019年12月7日这个备份文件，”应用及数据“前面打钩，点恢复，按照提示输入密码，（密码是 a12345678)，点确定，等待恢复完成。</p><p>（如果找不到”从内部存储恢复“，是因为前面备份程序没有正常授权，只要点一下“外部存储”，点击授权，然后就有了）</p><p>4、回到手机桌面，找到“谷歌服务助手”，点开运行，会提示有7项权限需要允许（注意，如果这里只显示4项，说明有问题，请检查之前的步骤），然后点“激活”，允许。后面不要点“开始下载”，直接回到桌面就可以了。</p><p>5、进入“设置”，“系统和更新‘，”日期和时间“，把“自动设置”打开。</p><p><strong>第四步：安装谷歌GMS基础框架；</strong>（注意，以下步骤需要你的手机网络可以访问谷歌）</p><p>1、打开“文件管理”，找到“A”目录，点进去。</p><p>安装 0.apk。装好以后，点“打开”，点”Account”，点右下角“Sign in”。这里大概率会出错弹出，可以重新点一下“Account”，点“Sign in”，然后在弹出的谷歌登陆界面登陆你的谷歌账号。注意，如果你有多个谷歌账号需要使用，都要在这里点击“Account”，分别登陆一次。等  后面全部装好以后，就不能再添加新的谷歌账号了。添加好账号，在系统“设置”，“用户和账户”，会出现一个“Google”，点进去就可以看到你的账号。</p><p>2、下一步，按照顺序安装 1.apk, 3.apk，4.apk。回到桌面，卸载microG。</p><p>3、再安装一遍 2.apk。回到桌面，什么都不用操作，等待消息栏出现错误通知。这时候建议将手机静音，因为错误通知会不停地提示。</p><p>如果看到错误通知，返回桌面，打开play商店。这时候商店应该是可以访问的，如果白屏也没关系。</p><p>4、继续下一步，进入“设置”，“应用和服务”，“应用管理”，搜索google，点击右上角“显示系统程序”。</p><p>Google Play商店，点进去，强行停止。返回。</p><p>Google 账户管理程序，点进去，强行停止，再点“存储”，删除所有数据。返回。</p><p>Goolge 服务框架，点进去，强行停止，再点“存储”，删除所有数据，清空缓存。这里要多操作几次，一直到显示缓存是0B。</p><p>然后重启手机。</p><p>5、打开“文件管理”，进入A文件夹，再安装一遍 2.apk。安装完毕之后，再次重启手机。</p><p>6、重启以后，打开Play商店，这时候应该可以正常显示，通知栏也没有错误提示了。</p><p>进入“设置”，“应用和服务“，”应用管理“，搜索“google”。</p><p>Google Play服务，点进去，点击存储，清空缓存。然后点击“管理空间”，清除所有数据。返回到’应用信息“界面，点击“强行停止”，如果没有停止，再点一次。然后点击“卸载”。</p><p>7、打开“文件管理”，进入A目录，安装 5.apk。</p><p>到此，所有安装完成。重启手机，谷歌GMS框架就安装好了。</p><p>这里有个永久关闭升级，<a href="https://lifu.us.kg/2024/10/17/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0-%E6%B0%B8%E4%B9%85%E7%89%88/">可以参考如何关闭安卓系统更新-永久版 </a></p><p><img src="https://app.fekepj.com/list-tu/2024/10/18/30c98dfbb024127d3dc5f0c3b8409adf.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>手机使用日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>谷歌安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS苹果节点订阅使用教程！</title>
    <link href="/2024/10/17/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/iOS%E8%8B%B9%E6%9E%9C%E8%8A%82%E7%82%B9%E8%AE%A2%E9%98%85%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/10/17/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/iOS%E8%8B%B9%E6%9E%9C%E8%8A%82%E7%82%B9%E8%AE%A2%E9%98%85%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-1-iOS苹果-节点订阅使用教程"><a href="#1-1-iOS苹果-节点订阅使用教程" class="headerlink" title="1.1 iOS苹果 节点订阅使用教程"></a>1.1 iOS苹果 节点订阅使用教程</h1><p>shadowrocketHelp edited this page on Jul 6 · <a href="https://github.com/shadowrocketHelp/help/wiki/1.1-iOS%E8%8B%B9%E6%9E%9C-%E8%8A%82%E7%82%B9%E8%AE%A2%E9%98%85%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/_history">5 revisions</a></p><p><img src="https://raw.githubusercontent.com/shadowrocketHelp/help/master/ssrHelp/img/ios/ios0.png" alt="img"></p><h2 id="1-1-iOS苹果-节点订阅使用教程-1"><a href="#1-1-iOS苹果-节点订阅使用教程-1" class="headerlink" title="1.1 iOS苹果 节点订阅使用教程"></a>1.1 iOS苹果 节点订阅使用教程</h2><h5 id="以下是-shadowrocket-订阅SSR节点教程，必须严格按照教程操作！最后面也有图文教程"><a href="#以下是-shadowrocket-订阅SSR节点教程，必须严格按照教程操作！最后面也有图文教程" class="headerlink" title="以下是 shadowrocket 订阅SSR节点教程，必须严格按照教程操作！最后面也有图文教程"></a>以下是 <code>shadowrocket</code> 订阅SSR节点教程，<a href="https://github.com/shadowrocketHelp/help/wiki/1.1-iOS%E8%8B%B9%E6%9E%9C-%E8%8A%82%E7%82%B9%E8%AE%A2%E9%98%85%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B#">必须严格按照教程操作！最后面也有图文教程</a></h5><hr><p><img src="https://raw.githubusercontent.com/shadowrocketHelp/help/master/ssrHelp/img/ios/ios1.png" alt="img"></p><h3 id="shadowrocket-下载教程"><a href="#shadowrocket-下载教程" class="headerlink" title="shadowrocket 下载教程"></a>shadowrocket 下载教程</h3><ol><li>打开iPhone&#x2F;iPad的蓝色 <code>AppStore</code> 软件（请不要打开设置）</li><li>右上角点击 <code>个人头像</code> 进入账户，下拉到最底找到并点击 <code>退出登录</code></li><li>登录 <a href="https://id.chat444.com/">美区AppleID共享账户</a> 和密码（自备账号也行，要求已经购买过了2.99美元的shadowrocket ）</li><li>点击登录，提示 <code>Apple id安全</code> ，请点击 <code>其他选项-不升级</code></li><li>搜索 <code>shadowrocket</code> 下载，或者其他你想下载的软件</li><li>用完务必 <code>退出登录</code> ，避免你的手机被锁</li></ol><hr><h3 id="shadowrocket-使用教程"><a href="#shadowrocket-使用教程" class="headerlink" title="shadowrocket 使用教程"></a>shadowrocket 使用教程</h3><ol><li>提前复制 <code>订阅地址</code> <a href="https://shadowrocket-app.gitbook.io/shadowrocket/all/buy">注册获取订阅地址</a></li><li>打开 <code>shadowrocket</code> 软件，低下有4栏：<code>首页 配置 数据 设置</code></li><li>shadowrocket软件 <code>首页</code></li><li><ul><li>-&gt; 右上角 <code>+</code>（进入添加节点页面）</li></ul></li><li><ul><li>-&gt; 类型 选 <code>Subscribe</code></li></ul></li><li><ul><li>-&gt; URL 粘贴 <code>订阅地址</code></li></ul></li><li><ul><li>-&gt; 点击右上角 <code>完成</code> 保存回到首页</li></ul></li><li>点击底下4栏中的 <code>设置</code> -&gt; <code>服务器订阅</code> -&gt; 打开 <code>打开时更新</code> 开关</li><li>完全杀掉退出 <code>shadowrocket</code> 软件，再重新打开，在首页 会自动更新订阅，（若没有更新，就手动点击一下服务器节点一栏） 此时你会看到节点，选择你心仪的节点，打开最上面的 <code>未连接</code> 开关(首次打开会弹窗提示安装vpn，请点击 <code>Allow/同意</code> 输入<code>手机解锁密码</code>），即可使用。</li></ol><hr><h3 id="shadowrocket-常见问题"><a href="#shadowrocket-常见问题" class="headerlink" title="shadowrocket 常见问题"></a>shadowrocket 常见问题</h3><ol><li>shadowrocket <code>在苹果商店无法更新</code>? 只能卸载重新安装，因为更新是要输入上次下载软件使用的Apple ID账号。</li><li>shadowrocket <code>全局路由</code>选什么？默认选配置就行，基本满足99%用途。</li><li>shadowrocket 更新订阅提示 <code>发生SSL错误</code>? 先尝试切换<code>4G/wifi</code>网络都试一下，若还是不行，一般是订阅地址被污染所致，请你复制订阅地址到浏览器看看是否能打开，若能打开出现一串英文字母证明订阅地址可以连接，打不开就是订阅地址域名被污染了，只有联系订阅地址发行方更换其他订阅地址。</li></ol><hr><p><img src="https://raw.githubusercontent.com/shadowrocketHelp/help/master/ssrHelp/img/ios/ios2.png" alt="img"></p><h4 id="Shadowrocket-详细下载图文教程-请新手尽量严格按照流程操作"><a href="#Shadowrocket-详细下载图文教程-请新手尽量严格按照流程操作" class="headerlink" title="Shadowrocket 详细下载图文教程 请新手尽量严格按照流程操作"></a>Shadowrocket 详细下载图文教程 请新手尽量严格按照流程操作</h4><p><img src="https://raw.githubusercontent.com/shadowrocketHelp/help/master/ssrHelp/img/ios/ios3.png" alt="img"></p><h4 id="Shadowrocket-详细使用图文教程-请新手尽量严格按照流程操作"><a href="#Shadowrocket-详细使用图文教程-请新手尽量严格按照流程操作" class="headerlink" title="Shadowrocket 详细使用图文教程 请新手尽量严格按照流程操作"></a>Shadowrocket 详细使用图文教程 请新手尽量严格按照流程操作</h4><p><img src="https://raw.githubusercontent.com/shadowrocketHelp/help/master/ssrHelp/img/ios/ios4.png" alt="img"></p><hr><h3 id="shadowrocket-一些高级用法"><a href="#shadowrocket-一些高级用法" class="headerlink" title="shadowrocket 一些高级用法"></a>shadowrocket 一些高级用法</h3><h4 id="关于首页的-全局路由-是什么意思？"><a href="#关于首页的-全局路由-是什么意思？" class="headerlink" title="关于首页的 全局路由 是什么意思？"></a>关于首页的 全局路由 是什么意思？</h4><ul><li><p><code>配置</code>为配置文件代理（即按照规则自动分流）</p></li><li><p><code>代理</code>为全局代理（即所有连接均通过代理）</p></li><li><p><code>直连</code>为绕过代理（即所有连接均不通过代理）</p></li><li><pre><code class="hljs">场景</code></pre><p>适用于不同网络环境下自动切换代理模式</p><ul><li>因此得出总结，一般初级用户看不懂或者不会使用，务必选择 <code>配置</code> 模式</li></ul></li></ul><h4 id="什么是更新订阅？如何更新订阅，可否设置自动更新？"><a href="#什么是更新订阅？如何更新订阅，可否设置自动更新？" class="headerlink" title="什么是更新订阅？如何更新订阅，可否设置自动更新？"></a>什么是更新订阅？如何更新订阅，可否设置自动更新？</h4><ul><li>更新订阅就是重新从订阅地址获取最新可以使用的节点。</li><li>软件首页，有一个 更新 图标按钮（双箭头包围成环形形状），点击即可更新。</li><li>设置自动更新订阅直接去设置 -&gt; 服务器订阅 -&gt; 打开 打开时更新 开关 和 自动后台更新 开关 即可。</li></ul><h4 id="如何查看我的订阅套餐，剩余时长，以及流量？"><a href="#如何查看我的订阅套餐，剩余时长，以及流量？" class="headerlink" title="如何查看我的订阅套餐，剩余时长，以及流量？"></a>如何查看我的订阅套餐，剩余时长，以及流量？</h4><ul><li>软件首页 订阅一栏有小字，如下图。</li></ul><p><img src="https://raw.githubusercontent.com/shadowrocketHelp/help/master/ssrHelp/img/ios/ios5.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>手机使用日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>节点订阅</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何关闭安卓系统更新-永久版</title>
    <link href="/2024/10/17/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0-%E6%B0%B8%E4%B9%85%E7%89%88/"/>
    <url>/2024/10/17/%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%97%A5%E5%B8%B8/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0-%E6%B0%B8%E4%B9%85%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="如何关闭安卓（华为-荣耀）系统更新-永久版"><a href="#如何关闭安卓（华为-荣耀）系统更新-永久版" class="headerlink" title="如何关闭安卓（华为&#x2F;荣耀）系统更新-永久版"></a>如何关闭安卓（华为&#x2F;荣耀）系统更新-永久版</h1><p>华为的鸿蒙系统，总是能够及时的自动下载安装包，甚至在接听电话的时候还能够弹出更新窗口，极大的增加了使用负担，网上寻找资料后终于找到了对应的解决办法。</p><p>按照以下三步可成功解决。</p><p><strong>01-去除更新安装包和红点提示</strong></p><p>按照以下流程操作- “关闭wifi和数据”-“设置”-“系统跟新”-“存储”-“删除数据”</p><p><img src="https://app.fekepj.com/list-tu/2024/10/17/21fe2d62628479bd186555069c97e877.webp" alt="img"></p><p><strong>02-打开手机调试模式</strong></p><p>“设置”-“系统”-“关于手机”-连续点击7次“版本号”-返回上一步打开“开发人员选项”-“关闭自动更新”-“打开USB调试”-“仅充电模式下允许ADB调试”</p><p><img src="https://app.fekepj.com/list-tu/2024/10/17/9f11d3b6cf27c747e978032e08a31377.webp" alt="img"></p><p><strong>03-用电脑ADB关闭手机系统更新</strong></p><p>①“下载驱动”链接：百度网盘：<br>链接：<a href="https://pan.baidu.com/s/1lNexVa4_Ug9bzViAvanZQA?pwd=2r5u">https://pan.baidu.com/s/1lNexVa4_Ug9bzViAvanZQA?pwd=2r5u</a><br>提取码：2r5u</p><p>②安装Handset + WinDriver驱动</p><p>③将adb文件夹放在C盘根目录下-右键-在终端打开-输入以下命令</p><p>输入命令</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ns866emfcwb3cm"></i><span>CRMSH</span><div class="collapse show" id="collapse-ns866emfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">adb shell pm disable-<span class="hljs-keyword">user</span> <span class="hljs-title">com</span>.huawei.android.hwouc<br></code></pre></td></tr></table></div></figure><p>停用系统更新。</p><hr><h2 id="输入命令这是重新打开系统更新"><a href="#输入命令这是重新打开系统更新" class="headerlink" title="输入命令这是重新打开系统更新"></a>输入命令<br><figure class="highlight dockerfile"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7uenusmfcwb3cm"></i><span>DOCKERFILE</span><div class="collapse show" id="collapse-7uenusmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> pm <span class="hljs-built_in">enable</span> com.huawei.android.hwouc</span><br></code></pre></td></tr></table></div></figure><br>这是重新打开系统更新</h2><p>荣耀手机输入</p><p>.\adb shell pm disable-user package:com.hihonor.ouc<br>.\adb shell pm disable-user com.hihonor.ouc<br>这两个可以都试试。</p><p><img src="https://app.fekepj.com/list-tu/2024/10/17/3d16e57d92b58148ff887107b00536b3.webp" alt="img"></p><p><img src="https://picx.zhimg.com/80/v2-b80b3275098f35340e74bb7eae62f1f5_720w.webp" alt="img"></p><p>④验证成功，打开设置-系统更新-软件更新-你会发现点不进去了，再也不会提示更新系统。</p><p>还是有人出现各种问题，这次更新特意买了新手机，重新给你们演示一遍。</p><p>补充：①、关于新华为，荣耀，连不上adb 的。是因为厂商精通了。看看自己的配置对不对。</p><p><img src="https://app.fekepj.com/list-tu/2024/10/17/f70d47103f659a18984d876bfbf0a4e7.webp" alt="img"></p><p>USB配置选以太网</p><p><img src="https://app.fekepj.com/list-tu/2024/10/17/d020cd99fb5eeed22cf7edb576521363.webp" alt="img"></p><p>HDB打开。还有一个“仅充电”模式下允许使用ADB打开。</p><p>多等一会，要有耐心，不要让手机黑屏了。</p><p><img src="https://app.fekepj.com/list-tu/2024/10/17/756f3f569e3469291edde7dbe5b17ecd.webp" alt="img"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/17/5402000561e2d5f31922de978534639d.webp" alt="img"></p><p>电脑驱动有问题，去官网找<a href="https://link.zhihu.com/?target=https://www.hihonor.com/cn/support/content/zh-cn15808494/">无法连接手机助理或连接不稳定</a></p>]]></content>
    
    
    <categories>
      
      <category>手机使用日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>华为手机更新</tag>
      
      <tag>关闭手机更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10定时关机怎么设置-3种方法</title>
    <link href="/2024/10/14/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Win10%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA%E6%80%8E%E4%B9%88%E8%AE%BE%E7%BD%AE-3%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2024/10/14/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/Win10%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA%E6%80%8E%E4%B9%88%E8%AE%BE%E7%BD%AE-3%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Win10定时关机怎么设置？（3种方法）"><a href="#Win10定时关机怎么设置？（3种方法）" class="headerlink" title="Win10定时关机怎么设置？（3种方法）"></a>Win10定时关机怎么设置？（3种方法）</h1><p>在这篇文章中将为大家介绍Win10定时关机怎么设置，并且提供详细的图文教程。</p><h2 id="Win10怎么设置定时关机？"><a href="#Win10怎么设置定时关机？" class="headerlink" title="Win10怎么设置定时关机？"></a>Win10怎么设置定时关机？</h2><p>在我们的日常生活中，有时需要设置电脑定时关机。那么，如何设置电脑定时关机呢？特别是在Windows 10系统中，<strong>Win10怎么设置定时关机</strong>呢？接下来，我将以Windows 10系统为例，向大家演示Win10定时关机怎么设置。值得注意的是，其他版本的Windows系统设置方法也是相同的哦！</p><h3 id="方法1-设置倒计时关机"><a href="#方法1-设置倒计时关机" class="headerlink" title="方法1.设置倒计时关机"></a>方法1.设置倒计时关机</h3><p><strong>Win10如何设置定时关机</strong>？您可以在运行窗口中使用<strong>Shutdown</strong>命令定时设置电脑倒计时关机。以下是设置电脑倒计时关机的步骤：</p><p><strong>步骤1.</strong> 按下键盘上的快捷键Windows + R，打开运行窗口，或者右击桌面左下角的<strong>“开始”</strong>按钮，选择<strong>“运行”</strong>。</p><p>[<img src="https://app.fekepj.com/list-tu/2024/10/14/04ca431278618a37096cb533a87b9caf.png" alt="开始菜单">]</p><p><strong>步骤2.</strong> 在运行窗口的输入栏中，输入命令<strong>“Shutdown -s -t 3600”</strong>，再点击<strong>“确定”</strong>即可完成设置。</p><p>[<img src="https://app.fekepj.com/list-tu/2024/10/14/e57c82d723da54be3850578b06cf3145.png" alt="win10定时关机怎么设置">]</p><p><strong>提示：</strong>这里的“-s”表示关闭计算机，“-t 3600”表示在1小时后关闭电脑。</p><h3 id="方法2-固定时间关机"><a href="#方法2-固定时间关机" class="headerlink" title="方法2.固定时间关机"></a>方法2.固定时间关机</h3><p>上面介绍了Win10定时关机怎么设置，除了可以使用<strong>Shutdown + 时间</strong>倒计时关闭电脑外，我们还可以在<strong>固定的时间关闭电脑</strong>。要设定固定时间进行关机，比如晚上11点关机，您可以在运行窗口的输入框中输入命令<strong>“at 23:00 Shutdown -s”</strong>，然后点击<strong>“确定”</strong>即可。</p><p>[<img src="https://app.fekepj.com/list-tu/2024/10/14/1af194440ba26cb00ccaad99befcfae2.png" alt="固定时间关机">]</p><p>当使用Shutdown命令定时关机后，<strong>Win10定时关机怎么取消设置？</strong>取消Win10定时关机的设置很简单，只需在运行窗口中输入命令<strong>“Shutdown -a”</strong>，然后点击<strong>“确定”</strong>即可取消自动关机的命令。</p><p>[<img src="https://app.fekepj.com/list-tu/2024/10/14/afbf675ac9093794388ce18dcdb5ea94.png" alt="Win10定时关机怎么取消设置">]</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win10</tag>
      
      <tag>定时关机</tag>
      
      <tag>Win10定时关机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在一台全新的电脑上拉取远程仓库到本地全局装hexo并续写博客</title>
    <link href="/2024/10/12/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E5%9C%A8%E4%B8%80%E5%8F%B0%E5%85%A8%E6%96%B0%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%8A%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%85%A8%E5%B1%80%E8%A3%85hexo%E5%B9%B6%E7%BB%AD%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/10/12/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E5%9C%A8%E4%B8%80%E5%8F%B0%E5%85%A8%E6%96%B0%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%8A%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%85%A8%E5%B1%80%E8%A3%85hexo%E5%B9%B6%E7%BB%AD%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="在一台全新的电脑上拉取远程仓库到本地全局装hexo并续写博客"><a href="#在一台全新的电脑上拉取远程仓库到本地全局装hexo并续写博客" class="headerlink" title="在一台全新的电脑上拉取远程仓库到本地全局装hexo并续写博客"></a>在一台全新的电脑上拉取远程仓库到本地全局装hexo并续写博客</h1><h2 id="首先hexo要装的软件有："><a href="#首先hexo要装的软件有：" class="headerlink" title="首先hexo要装的软件有："></a>首先hexo要装的软件有：</h2><p>1.Windows：<a href="https://git-scm.com/download/win">下载并安装 git</a><br>2.安装 Node.js     <a href="https://nodejs.org/zh-cn/download/">官方的 安装程序</a></p><h2 id="全局安装-Hexo-可以任意路径下安装"><a href="#全局安装-Hexo-可以任意路径下安装" class="headerlink" title="全局安装 Hexo(可以任意路径下安装)"></a>全局安装 Hexo(可以任意路径下安装)</h2><h2 id="上面两个应用程序安装完成后，即可使用-npm-安装-Hexo。"><a href="#上面两个应用程序安装完成后，即可使用-npm-安装-Hexo。" class="headerlink" title="上面两个应用程序安装完成后，即可使用 npm 安装 Hexo。"></a>上面两个应用程序安装完成后，即可使用 npm 安装 Hexo。<br><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-14ua1ymfcwb3ct"></i><span>AVRASM</span><div class="collapse show" id="collapse-14ua1ymfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></div></figure></h2><p>如果这时候你没有旧的博客续写，你用下面方式即可新建一个！</p><figure class="highlight axapta"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-72xcjjmfcwb3ct"></i><span>AXAPTA</span><div class="collapse show" id="collapse-72xcjjmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#这是初始化一个仓库文件夹名为wdbk</span><br>hexo init wdbk <br><span class="hljs-meta">#进入文件夹</span><br>cd wdbk<br><span class="hljs-meta">#安装依赖</span><br>npm install<br><span class="hljs-meta">#这个直接生成并在本地网页4000端口即可打开</span><br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></div></figure><h2 id="这次只要写的是续写旧博客"><a href="#这次只要写的是续写旧博客" class="headerlink" title="这次只要写的是续写旧博客"></a>这次只要写的是续写旧博客</h2><ul><li>首先拉取原来备份在github仓库的文件到本地</li><li>生成 key</li><li>添加私钥到github网站上</li><li>克隆仓库到本地<br>这里说的是一个帐号在一个电脑上的操作，<a href="2024/09/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E4%B8%A4%E4%B8%AAgit%E5%B8%90%E5%8F%B7%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81">如果要两个帐号可以参考这一文章</a></li></ul><h2 id="github仓库设置"><a href="#github仓库设置" class="headerlink" title="github仓库设置"></a>github仓库设置</h2><p>例如我的github帐号是<code> lifuaini2019@gmail.com</code></p><ul><li>在电脑的C:\Users\Administrator.ssh文件夹下打开git软件执行下面代码<figure class="highlight angelscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-do0a1wmfcwb3ct"></i><span>ANGELSCRIPT</span><div class="collapse show" id="collapse-do0a1wmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh-keygen -t rsa -C <span class="hljs-symbol">lifuaini2019@</span>gmail.com<br></code></pre></td></tr></table></div></figure>一路确认即可完成</li><li>打开当前目录下的C:\Users\Administrator.ssh\id_rsa.pub文件</li></ul><p>复制里面的代码到</p><p><img src="https://app.fekepj.com/list-tu/2024/10/12/0f71105a6a46cd267f3bf5c5713e9cfb.png" alt="屏幕截图 2024-10-12 141200"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/12/c714431e476fb4332607a3e7227917ab.png" alt="屏幕截图 2024-10-12 141250"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/12/bab816dc6831b9ec6ce177c1aeff27b0.png" alt="屏幕截图 2024-10-12 141316"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/12/7c3e242dc2154758aaee64d729d9b531.png" alt="屏幕截图 2024-10-12 141407"></p><p><img src="https://app.fekepj.com/list-tu/2024/10/12/2a0271c544e7653272027b0820c9e960.png" alt="屏幕截图 2024-10-12 141455"></p><h2 id="clone远程仓库到本地"><a href="#clone远程仓库到本地" class="headerlink" title="clone远程仓库到本地"></a>clone远程仓库到本地</h2><p>例如我的是</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jcp6k1mfcwb3ct"></i><span>CRMSH</span><div class="collapse show" id="collapse-jcp6k1mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>上面是克隆默认分支<br>如果 要指定分支的可以用下面方法</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5roi4gmfcwb3ct"></i><span>CRMSH</span><div class="collapse show" id="collapse-5roi4gmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>上面这个方法是克隆befe分支到本地</p><p>或者你用第一个方法克隆后，再用下面切换分支应该也是可以的</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jzeflsmfcwb3ct"></i><span>EBNF</span><div class="collapse show" id="collapse-jzeflsmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout befe</span><br></code></pre></td></tr></table></div></figure><h2 id="下载到本地后进入文件夹例如我的：2024bk"><a href="#下载到本地后进入文件夹例如我的：2024bk" class="headerlink" title="下载到本地后进入文件夹例如我的：2024bk"></a>下载到本地后进入文件夹例如我的：2024bk</h2><ul><li>在文件夹内执行安装hexo依赖<figure class="highlight cmake"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8qoq3tmfcwb3ct"></i><span>CMAKE</span><div class="collapse show" id="collapse-8qoq3tmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></div></figure>安装好依赖后文件夹内会出现多一个文件夹名叫：node_modules<br>这时候你就可以在本地执行hexo博客了！！</li></ul><p>如果想省事，可以一键更新并备份推送到远程befe分支<br>在博客根目录新那家一个:XXX.sh文件<br>打开这个文件粘贴下面这代码到里面</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-adpnntmfcwb3ct"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-adpnntmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br>hexo clean<br><br><span class="hljs-comment"># 命令用于生成静态文件，一般可以简写为 hexo g</span><br>hexo generate<br><br><span class="hljs-comment">#hexo server 命令用于启动本地服务器，一般可以简写为 hexo s</span><br><br><span class="hljs-comment">#hexo deploy 命令用于部署网站，一般可以简写为 hexo d</span><br><br>hexo deploy<br><br><span class="hljs-comment">#!/bin/bash     下面为备份到仓库</span><br><span class="hljs-comment"># 获取当前日期，格式为 YYYYMMDD</span><br><span class="hljs-attribute">current_date</span>=$(date +%Y%m%d)<br><br><span class="hljs-comment"># 添加所有变更到暂存区</span><br>git <span class="hljs-built_in">add</span> .<br><br><span class="hljs-comment"># 提交变更，包括当前日期</span><br>git commit -m <span class="hljs-string">&quot;当前文件最新时间是<span class="hljs-variable">$&#123;current_date&#125;</span>_上传&quot;</span><br><br><span class="hljs-comment"># 推送到远程仓库的 befe 分支</span><br>git push origin befe<br><br></code></pre></td></tr></table></div></figure><h2 id="重要提示，在2025年发现在新电脑有一个这样的问是"><a href="#重要提示，在2025年发现在新电脑有一个这样的问是" class="headerlink" title="重要提示，在2025年发现在新电脑有一个这样的问是"></a>重要提示，在2025年发现在新电脑有一个这样的问是</h2><p>最终执行了这四句，在新电脑才能正常续hexo 博客<br>*1</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6ndos0mfcwb3ct"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-6ndos0mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --<span class="hljs-built_in">add</span> safe.directory <span class="hljs-string">&#x27;G:/我的文档/所有博客/李保个人博客/.deploy_git&#x27;</span><br></code></pre></td></tr></table></div></figure><p>*2</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gdvb8gmfcwb3ct"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-gdvb8gmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --<span class="hljs-built_in">add</span> safe.directory <span class="hljs-string">&#x27;G:/我的文档/所有博客/李保个人博客&#x27;</span><br></code></pre></td></tr></table></div></figure><p>*3</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fzjnktmfcwb3ct"></i><span>NGINX</span><div class="collapse show" id="collapse-fzjnktmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> config --global user.email <span class="hljs-string">&quot;lifuaini2019<span class="hljs-variable">@gmail</span>.com&quot;</span><br></code></pre></td></tr></table></div></figure><p>*4</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-j7yq6amfcwb3ct"></i><span>STYLUS</span><div class="collapse show" id="collapse-j7yq6amfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;lifuaini2019&quot;</span><br></code></pre></td></tr></table></div></figure><p>*5遇到不能备份到befe分支时用以下命令</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8i70q7mfcwb3ct"></i><span>EBNF</span><div class="collapse show" id="collapse-8i70q7mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull origin befe</span><br></code></pre></td></tr></table></div></figure><p>用完这个命令再执行推送即可！<br>以后写完博客双击即可自动执行上面这几行代码~~~~<br>有错我再修改！结束</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>hexo博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneDrive无法打开的原因</title>
    <link href="/2024/10/11/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/OneDrive%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <url>/2024/10/11/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/OneDrive%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="OneDrive无法打开的原因"><a href="#OneDrive无法打开的原因" class="headerlink" title="OneDrive无法打开的原因"></a>OneDrive无法打开的原因</h1><p>从<a href="https://link.zhihu.com/?target=https://www.microsoft.com/zh-cn/microsoft-365/onedrive/download">下载 OneDrive - Microsoft OneDrive</a>下载OneDrive并正常安装后，点击OneDrive的快捷方式没有任何反应，无法打开OneDrive，可以尝试下面的方法看是否可行：</p><h2 id="1-同时按Win-R（同时键盘上的Windows图标键和R键），输入gpedit-msc："><a href="#1-同时按Win-R（同时键盘上的Windows图标键和R键），输入gpedit-msc：" class="headerlink" title="1.  同时按Win+R（同时键盘上的Windows图标键和R键），输入gpedit.msc："></a>1.  同时按Win+R（同时键盘上的Windows图标键和R键），输入gpedit.msc：</h2><p><img src="https://app.fekepj.com/list-tu/2024/10/11/e7de7403578fb8941da3d6511367bb5f.webp"></p><h2 id="2-在本地组策略中依次点击：计算机配置-管理模板-Windows组件-OneDrive，双击右侧“禁止使用OneDrive进行文件存储”。"><a href="#2-在本地组策略中依次点击：计算机配置-管理模板-Windows组件-OneDrive，双击右侧“禁止使用OneDrive进行文件存储”。" class="headerlink" title="2.在本地组策略中依次点击：计算机配置-管理模板-Windows组件-OneDrive，双击右侧“禁止使用OneDrive进行文件存储”。"></a>2.在本地组策略中依次点击：计算机配置-管理模板-Windows组件-OneDrive，双击右侧“禁止使用OneDrive进行文件存储”。</h2><p><img src="https://app.fekepj.com/list-tu/2024/10/11/7ee5d9abc4e1772324c382631bb02733.webp"></p><h2 id="3-点击“未配置”或“已禁用”，重启电脑。"><a href="#3-点击“未配置”或“已禁用”，重启电脑。" class="headerlink" title="3.点击“未配置”或“已禁用”，重启电脑。"></a>3.点击“未配置”或“已禁用”，重启电脑。</h2><p><img src="https://app.fekepj.com/list-tu/2024/10/11/ff14aeba4fdf0a3e19d0f32999d59927.webp"></p><h2 id="4-如果上述步骤不行，试试修改注册表：同时按Win-R（同时键盘上的Windows图标键和R键），输入regedit，找到HKEY-LOCAL-MACHINE-Software-Policies-Microsoft-Windows-OneDrive-路径。"><a href="#4-如果上述步骤不行，试试修改注册表：同时按Win-R（同时键盘上的Windows图标键和R键），输入regedit，找到HKEY-LOCAL-MACHINE-Software-Policies-Microsoft-Windows-OneDrive-路径。" class="headerlink" title="4.如果上述步骤不行，试试修改注册表：同时按Win+R（同时键盘上的Windows图标键和R键），输入regedit，找到HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\OneDrive 路径。"></a>4.如果上述步骤不行，试试修改<a href="https://zhida.zhihu.com/search?content_id=164426236&content_type=Article&match_order=1&q=%E6%B3%A8%E5%86%8C%E8%A1%A8&zhida_source=entity">注册表</a>：同时按Win+R（同时键盘上的Windows图标键和R键），输入regedit，找到HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\OneDrive 路径。</h2><p><img src="https://app.fekepj.com/list-tu/2024/10/11/c56d52b720227517d1345090d8776cec.webp"></p><h2 id="5-点开DisableFileSyncNGSC文件并将其值设置成“0”，关闭，重启计算机。"><a href="#5-点开DisableFileSyncNGSC文件并将其值设置成“0”，关闭，重启计算机。" class="headerlink" title="5.点开DisableFileSyncNGSC文件并将其值设置成“0”，关闭，重启计算机。"></a>5.点开DisableFileSyncNGSC文件并将其值设置成“0”，关闭，重启计算机。</h2><p>然后看看OneDrive是否可以启动了。</p><h1 id="最后我用了下面这个方法才能解决"><a href="#最后我用了下面这个方法才能解决" class="headerlink" title="最后我用了下面这个方法才能解决:"></a>最后我用了下面这个方法才能解决:</h1><p>onedrive 无法启动，没有任何反应<br>window10 64+， onedrive无法启动，右下角没有标志，文件管理器中也没有标志，onedrive无法启动，点击没有任何反应<br>点击 C:\Users\username\AppData\Local\Microsoft\OneDrive\OneDrive.exe 没有任何反应（管理员账户）</p><p>卸载重装数次没有作用；</p><p>官方回答</p><p>请您在键盘上点击 【Windows 按键 + R】 ；</p><p>请您在弹出的运行&#x2F; Run视窗输入：</p><figure class="highlight haml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ok9bfkmfcwb3cn"></i><span>HAML</span><div class="collapse show" id="collapse-ok9bfkmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">localappdata</span></span>%\Microsoft\OneDrive\onedrive.exe /reset<br></code></pre></td></tr></table></div></figure><p>然后请点击【OK】；</p><p>此刻OneDrive的图标会消失一至两分钟；</p><p>若OneDrive的图标仍未出现，请您在Run视窗输入:</p><figure class="highlight haml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gwgpajmfcwb3cn"></i><span>HAML</span><div class="collapse show" id="collapse-gwgpajmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">localappdata</span></span>%\Microsoft\OneDrive\onedrive.exe<br></code></pre></td></tr></table></div></figure><p>执行这行代码后，就自动打开了</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一组你值得拥有的Markdown中混用HTML案例</title>
    <link href="/2024/09/29/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/md%E5%91%BD%E4%BB%A4/%E4%B8%80%E7%BB%84%E4%BD%A0%E5%80%BC%E5%BE%97%E6%8B%A5%E6%9C%89%E7%9A%84Markdown%E4%B8%AD%E6%B7%B7%E7%94%A8HTML%E6%A1%88%E4%BE%8B/"/>
    <url>/2024/09/29/%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81/md%E5%91%BD%E4%BB%A4/%E4%B8%80%E7%BB%84%E4%BD%A0%E5%80%BC%E5%BE%97%E6%8B%A5%E6%9C%89%E7%9A%84Markdown%E4%B8%AD%E6%B7%B7%E7%94%A8HTML%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一组你值得拥有的Markdown中混用HTML案例"><a href="#一组你值得拥有的Markdown中混用HTML案例" class="headerlink" title="一组你值得拥有的Markdown中混用HTML案例"></a>一组你值得拥有的Markdown中混用HTML案例</h1><p><a href="/mac-cmd/">Mac 命令速查</a><br><img src="https://gitlab.com/libao21/bktu/-/raw/main/pictures/2024/09/29_19_20_9_writer.jpeg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Markdown 基础语法（见附录）已经无法满足日益丰富的信息内容，好在 Markdown 支持直接写 HTML，让扩展成为可能。</p><p>本文罗列一些常见的、实用的扩展案例，尝试设定规约，通过用少量的 HTML 代码作为 Mark?down 的补充来辅助排版，并且保持简明直观的语义。</p><p>如果你是一个完美 Markdown 控，对于混用 HTML 的情况实在无法接受的话，可以不用往后阅读了。</p><h2 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h2><p>由于是在 Markdown 中补充 HTML，而不是新的自定义语法，所以不必再额外实现 转换工具<sup>1</sup>，可以直接在任何现成支持 Markdown 的平台中使用，它们包括不限于：</p><ul><li>博客文章、评论</li><li>Github 的文档</li><li>ATA 文章</li><li>邮件内容</li></ul><h2 id="扩展案例"><a href="#扩展案例" class="headerlink" title="扩展案例"></a>扩展案例</h2><hr><h3 id="文章摘要-导读"><a href="#文章摘要-导读" class="headerlink" title="文章摘要&#x2F;导读"></a>文章摘要&#x2F;导读</h3><p>通常文章的第一段作为全文的内容摘要&#x2F;导读，字数不要太多，在第一段之后加一行仅有一个单词 <code>More</code> 的注释，用于分隔摘要&#x2F;导读，多数支持 Markdown 的博客系统也都能识别此注释，在点击「阅读更多」链接之后展示全文。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-55lsccmfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-55lsccmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- More --&gt;</span><br></code></pre></td></tr></table></div></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>HTML 注释不会被渲染到页面中。</li><li><code>More</code> 左右各留一个英文空格。</li></ul><hr><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>用 Markdown 撰写各种文档的草稿非常适合（比如 PDF 讲义稿），此时有必要补充一个符号用于标识分页，以更好的组织页面内容。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-iu079qmfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-iu079qmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!----&gt;</span><br></code></pre></td></tr></table></div></figure><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><ul><li>HTML 注释不会被渲染到页面中。</li></ul><hr><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>Markdown 规定了脚注的语法，但很多转换工具并不支持，保险起见，可以写 HTML 实现。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight gherkin"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yx7rz7mfcwb3ct"></i><span>GHERKIN</span><div class="collapse show" id="collapse-yx7rz7mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">如果你跳进一个 黑洞<span class="hljs-variable">&lt;sup&gt;</span>1<span class="hljs-variable">&lt;/sup&gt;</span> ，你的物质和 能量<span class="hljs-variable">&lt;sup&gt;</span>2<span class="hljs-variable">&lt;/sup&gt;</span> 将以一种被撕裂的形式返回到我们的宇宙中。<br><br><span class="hljs-comment">## 注释</span><br><br>1. 黑洞是广义相对论中宇宙空间内存在的一种天体。黑洞的引力很大，使得视界内的逃逸速度大于光速。<br>2. 能量是质量的时空分布可能变化程度的度量，用来表征物理系统做功的本领。<br></code></pre></td></tr></table></div></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><blockquote><p>如果你跳进一个 黑洞<sup>1</sup> ，你的物质和 能量<sup>2</sup> 将以一种被撕裂的形式返回到我们的宇宙中。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li>黑洞是广义相对论中宇宙空间内存在的一种天体。黑洞的引力很大，使得视界内的逃逸速度大于光速。</li><li>能量是质量的时空分布可能变化程度的度量，用来表征物理系统做功的本领。</li></ol></blockquote><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><ul><li>关键词左边和 <code>&lt;/sup&gt;</code> 右边，各留一个英文空格。</li><li>页底的脚注信息，用 Markdown 的有序列表语法即可。</li><li>这个方法的缺点是需要人肉维护脚注的序号，应尽量少用，建议每页条目最多不超过 5 个。</li></ul><hr><h3 id="文本高亮"><a href="#文本高亮" class="headerlink" title="文本高亮"></a>文本高亮</h3><p>文本高亮在标识搜索关键词的场景下用到，通常用于提示用户关键词的位置，以便用户更快的找到。如果需要，也可以针对一句话甚至一个段落高亮。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9ef1xamfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-9ef1xamfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">…… <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>海森堡在 1927 年首先提出<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span> ……<br></code></pre></td></tr></table></div></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><blockquote><p>不确定性原理表明：一个微观粒子的某些物理量（如位置和动量，或方位角与动量矩，还有时间和能量等），不可能同时具有确定的数值，其中一个量越确定，另一个量的不确定程度就越大。测量一对共轭量的误差（标准差）的乘积必然大于常数 h&#x2F;4π（h是普朗克常数）是 &#x3D;&#x3D;海森堡在 1927 年首先提出&#x3D;&#x3D; 的，它反映了微观粒子运动的基本规律——以共轭量为自变量的概率幅函数（波函数）构成傅立叶变换对，以及量子力学的基本关系，是物理学中又一条重要原理。</p></blockquote><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><ul><li><code>‌&lt;mark&gt;</code> ‌是 HTML5 的新 <a href="https://www.w3.org/TR/html50/text-level-semantics.html#the-mark-element">标签</a>。</li></ul><hr><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>插入和删除在审稿的时候经常用到，表示一个修改动作，从标记为插入或删除的文本上，方便用户了解之前和现在的版本。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qgyhyzmfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-qgyhyzmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">苍蝇座的位置极易分辨，它位于南十字座和 <span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>长蛇座<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>半人马座<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span> 南边，蝘蜓座以北的船底座和圆规座之间的银河中，「煤袋星云」就在苍蝇座、南十字座和半人马座的交界处，在位于 +10° 到 -90° 之间纬度的地区可全见。<br></code></pre></td></tr></table></div></figure><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><blockquote><p>苍蝇座的位置极易分辨，它位于南十字座和 <del>长蛇座</del> <ins>半人马座</ins> 南边，蝘蜓座以北的船底座和圆规座之间的银河中，「煤袋星云」就在苍蝇座、南十字座和半人马座的交界处，在位于 +10° 到 -90° 之间纬度的地区可全见。</p></blockquote><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><ul><li><code>&lt;del&gt;</code> 表示删除，<code>&lt;ins&gt;</code> 表示插入。</li><li><code>&lt;del&gt;</code> 和 <code>&lt;ins&gt;</code> 一起用表示修改。</li></ul><hr><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><p>颜色虽是样式属性，但为了区别于强调有时会用到，通常不同的颜色代表不同的状态。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight hsp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sj68hlmfcwb3ct"></i><span>HSP</span><div class="collapse show" id="collapse-sj68hlmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">包括新泽西州、康涅狄格州以及纽约市在内许多地区的法律都 &lt;<span class="hljs-keyword">font</span> <span class="hljs-keyword">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;明确禁止&lt;/<span class="hljs-keyword">font</span>&gt; 居民把电子废品当成一般垃圾来丢弃。<br></code></pre></td></tr></table></div></figure><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4><blockquote><p>包括新泽西州、康涅狄格州以及纽约市在内许多地区的法律都 明确禁止 居民把电子废品当成一般垃圾来丢弃。</p></blockquote><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><ul><li>尽管 <code>&lt;font&gt;</code> 是 <code>HTML5</code> 的不建议标签，但语义上仍然是所有标签中最好的。</li><li><code>&lt;font&gt;</code> 标签前后各留一个英文空格。</li><li>用颜色的英文名而不是十六进制表示法表示。</li></ul><hr><h3 id="文字注音"><a href="#文字注音" class="headerlink" title="文字注音"></a>文字注音</h3><p>对于一些多音字或者生癖字，留下注音能帮助读者更好的阅读。</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2rka0hmfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-2rka0hmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>饕餮 <span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>tāo tiè<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span> 是古代中国神话传说中的一种神秘怪物，别名叫 <span class="hljs-tag">&lt;<span class="hljs-name">ruby</span>&gt;</span>狍鸮 <span class="hljs-tag">&lt;<span class="hljs-name">rt</span>&gt;</span>páo xiāo<span class="hljs-tag">&lt;/<span class="hljs-name">rt</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ruby</span>&gt;</span>，古书《山海经·北次二经》介绍其特点是：其形状如羊身人面，眼在腋下，虎齿人手。<br></code></pre></td></tr></table></div></figure><h4 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h4><blockquote><p>饕餮 tāo tiè是古代中国神话传说中的一种神秘怪物，别名叫狍鸮 páo xiāo，古书《山海经·北次二经》介绍其特点是：其形状如羊身人面，眼在腋下，虎齿人手。</p></blockquote><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><ul><li><code>‌&lt;ruby&gt;</code> 和 <code>‌&lt;rt&gt;</code> 是 HTML5 的新 <a href="https://www.w3.org/TR/html50/text-level-semantics.html#the-ruby-element">标签</a>。</li></ul><hr><h3 id="导航到位置"><a href="#导航到位置" class="headerlink" title="导航到位置"></a>导航到位置</h3><p>几乎所有的转换工具都会为每一级的标题生成一个位置 <code>#id</code> 用于大纲的导航。然而每个工具的生成规则有差异，在创作文章的时候无法确定目标的最终位置，如果想自定义一个导航到文章具体目标的链接，需要写 HTML 实现。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zkv3i4mfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-zkv3i4mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;applicable-situation&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>⋮<br>建议回去看看文章开头的 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#applicable-situation&quot;</span>&gt;</span>适用情况<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>。<br></code></pre></td></tr></table></div></figure><h4 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h4><blockquote><p>如果你不知道本文所列举的案例应该用在哪些地方，建议回去看看文章开头的 <a href="#applicable-situation">适用情况</a>。</p></blockquote><h4 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h4><ul><li>取决于 技术实现<sup>2</sup> ，「导航到位置」在大多数邮箱中不适用。</li><li>由于导航的动作会导致修改页面地址的 hash 值，可能会破坏页面的逻辑，比如基于 hash 来实现的 Router。</li></ul><hr><h3 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h3><p>如果承载文章的载体，有比较大的宽度的话（比如横向的纸张），分栏可以有效改善阅读体验，而不至于一行的文字太长，CSS3 里提供了分栏的样式。</p><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight applescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-dmev5tmfcwb3ct"></i><span>APPLESCRIPT</span><div class="collapse show" id="collapse-dmev5tmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> style=<span class="hljs-string">&quot;columns: 2;&quot;</span>&gt;<br>在广义相对论的实验验证上，有著名的三大验证。在水星近日点的进动中......<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></div></figure><h4 id="效果-6"><a href="#效果-6" class="headerlink" title="效果"></a>效果</h4><blockquote><p>在广义相对论的实验验证上，有著名的三大验证。在水星近日点的进动中，每百年 43 秒的剩余进动长期无法得到解释，被广义相对论完满地解释清楚了。光线在引力场中的弯曲，广义相对论计算的结果比牛顿理论正好大了 1 倍，爱丁顿和戴森的观测队利用 1919 年 5 月 29 日的日全食进行观测的结果，证实了广义相对论是正确的。再就是引力红移，按照广义相对论，在引力场中的时钟要变慢，因此从恒星表面射到地球上来的光线，其光谱线会发生红移，这也在很高精度上得到了证实。从此，广义相对论理论的正确性被得到了广泛地承认。</p></blockquote><h4 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h4><ul><li><code>columns</code> 是个复合复性，参见 <a href="https://css-tricks.com/guide-responsive-friendly-css-columns/">这个介绍</a>。</li><li>如果你的文章是发往多个渠道的，不建议使用。</li></ul><hr><h2 id="附录：高兼容性-Markdown-语法"><a href="#附录：高兼容性-Markdown-语法" class="headerlink" title="附录：高兼容性 Markdown 语法"></a>附录：高兼容性 Markdown 语法</h2><p>Markdown 的标准有很多派系，各工具的实现都不太一样，如果你想你的文章能在各工具平台上更好的兼容，我的最佳实践是尽可能只用他们公认&#x2F;实现的子集。</p><p>下表筛选自 <a href="https://commonmark.org/help/">CommonMark</a>，经过多个编辑器和转换工具的测试，可以放心使用。</p><table><thead><tr><th align="left">作用</th><th align="left">语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">斜体</td><td align="left"><code>*Italic*</code></td><td align="left"></td></tr><tr><td align="left">加粗</td><td align="left"><code>**Bold**</code></td><td align="left"></td></tr><tr><td align="left">一级标题</td><td align="left"><code># 标题</code></td><td align="left"></td></tr><tr><td align="left">二级标题</td><td align="left"><code>## 标题</code></td><td align="left"></td></tr><tr><td align="left">三级标题</td><td align="left"><code>### 标题</code></td><td align="left"></td></tr><tr><td align="left">四级标题</td><td align="left"><code>#### 标题</code></td><td align="left"></td></tr><tr><td align="left">五级标题</td><td align="left"><code>##### 标题</code></td><td align="left"></td></tr><tr><td align="left">六级标题</td><td align="left"><code>###### 标题</code></td><td align="left"></td></tr><tr><td align="left">链接</td><td align="left"><code>[Link](http://example.com)</code></td><td align="left"></td></tr><tr><td align="left">链接</td><td align="left"><code>[Link][1]</code>  <br>⋮  <br><code>[1]: http://example.com</code></td><td align="left"></td></tr><tr><td align="left">图像</td><td align="left"><code>![Image](http://example.com/a.png)</code></td><td align="left"></td></tr><tr><td align="left">引用</td><td align="left"><code>‌&gt; 内容</code></td><td align="left">可以引用 Markdown</td></tr><tr><td align="left">无序列表</td><td align="left"><code>‌- 列表项</code></td><td align="left"></td></tr><tr><td align="left">有序列表</td><td align="left"><code>‌1. 列表项</code></td><td align="left"></td></tr><tr><td align="left">水平线</td><td align="left"><code>---</code></td><td align="left"></td></tr><tr><td align="left">内链代码</td><td align="left"><code>`内容`</code></td><td align="left">将原文打印内容</td></tr><tr><td align="left">代码块</td><td align="left"><code>```language代码```</code></td><td align="left">不建议采用缩进 4 个空格的语法来代表代码</td></tr><tr><td align="left">转义字符</td><td align="left"><code>\</code></td><td align="left"></td></tr></tbody></table><p>这里值得一提的是，<code>‌&lt;table&gt;</code> 也是现实中的一个强需求，标准里并没有对它有明确的语法说明，但是有多数的工具对此作了实现，它的语法是：</p><figure class="highlight gherkin"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7d6er1mfcwb3ct"></i><span>GHERKIN</span><div class="collapse show" id="collapse-7d6er1mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 表头 </span>|<span class="hljs-string"> 表头 </span>|<br>|<span class="hljs-string">:--</span>|<span class="hljs-string">:--</span>|<br>|<span class="hljs-string"> 内容 </span>|<span class="hljs-string"> 内容 </span>|<br>|<span class="hljs-string"> 内容 </span>|<span class="hljs-string"> 内容 </span>|<br></code></pre></td></tr></table></div></figure><h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><ol><li>转换工具将 Markdown 文本换为 HTML 代码，以在 webview 上展示。</li><li>大多数 web 邮箱，邮件内容展示区是一个无地址的 <code>&lt;iframe&gt;</code> 标签实现的，故不能用 <code>#hash</code> 的办法实现导航。</li></ol>]]></content>
    
    
    <categories>
      
      <category>网页代码</category>
      
      <category>md命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown代码</tag>
      
      <tag>md命令</tag>
      
      <tag>md代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软路由常用命令或git命令</title>
    <link href="/2024/09/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%88%96git%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/09/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/%E8%BD%AF%E8%B7%AF%E7%94%B1%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%88%96git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="软路由常用命令或git合令"><a href="#软路由常用命令或git合令" class="headerlink" title="软路由常用命令或git合令"></a>软路由常用命令或git合令</h1><h2 id="自动优选ip"><a href="#自动优选ip" class="headerlink" title="自动优选ip]"></a>自动优选ip]</h2><p>[cloudflare] 注册：(<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com</a>)</p><p><a href="https://github.com/3Kmfi6HP/EDtunnel/blob/main/_worker.js">worker vless 搭建脚本：</a></p><p>[域名注册：]<a href="http://www.namesilo.com/">www.namesilo.com</a></p><p><a href="https://www.haoweichi.com/">美国地址生成器：</a></p><p><a href="https://github.com/XIU2/CloudflareSpeedTest/issues/168">下载速度解决方案下载测速地址：</a></p><p><a href="http://www.hostbuf.com/">finashell下载地址：</a></p><p><a href="https://www.123pan.com/s/csfUVv-Ayffd.html">openwrtx86下载：</a></p><h2 id="查看软路由型号"><a href="#查看软路由型号" class="headerlink" title="查看软路由型号"></a>查看软路由型号</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-znr55kmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-znr55kmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></div></figure><p><a href="https://github.com/XIU2/CloudflareSpeedTest/releases/tag/v2.0.3">对应型号下载对应cloudflareST版本</a></p><p><a href="https://github.com/lee1080/CloudflareSpeedTestDDNS/releases/tag/v2.1.1">自动优选脚本下载</a></p><p>然后在root目录下新建一个名称 yxip，把下载好的所有文件拖到目录下</p><h2 id="到目录下"><a href="#到目录下" class="headerlink" title="到目录下"></a>到目录下</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fbjf8omfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-fbjf8omfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /root/yxip<br></code></pre></td></tr></table></div></figure><ul><li>如果电脑win10上用的git软件，要切换目录，可以参考这样的命令<br>例如你所在目录操作想cd切换到这目录 &#x2F;g&#x2F;bk&#x2F;2024bk<br>可以用</li></ul><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6olw1wmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-6olw1wmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /g/bk/2024bk<br></code></pre></td></tr></table></div></figure><p>上面是假如</p><h2 id="给予文件权限："><a href="#给予文件权限：" class="headerlink" title="给予文件权限："></a>给予文件权限：</h2><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3en3jfmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-3en3jfmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x CloudflareST<br></code></pre></td></tr></table></div></figure><p>运行代码</p><figure class="highlight armasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9lchakmfcwb3cn"></i><span>ARMASM</span><div class="collapse show" id="collapse-9lchakmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">bash</span> <span class="hljs-built_in">ip</span>.sh<br></code></pre></td></tr></table></div></figure><h2 id="定时任务：这就是每天05点自动执行一次"><a href="#定时任务：这就是每天05点自动执行一次" class="headerlink" title="定时任务：这就是每天05点自动执行一次"></a>定时任务：这就是每天05点自动执行一次</h2><figure class="highlight basic"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qbw9y4mfcwb3cn"></i><span>BASIC</span><div class="collapse show" id="collapse-qbw9y4mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">00 </span><span class="hljs-number">05</span> * * * cd /root/<span class="hljs-keyword">auto</span>/ &amp;&amp; bash ip.sh<br></code></pre></td></tr></table></div></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>服务器使用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客fluid 主题修改全方位记录</title>
    <link href="/2024/09/26/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/hexo%E5%8D%9A%E5%AE%A2fluid%20%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E5%85%A8%E6%96%B9%E4%BD%8D%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/09/26/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/hexo%E5%8D%9A%E5%AE%A2fluid%20%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E5%85%A8%E6%96%B9%E4%BD%8D%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客Fluid-主题修改全方位记录"><a href="#hexo博客Fluid-主题修改全方位记录" class="headerlink" title="hexo博客Fluid 主题修改全方位记录"></a>hexo博客Fluid 主题修改全方位记录</h1><h1 id="文章时效性提示"><a href="#文章时效性提示" class="headerlink" title="文章时效性提示"></a>文章时效性提示</h1><p>在 <code>source/custom/js</code> 目录下新建 <code>outdatae-notice.js</code> 文件：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-alv9qxmfcwb3ct"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-alv9qxmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//不同的日期显示不同的样式，200 天为黄色提示，400天为红色提示，可以自己定义。</span><br>    <span class="hljs-keyword">let</span> warningDay = <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">let</span> errorDay = <span class="hljs-number">600</span>;<br>    <span class="hljs-comment">// 确保能够获取到文章时间以及在文章详情页</span><br>    <span class="hljs-keyword">let</span> times = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;time&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (times.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-keyword">let</span> posts = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;post-content&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (posts.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span>; &#125;<br><br>    <span class="hljs-comment">// 获取系统当前的时间</span><br>    <span class="hljs-keyword">let</span> pubTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(times[<span class="hljs-number">0</span>].<span class="hljs-property">dateTime</span>);  <span class="hljs-comment">/* 文章发布时间戳 */</span><br>    <span class="hljs-keyword">let</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()  <span class="hljs-comment">/* 当前时间戳 */</span><br>    <span class="hljs-keyword">let</span> interval = <span class="hljs-built_in">parseInt</span>(now - pubTime)<br>    <span class="hljs-keyword">let</span> days = <span class="hljs-built_in">parseInt</span>(interval / <span class="hljs-number">86400000</span>)<br>    <span class="hljs-comment">/* 发布时间超过指定时间（毫秒） */</span><br>    <span class="hljs-comment">//note warning 以及 note danger 是 Next 主题的自定义模板语法，如果使用其他主题，请自行更改样式以达到最佳显示效果</span><br>    <span class="hljs-keyword">if</span> (interval &gt; warningDay * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span> * <span class="hljs-number">1000</span> &amp;&amp; interval &lt; errorDay * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span> * <span class="hljs-number">1000</span>) &#123;<br>        posts[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;div class=&quot;note note-warning&quot;&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&lt;h5&gt;文章时效性提示&lt;/h5&gt;&lt;p&gt;这是一篇发布于 &#x27;</span> + days + <span class="hljs-string">&#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&lt;/p&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span> + posts[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interval &gt;= errorDay * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span> * <span class="hljs-number">1000</span>) &#123;<br>        posts[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;div class=&quot;note note-danger&quot;&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&lt;h5&gt;文章时效性提示&lt;/h5&gt;&lt;p&gt;这是一篇发布于 &#x27;</span> + days + <span class="hljs-string">&#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&lt;/p&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span> + posts[<span class="hljs-number">0</span>].<span class="hljs-property">innerHTML</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></div></figure><p>在之前创建的 <code>scripts/injector.js</code> 中新增：</p><figure class="highlight gml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-yh2q1zmfcwb3ct"></i><span>GML</span><div class="collapse show" id="collapse-yh2q1zmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-comment">// 注入文章时效性提示</span><br>hexo.extend.injector.register(<br>    <span class="hljs-string">&#x27;body_end&#x27;</span>, `&lt;<span class="hljs-variable language_">script</span> src=<span class="hljs-string">&quot;custom/js/outdate-notice.js&quot;</span>&gt;&lt;/<span class="hljs-variable language_">script</span>&gt;`, <span class="hljs-string">&#x27;post&#x27;</span><br>);<br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo cl</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><h1 id="代码块美化"><a href="#代码块美化" class="headerlink" title="代码块美化"></a>代码块美化</h1><p>在 <code>scripts</code> 目录下新建 <code>code-pretty.js</code> 文件：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l64m98mfcwb3ct"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-l64m98mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-comment">// 获取唯一 ID</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUuid</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>) + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>);<br>&#125;<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<br>    <span class="hljs-string">&quot;after_post_render&quot;</span>,<br>    <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; line_number, lib &#125; = hexo.<span class="hljs-property">theme</span>.<span class="hljs-property">config</span>.<span class="hljs-property">code</span>.<span class="hljs-property">highlight</span>;<br><br>        <span class="hljs-keyword">let</span> reg;<br>        <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;highlightjs&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (line_number) &#123;<br>                reg = <span class="hljs-regexp">/(&lt;figure class=&quot;highlight.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/figure&gt;)/gim</span>s;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?hljs (.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lib === <span class="hljs-string">&quot;prismjs&quot;</span>) &#123;<br>            reg = <span class="hljs-regexp">/(&lt;div class=&quot;code-wrapper.+?&gt;)(.+?data-language=&quot;(.*?)&quot;.+?)(&lt;\/div&gt;)/gim</span>s;<br>        &#125;<br><br>        data.<span class="hljs-property">content</span> = data.<span class="hljs-property">content</span>.<span class="hljs-title function_">replace</span>(reg, <span class="hljs-function">(<span class="hljs-params">match, begin, inner, lang, end, offset, string</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> collapseId = <span class="hljs-string">`collapse-<span class="hljs-subst">$&#123;getUuid()&#125;</span>`</span>;<br>            <span class="hljs-keyword">const</span> collapseBtn = <span class="hljs-string">`&lt;i class=&quot;iconfont icon-code&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;&lt;/i&gt;`</span>;<br>            <span class="hljs-keyword">const</span> collapseDiv = <span class="hljs-string">`&lt;div class=&quot;collapse show&quot; id=&quot;<span class="hljs-subst">$&#123;collapseId&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;inner&#125;</span>&lt;/div&gt;`</span>;<br>            <span class="hljs-keyword">const</span> langSpan = <span class="hljs-string">`&lt;span&gt;<span class="hljs-subst">$&#123;lang.toUpperCase()&#125;</span>&lt;/span&gt;`</span>;<br>            <span class="hljs-keyword">return</span> begin + collapseBtn + langSpan + collapseDiv + end;<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span> data;<br>    &#125;,<br>    <span class="hljs-number">10000</span> <span class="hljs-comment">// 应该在完成其他渲染后执行，因此将优先级设大一点</span><br>);<br></code></pre></td></tr></table></div></figure><p>如果需要修改代码块右上角图标，请更换 <code>collapseBtn</code> 的 icon 部分 <code>&quot;iconfont icon-code&quot;</code>。</p><p>再在 <code>custom/css</code> 中新建 <code>code-pretty.styl</code> 文件</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-miraglmfcwb3ct"></i><span>CSS</span><div class="collapse show" id="collapse-miraglmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.highlight</span> <span class="hljs-selector-tag">table</span>,<br><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.code-wrapper</span> pre &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.5rem</span> <span class="hljs-number">0.5rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.highlight</span>,<br><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.code-wrapper</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e6ebf1</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.625rem</span>;<br><br>  // 折叠图标<br>  &gt; <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2rem</span>;<br>    <span class="hljs-attribute">transform</span>: none;<br>    <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> ease-in-out, transform <span class="hljs-number">0.2s</span> ease-in-out;<br><br>    // &amp;<span class="hljs-selector-class">.collapsed</span> &#123;<br>    //   <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">90deg</span>);<br>    // &#125;<br>  &#125;<br><br>  // 代码语言<br>  &gt; <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#777777</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.copy-btn</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">color</span>: darkslategrey;<br><br>  &gt; <span class="hljs-selector-tag">i</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span> <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;<br>  <span class="hljs-selector-class">.copy-btn</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#c4c6c9</span>;<br>    <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> ease-in-out;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-attr">[data-user-color-scheme=<span class="hljs-string">&#x27;dark&#x27;</span>]</span> &#123;<br>  <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.highlight</span>,<br>  <span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.code-wrapper</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#696969</span>;<br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span> ease-in-out;<br><br>    &gt; <span class="hljs-selector-tag">i</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#c4c6c9</span>;<br>    &#125;<br><br>    &gt; <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#c4c6c9</span>;<br>      <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span> ease-in-out;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 <code>_config.fluid.yml</code> 中的 <code>custom_css</code> 配置项中添加：</p><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9nl25wmfcwb3ct"></i><span>DTS</span><div class="collapse show" id="collapse-9nl25wmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">custom_css:</span><br>  - custom<span class="hljs-keyword">/css/</span>code-pretty<br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo c</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><h1 id="浏览器恶搞标签"><a href="#浏览器恶搞标签" class="headerlink" title="浏览器恶搞标签"></a>浏览器恶搞标签</h1><p>在 <code>source</code> 目录下新建 <code>custom/js</code> 目录，再在其中新建 <code>label-page.js</code> 文件，内容为：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3kfpqjmfcwb3ct"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-3kfpqjmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 浏览器搞笑标题</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">OriginTitle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>;<br><span class="hljs-keyword">var</span> titleTime;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">hidden</span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;(´;ω;｀) 你不要我了吗 - &#x27;</span> + <span class="hljs-title class_">OriginTitle</span>;<br><span class="hljs-built_in">clearTimeout</span>(titleTime);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title class_">OriginTitle</span>;<br>&#125;, <span class="hljs-number">2000</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>随后在 <code>_config.fluid.yml</code> 中的 <code>custom_js</code> 配置项中添加：</p><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jb7usbmfcwb3ct"></i><span>DTS</span><div class="collapse show" id="collapse-jb7usbmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">custom_js:</span><br>  - <span class="hljs-keyword">/custom/</span>js/label-page.js <span class="hljs-meta"># 浏览器恶搞标题</span><br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo cl</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><h1 id="背景动态线条"><a href="#背景动态线条" class="headerlink" title="背景动态线条"></a>背景动态线条</h1><h2 id="简单版"><a href="#简单版" class="headerlink" title="简单版"></a>简单版</h2><p>添加<a href="https://github.com/hustcc/canvas-nest.js">背景动态线条</a>只需要在 <code>_config.fluid.yml</code> 中新增 <code>custom_html</code> 配置项并添加如下内容：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pvgos0mfcwb3ct"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-pvgos0mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">custom_html:<br>  - &lt;script <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;255,255,255&quot;</span> <span class="hljs-attribute">opacity</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attribute">zIndex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attribute">count</span>=<span class="hljs-string">&quot;110&quot;</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1.0.1/dist/canvas-nest.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo cl</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><h2 id="修改版"><a href="#修改版" class="headerlink" title="修改版"></a>修改版</h2><p>由于 <code>canvas-nest.js</code> 的 <code>2.0.0</code> 以后所有版本都与 Fluid 主题有冲突，而 <code>1.0.1</code> 版本不能修改点的颜色，只能修改线条颜色，因此还可以选择将 <code>1.0.1</code> 版本的 <code>js</code> 文件下载到本地进行修改。</p><p>下载<a href="https://cdn.jsdelivr.net/npm/canvas-nest.js@1.0.1/dist/canvas-nest.js">源文件</a>到本地 <code>source/custom/js</code> 目录下，分别修改以下内容：</p><ul><li>在 <code>c: get_attribute(script, &quot;color&quot;, &quot;0,0,0&quot;),</code> 后新增一行</li></ul><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hvb46zmfcwb3ct"></i><span>STYLUS</span><div class="collapse show" id="collapse-hvb46zmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">p</span>: <span class="hljs-built_in">get_attribute</span>(script, <span class="hljs-string">&quot;pointColor&quot;</span>, <span class="hljs-string">&quot;0,0,0&quot;</span>), <span class="hljs-comment">//pointColor</span><br></code></pre></td></tr></table></div></figure><ul><li>在<code>context.strokeStyle = &quot;rgba(&quot; + config.c + &quot;,&quot; + (d + 0.2) + &quot;)&quot;</code> 后新增一行</li></ul><figure class="highlight ini"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9erk39mfcwb3ct"></i><span>INI</span><div class="collapse show" id="collapse-9erk39mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">context.fillStyle</span> = <span class="hljs-string">&quot;rgba(&quot;</span> + config.p + <span class="hljs-string">&quot;)&quot;</span>,<br></code></pre></td></tr></table></div></figure><p>然后在 <code>_config.fluid.yml</code> 中新增 <code>custom_html</code> 配置项并添加如下内容：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pytajqmfcwb3ct"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-pytajqmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">custom_html:<br>   - &lt;script <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;255,255,255&quot;</span> <span class="hljs-attribute">pointColor</span>=<span class="hljs-string">&quot;252,228,236&quot;</span> <span class="hljs-attribute">opacity</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attribute">zIndex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attribute">count</span>=<span class="hljs-string">&quot;110&quot;</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/custom/js/canvas-nest.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo cl</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><h1 id="顶部阅读进度条"><a href="#顶部阅读进度条" class="headerlink" title="顶部阅读进度条"></a>顶部阅读进度条</h1><p>在 <code>source/custom/js</code> 目录下新建 <code>read-progress-bar.js</code> 文件：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9ydz7omfcwb3ct"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-9ydz7omfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> winHeight = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,<br>        docHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollHeight</span>,<br>        progressBar = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#content_progress&#x27;</span>);<br>    progressBar.<span class="hljs-property">max</span> = docHeight - winHeight;<br>    progressBar.<span class="hljs-property">value</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span>;<br><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        progressBar.<span class="hljs-property">max</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollHeight</span> - <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>        progressBar.<span class="hljs-property">value</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span>;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>再在 <code>source/custom/css</code> 目录下新建 <code>read-progress-bar.css</code> 文件：</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-v3rs12mfcwb3ct"></i><span>CSS</span><div class="collapse show" id="collapse-v3rs12mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#content_progress</span> &#123;<br>    <span class="hljs-comment">/* Positioning */</span><br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">32766</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">6px</span>;<br>    -webkit-<span class="hljs-attribute">appearance</span>: none;<br>    -moz-<span class="hljs-attribute">appearance</span>: none;<br>    <span class="hljs-attribute">appearance</span>: none;<br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">background-color</span>: transparent;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff80</span>; <span class="hljs-comment">/* 使用半透明白色，适配夜间模式 */</span><br>&#125;<br><br><span class="hljs-selector-id">#content_progress</span>::-webkit-progress-bar &#123;<br>    <span class="hljs-attribute">background-color</span>: transparent;<br>&#125;<br><br><span class="hljs-selector-id">#content_progress</span>::-webkit-progress-value &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff80</span>;<br>&#125;<br><br><span class="hljs-selector-id">#content_progress</span>::-moz-progress-bar &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff80</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><p>接着在 <code>scripts</code> 目录下新建 <code>injector.js</code> 文件：</p><figure class="highlight scilab"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wi56qamfcwb3ct"></i><span>SCILAB</span><div class="collapse show" id="collapse-wi56qamfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-comment">// 注入阅读进度条</span><br>hexo.extend.injector.register(<br>    <span class="hljs-string">&#x27;head_begin&#x27;</span>, <span class="hljs-string">&#x27;&lt;progress id=&quot;</span>content_progress<span class="hljs-string">&quot; value=&quot;</span><span class="hljs-number">0</span><span class="hljs-string">&quot;&gt;&lt;/progress&gt;&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span><br>);<br></code></pre></td></tr></table></div></figure><p>最后在 <code>_config.fluid.yml</code> 中的 <code>custom_js</code> 和 <code>custom_css</code> 配置项中添加：</p><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7spqjfmfcwb3ct"></i><span>DTS</span><div class="collapse show" id="collapse-7spqjfmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">custom_js:</span><br>  - custom<span class="hljs-keyword">/js/</span>read-progress-bar.js<br><span class="hljs-symbol">custom_css:</span><br>  - custom<span class="hljs-keyword">/css/</span>read-progress-bar.css<br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo cl</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><h1 id="建站时间"><a href="#建站时间" class="headerlink" title="建站时间"></a>建站时间</h1><p>在 <code>source/custom/js</code> 目录下新建 <code>create-time.js</code> 文件：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0kactjmfcwb3ct"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-0kactjmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createtime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> grt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;08/19/2024 12:00:00&quot;</span>);<span class="hljs-comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span><br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>() + <span class="hljs-number">250</span>);<br>    days = (now - grt) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - grt) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) &#123; hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum; &#125; minutes = (now - grt) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes); <span class="hljs-keyword">if</span> (<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) &#123; mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum; &#125;<br>    seconds = (now - grt) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds); <span class="hljs-keyword">if</span> (<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) &#123; snum = <span class="hljs-string">&quot;0&quot;</span> + snum; &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站已创建 &quot;</span> + dnum + <span class="hljs-string">&quot; 天 &quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot; 小时 &quot;</span> + mnum + <span class="hljs-string">&quot; 分 &quot;</span> + snum + <span class="hljs-string">&quot; 秒&quot;</span>;<br>&#125;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;createtime()&quot;</span>, <span class="hljs-number">250</span>);<br></code></pre></td></tr></table></div></figure><p>在 <code>_config.fluid.yml</code> 中的 <code>custom_js</code> 配置项中添加：</p><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fr4s8wmfcwb3ct"></i><span>DTS</span><div class="collapse show" id="collapse-fr4s8wmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">custom_js:</span><br>  - custom<span class="hljs-keyword">/js/</span>create-time.js<br></code></pre></td></tr></table></div></figure><p>最后在 <code>_config.fluid.yml</code> 中修改 <code>footer/content</code> 配置项，新增一行</p><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o17cgtmfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-o17cgtmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>天数载入中<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></div></figure><p>即将 <code>footer/content</code> 配置项修改为如下形式：</p><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-351g6zmfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-351g6zmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">footer:<br>  content: &#x27;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>天数载入中<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  &#x27;<br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo cl</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><h1 id="随机文章跳转"><a href="#随机文章跳转" class="headerlink" title="随机文章跳转"></a>随机文章跳转</h1><p>该方法需要先<a href="/posts/2024/48acad6d/#%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9B%BE">生成 sitemap</a>。</p><p>先在 <code>source/custom/js</code> 目录下新建 <code>random-post.js</code> 文件：</p><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-h9t8h4mfcwb3ct"></i><span>ARCADE</span><div class="collapse show" id="collapse-h9t8h4mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomPost</span>(<span class="hljs-params"></span>) &#123;<br>    fetch(<span class="hljs-string">&#x27;/sitemap.xml&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-built_in">text</span>()).then(<span class="hljs-function"><span class="hljs-params">str</span> =&gt;</span> (<span class="hljs-keyword">new</span> window.DOMParser()).parseFromString(str, <span class="hljs-string">&quot;text/xml&quot;</span>)).then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>        let ls = data.querySelectorAll(<span class="hljs-string">&#x27;url loc&#x27;</span>);<br>        let locationHref, locSplit;<br>        <span class="hljs-keyword">do</span> &#123;<br>            locationHref = ls[Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * ls.<span class="hljs-built_in">length</span>)].innerHTML<br>            locSplit = locationHref.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">3</span>] || <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-comment">// &#125; while (locSplit == &#x27;&#x27; || locSplit == &#x27;tags&#x27;);</span><br>            <span class="hljs-comment">//若所有文章都如 https://…….com/posts/2022/07/…… 格式，主域名后字符是 posts，则循环条件改为：</span><br>        &#125; <span class="hljs-keyword">while</span> (locSplit !== <span class="hljs-string">&#x27;posts&#x27;</span>);<br>        location.href = locationHref<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></div></figure><p>在 <code>_config.fluid.yml</code> 中的 <code>custom_js</code> 配置项中添加：</p><figure class="highlight dts"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xii6hgmfcwb3ct"></i><span>DTS</span><div class="collapse show" id="collapse-xii6hgmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">custom_js:</span><br>  - custom<span class="hljs-keyword">/js/</span>random-post.js<br></code></pre></td></tr></table></div></figure><p>随后在喜欢的位置放上 <code>javascript:randomPost();</code> 的跳转链接，例如在导航栏：</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5j0mnemfcwb3ct"></i><span>CSS</span><div class="collapse show" id="collapse-5j0mnemfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">menu</span>:<br>  - &#123; key: <span class="hljs-string">&quot;random&quot;</span>, name: <span class="hljs-string">&quot;随机文章&quot;</span>, link: <span class="hljs-string">&quot;javascript:randomPost();&quot;</span>, icon: <span class="hljs-string">&quot;iconfont icon-random&quot;</span> &#125;<br></code></pre></td></tr></table></div></figure><p>使用 <code>hexo cl</code> + <code>hexo d -g</code> 重新生成并部署即可。</p><p>以上代码中 <code>icon: &quot;iconfont icon-random&quot;</code> 使用了我自己的 Iconfont 图标库而非<a href="https://hexo.fluid-dev.com/docs/icon/">主题内置 Iconfont 图标库</a>，有需要请自行到 <a href="https://www.iconfont.cn/">Iconfont</a> 创建自己的图标库。</p><h1 id="新增标签语法"><a href="#新增标签语法" class="headerlink" title="新增标签语法"></a>新增标签语法</h1><p>参看<a href="/posts/2024/a0486011/" title="Fluid 移植其他主题的标签语法">另一篇文章</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>本篇文章内容参考了类似的大量文章内容，特此感谢（排名不分先后） - <a href="https://zeyulong.com/posts/3edad46f">Hexo博客美化 - 龙泽雨的博客</a> - <a href="https://wakutsu0223.top/2023/02/24/Hexo-Fluid%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%AD%94%E6%94%B9%E7%BA%AA%E5%BD%95">Hexo-Fluid搭建与魔改纪录 - 弥冬のBlog</a> - <a href="https://www.eurekady.com/article/Fluid/e3b7f02954e5">Hexo-3-Fluid主题魔改 - 遥望</a> - <a href="https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify">Hexo博客Fluid主题魔改记录 - KEVIN’S BLOG</a> - <a href="https://www.cnblogs.com/qq597585136/p/7019755.html">网页动态背景——随鼠标变换的动态线条 - 孤独的飞行者 - 博客园</a> - <a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/1051">建议添加“文章时效性”提示 · Issue #1051 · fluid-dev&#x2F;hexo-theme-fluid</a> - <a href="https://kiyanyang.github.io/posts/f92be1eb/">Hexo-Fluid 博客美化和修改 | Kiyan’s Blog</a> - <a href="https://kiyanyang.github.io/posts/c4dd4019/">使用 Hexo 过滤器实现 Fluid 主题的代码折叠 | Kiyan’s Blog</a> - <a href="https://immmmm.com/randompost-by-sitemap/">利用 SiteMap 随机访问站内页面：：木木木木木</a></p><p>以上文章复自网络，方便收藏日后观看！！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客fluid主题代码块加入中文一键复制</title>
    <link href="/2024/09/26/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/hexo%E5%8D%9A%E5%AE%A2fluid%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E5%8A%A0%E5%85%A5%E4%B8%AD%E6%96%87%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6/"/>
    <url>/2024/09/26/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/hexo%E5%8D%9A%E5%AE%A2fluid%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E5%9D%97%E5%8A%A0%E5%85%A5%E4%B8%AD%E6%96%87%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客fluid主题代码块加入中文一键复制！"><a href="#hexo博客fluid主题代码块加入中文一键复制！" class="headerlink" title="hexo博客fluid主题代码块加入中文一键复制！"></a>hexo博客fluid主题代码块加入中文一键复制！</h1><h2 id="本次讲的是fluid主题"><a href="#本次讲的是fluid主题" class="headerlink" title="本次讲的是fluid主题"></a>本次讲的是fluid主题</h2><p>*每个主题可能修改方法不一样，但可以作为参考<br>找到这个文件用文件编器打开<br><code>博客根目录下\themes\fluid\source\js\plugins.js</code></p><p>键复制按钮旁边出现不同的英文字母（如 PERL、MIPSASM、AVRASM），这是因为代码块检测到的编程语言在每个代码块中会有所不同。通过这段代码，按钮会显示代码块中指定的语言。</p><p>要在按钮旁边加入中文 “一键复制”，你可以修改如下部分代码：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-51eejhmfcwb3ct"></i><span>NGINX</span><div class="collapse show" id="collapse-51eejhmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">copyTmpl</span> += <span class="hljs-string">&#x27;LANG&#x27;</span>;<br></code></pre></td></tr></table></div></figure><p>可以改为：</p><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i8lta7mfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-i8lta7mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">copyTmpl += &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>一键复制<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#x27;;<br></code></pre></td></tr></table></div></figure><p>这会在在右边的复制按钮后面添加 “一键复制” 文本。<br>这样点击一键复制如果复制成功就会出现一个打钩！</p><h2 id="打钩改成：复制成功"><a href="#打钩改成：复制成功" class="headerlink" title="打钩改成：复制成功"></a>打钩改成：复制成功</h2><p>上面的代码的复制成功是一个打钩，修改成：复制成功，4个中文字？</p><p>要修改“复制成功”的提示为“复制成功”四个中文字，你需要找到复制成功的反馈逻辑，并替换显示的图标或文字。<br>在你的代码中，<code>ClipboardJS</code> 负责处理复制成功事件，这一段代码处理成功后的反馈：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-91h2bxmfcwb3ct"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-91h2bxmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">clipboard.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">clearSelection</span>();<br>  e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;icon-copy&#x27;</span>, <span class="hljs-string">&#x27;icon-success&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;icon-success&#x27;</span>, <span class="hljs-string">&#x27;icon-copy&#x27;</span>);<br>  &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br></code></pre></td></tr></table></div></figure><p>其中 <code>icon-copy</code> 和 <code>icon-success</code> 是表示复制按钮状态的图标。在这里，你可以直接用文字代替图标。你可以把 <code>e.trigger.innerHTML</code> 替换为你想要显示的 “复制成功” 字符串。<br>修改为以下代码即可：</p><figure class="highlight javascript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-wsiif8mfcwb3ct"></i><span>JAVASCRIPT</span><div class="collapse show" id="collapse-wsiif8mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">clipboard.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">clearSelection</span>();<br>  e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;复制成功&#x27;</span>;  <span class="hljs-comment">// 复制成功后显示的文字</span><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    e.<span class="hljs-property">trigger</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;i class=&quot;iconfont icon-copy&quot;&gt;&lt;/i&gt;一键复制&#x27;</span>;  <span class="hljs-comment">// 恢复成原始的复制按钮</span><br>  &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br></code></pre></td></tr></table></div></figure><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ol><li><p><code>e.trigger.innerHTML = &#39;复制成功&#39;;</code> 将复制成功时的反馈修改为“复制成功”四个中文字。</p></li><li><p><code>setTimeout</code> 过2秒后恢复按钮的状态为原来的 “一键复制” 和复制图标。</p></li></ol><p>这样，你在每次复制成功时，会看到 “复制成功” 四个字，而不是打钩的图标。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网页代码</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用命令在当前目录和以下的子目录搜文件</title>
    <link href="/2024/09/26/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E7%94%A8%E5%91%BD%E4%BB%A4%E5%9C%A8%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%92%8C%E4%BB%A5%E4%B8%8B%E7%9A%84%E5%AD%90%E7%9B%AE%E5%BD%95%E6%90%9C%E6%96%87%E4%BB%B6/"/>
    <url>/2024/09/26/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/%E7%94%A8%E5%91%BD%E4%BB%A4%E5%9C%A8%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%92%8C%E4%BB%A5%E4%B8%8B%E7%9A%84%E5%AD%90%E7%9B%AE%E5%BD%95%E6%90%9C%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="用命令在当前目录和以下的子目录搜文件"><a href="#用命令在当前目录和以下的子目录搜文件" class="headerlink" title="用命令在当前目录和以下的子目录搜文件"></a>用命令在当前目录和以下的子目录搜文件</h1><ul><li>如果你想在当前目录及其所有子目录中搜索包含<code>copy-btn</code>字段的文件，你可以使用Git Bash或Git for Windows中的<code>grep</code>命令，并且不需要指定目录路径。以下是相应的命令：<figure class="highlight erlang"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a9mqfmmfcwb3cp"></i><span>ERLANG</span><div class="collapse show" id="collapse-a9mqfmmfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang">grep -r <span class="hljs-string">&quot;copy-btn&quot;</span> .<br><br></code></pre></td></tr></table></div></figure>这里解释一下：</li></ul><ul><li><code>grep</code>：这是文本搜索工具。</li><li><code>-r</code>：表示递归搜索子目录。</li><li><code>&quot;copy-btn&quot;</code>：是你想要搜索的文本字段。</li><li><code>.</code>：这是一个特殊字符，代表当前目录。</li></ul><p>这个命令会在当前目录以及其所有子目录中搜索所有包含<code>copy-btn</code>文本的文件。搜索结果将直接显示在终端或命令提示符窗口中。</p><ul><li>如果你想要将搜索结果保存到文件中，可以使用重定向操作符：<figure class="highlight gradle"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nf1j60mfcwb3cp"></i><span>GRADLE</span><div class="collapse show" id="collapse-nf1j60mfcwb3cp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -r <span class="hljs-string">&quot;copy-btn&quot;</span> . &gt; search_results.txt<br></code></pre></td></tr></table></div></figure>这将搜索结果保存到当前目录下名为<code>search_results.txt</code>的文件中。</li></ul><p>如果你使用的是Git Bash，上述命令应该可以直接使用。如果你使用的是Git for Windows的命令提示符，可能需要确保你的环境变量配置正确，以便正确使用<code>grep</code>命令。如果<code>grep</code>命令在命令提示符中不可用，你可能需要安装Git Bash或者安装并配置<code>grep</code>命令。</p>]]></content>
    
    
    <categories>
      
      <category>电脑使用日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电脑日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客fluid主题主页只显示标题修改方法</title>
    <link href="/2024/09/26/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/hexo%E5%8D%9A%E5%AE%A2fluid%E4%B8%BB%E9%A2%98%E4%B8%BB%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%A0%87%E9%A2%98%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/26/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/hexo%E5%8D%9A%E5%AE%A2fluid%E4%B8%BB%E9%A2%98%E4%B8%BB%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%A0%87%E9%A2%98%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客fluid主题主页只显示标题修改方法"><a href="#hexo博客fluid主题主页只显示标题修改方法" class="headerlink" title="hexo博客fluid主题主页只显示标题修改方法"></a>hexo博客fluid主题主页只显示标题修改方法</h1><p>只要更改一个文件即可<br>博客根目录下的\themes\fluid\layout\index.ejs<br>把上面的代码改成以下的即可</p><h2 id="只显示标题："><a href="#只显示标题：" class="headerlink" title="只显示标题："></a>只显示标题：</h2><figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a3sb55mfcwb3ct"></i><span>PGSQL</span><div class="collapse show" id="collapse-a3sb55mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<br><span class="hljs-keyword">if</span> (theme.<span class="hljs-keyword">index</span>.slogan.<span class="hljs-keyword">enable</span>) &#123;<br>  page.subtitle = theme.<span class="hljs-keyword">index</span>.slogan.text || config.subtitle || <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br>page.banner_img = theme.<span class="hljs-keyword">index</span>.banner_img<br>page.banner_img_height = theme.<span class="hljs-keyword">index</span>.banner_img_height<br>page.banner_mask_alpha = theme.<span class="hljs-keyword">index</span>.banner_mask_alpha<br>%&gt;<br><br>&lt;% page.posts.<span class="hljs-keyword">each</span>(<span class="hljs-keyword">function</span> (post) &#123; %&gt;<br>  &lt;div <span class="hljs-keyword">class</span>=&quot;row mx-auto index-card&quot;&gt;<br>    &lt;% var post_url = url_for(post.path), index_img = post.index_img || theme.post.default_index_img %&gt;<br>    &lt;% <span class="hljs-keyword">if</span> (index_img) &#123; %&gt;<br>      &lt;div <span class="hljs-keyword">class</span>=&quot;col-12 col-md-4 m-auto index-img&quot;&gt;<br>        &lt;a href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;<br>          &lt;img src=&quot;&lt;%= url_for(index_img) %&gt;&quot; alt=&quot;&lt;%= post.title %&gt;&quot;&gt;<br>        &lt;/a&gt;<br>      &lt;/div&gt;<br>    &lt;% &#125; %&gt;<br>    &lt;article <span class="hljs-keyword">class</span>=&quot;col-12 col-md-&lt;%= index_img ? &#x27;8&#x27; : &#x27;12&#x27; %&gt; mx-auto index-info&quot;&gt;<br>      &lt;h2 <span class="hljs-keyword">class</span>=&quot;index-header&quot;&gt;<br>        &lt;% <span class="hljs-keyword">if</span> (theme.<span class="hljs-keyword">index</span>.post_sticky &amp;&amp; theme.<span class="hljs-keyword">index</span>.post_sticky.<span class="hljs-keyword">enable</span> &amp;&amp; post.sticky &gt; <span class="hljs-number">0</span>) &#123; %&gt;<br>          &lt;i <span class="hljs-keyword">class</span>=&quot;index-pin &lt;%= theme.index.post_sticky &amp;&amp; theme.index.post_sticky.icon %&gt;&quot; title=&quot;Pin on top&quot;&gt;&lt;/i&gt;<br>        &lt;% &#125; %&gt;<br>        &lt;a href=&quot;&lt;%= post_url %&gt;&quot; target=&quot;&lt;%- theme.index.post_url_target %&gt;&quot;&gt;<br>          &lt;%= post.title %&gt;<br>        &lt;/a&gt;<br>      &lt;/h2&gt;<br><br>    &lt;/article&gt;<br>  &lt;/div&gt;<br>&lt;% &#125;) %&gt;<br><br>&lt;%- partial(<span class="hljs-string">&#x27;_partials/paginator&#x27;</span>) %&gt;<br><br></code></pre></td></tr></table></div></figure><p>改了上面即可了！！！<br>如果想更详细可以看下面从 <code>&lt;/article&gt;</code>前面加入即可</p><h2 id="摘要显示-这份没注释"><a href="#摘要显示-这份没注释" class="headerlink" title="摘要显示(这份没注释)"></a>摘要显示(这份没注释)</h2><figure class="highlight vbscript-html"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0l6xplmfcwb3ct"></i><span>VBSCRIPT-HTML</span><div class="collapse show" id="collapse-0l6xplmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index-excerpt&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="language-vbscript">&lt;%= post.url %&gt;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;</span></span></span><span class="language-vbscript">&lt;%- theme.index.post_url_target %&gt;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> </span><span class="language-vbscript">&lt;%- strip_html(excerpt).<span class="hljs-keyword">sub</span><span class="hljs-built_in">string</span>(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>).<span class="hljs-built_in">trim</span>().<span class="hljs-built_in">replace</span>(/\n/g, <span class="hljs-comment">&#x27; &#x27;) %&gt;</span></span><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> </span><br><span class="language-xml"></span><br></code></pre></td></tr></table></div></figure><h2 id="日期、分类、标签等元数据显示（这份是注释的）"><a href="#日期、分类、标签等元数据显示（这份是注释的）" class="headerlink" title="日期、分类、标签等元数据显示（这份是注释的）"></a>日期、分类、标签等元数据显示（这份是注释的）</h2><figure class="highlight applescript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-j5oha8mfcwb3ct"></i><span>APPLESCRIPT</span><div class="collapse show" id="collapse-j5oha8mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><br>&lt;!<span class="hljs-comment">-- </span><br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;index-btm post-metas&quot;</span>&gt; &lt;% <span class="hljs-keyword">if</span> (theme.index.post_meta.<span class="hljs-built_in">date</span>) &#123; %&gt; &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;post-meta mr-3&quot;</span>&gt; &lt;i <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;iconfont icon-date&quot;</span>&gt;&lt;/i&gt; &lt;<span class="hljs-built_in">time</span> datetime=<span class="hljs-string">&quot;&lt;%= full_date(post.date, &#x27;YYYY-MM-DD HH:mm&#x27;) %&gt;&quot;</span> pubdate&gt; &lt;%- <span class="hljs-built_in">date</span>(post.<span class="hljs-built_in">date</span>, config.date_format) %&gt; &lt;/<span class="hljs-built_in">time</span>&gt; &lt;/<span class="hljs-keyword">div</span>&gt; &lt;% &#125; %&gt; &lt;% <span class="hljs-keyword">if</span> (theme.index.post_meta.category &amp;&amp; post.categories.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>) &#123; %&gt; &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;post-meta mr-3 d-flex align-items-center&quot;</span>&gt; &lt;i <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;iconfont icon-category&quot;</span>&gt;&lt;/i&gt; &lt;%- partial(&#x27;_partials/category-chains&#x27;, &#123; categories: post.categories, limit: <span class="hljs-number">1</span> &#125;) %&gt; &lt;/<span class="hljs-keyword">div</span>&gt; &lt;% &#125; %&gt; &lt;% <span class="hljs-keyword">if</span> (theme.index.post_meta.tag &amp;&amp; post.tags.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>) &#123; %&gt; &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;post-meta&quot;</span>&gt; &lt;i <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;iconfont icon-tags&quot;</span>&gt;&lt;/i&gt; &lt;% post.tags.each(function(tag)&#123; %&gt; &lt;a href=<span class="hljs-string">&quot;&lt;%= url_for(tag.path) %&gt;&quot;</span>&gt;<span class="hljs-comment">#&lt;%- tag.name %&gt;&lt;/a&gt; &lt;% &#125;) %&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;/div&gt; </span><br><span class="hljs-comment">--&gt;</span><br><br></code></pre></td></tr></table></div></figure><p>注意，如果要注释，在代码前一行加入, 上面两段一份一注释，一份没注释的！</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o5ek2bmfcwb3ct"></i><span>ADA</span><div class="collapse show" id="collapse-o5ek2bmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;!<span class="hljs-comment">-- </span><br></code></pre></td></tr></table></div></figure><p>代码后下一行加入</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4h6an2mfcwb3ct"></i><span>ADA</span><div class="collapse show" id="collapse-4h6an2mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></div></figure><p>即可！！！</p><h2 id="还有这两种种设置方法："><a href="#还有这两种种设置方法：" class="headerlink" title="还有这两种种设置方法："></a>还有这两种种设置方法：</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><ul><li>用文本编辑器打开 themes&#x2F; 目录下的对应的主题的theme文件夹下的 _config.yml 文件，找到这段代码，如果没有则新建，可能不同的主题会不支持这种方法：</li></ul><figure class="highlight xml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-h18vylmfcwb3ct"></i><span>XML</span><div class="collapse show" id="collapse-h18vylmfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"># Automatically Excerpt. Not recommend.  <br># Please use <span class="hljs-comment">&lt;!-- more --&gt;</span> in the post to control excerpt accurately.  <br>auto_excerpt:  <br>  enable: false  <br>  length: 150<br> <br></code></pre></td></tr></table></div></figure><p>把 enable 的 false 改成 true 就行了，然后 length 是设定文章预览的文本长度。<br>修改后重启 hexo 就ok了。</p><p>* </p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><ul><li>在你写 md 文章的时候，可以在内容中加上 <code>&lt;!--more--&gt;</code>，这样首页和列表页展示的文章内容就是 <code>&lt;!--more--&gt;</code> 之前的文字，而之后的就不会显示了。</li></ul><p>效果上面两种方式展示出来的效果是不一样的。</p><p>第一种修改 _config.yml 文件的效果是会格式化你文章的样式，直接把文字挤在一起显示，最后会有 …。</p><p>而第二种加上 <code>&lt;!--more--&gt;</code>展示出来的就是你原本文章的样式，最后不会有…。</p><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><ul><li>在文章的 <code>front-matter</code> 中添加 <code>description</code>，并提供文章摘录</li></ul><figure class="highlight yaml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-pohk42mfcwb3ct"></i><span>YAML</span><div class="collapse show" id="collapse-pohk42mfcwb3ct"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---  </span><br><span class="hljs-attr">title:</span> <span class="hljs-string">让hexo的首页只显示文章的部分内容而不是全部</span>  <br><span class="hljs-attr">id:</span> <span class="hljs-string">set-hexo-show-more-button-on-index</span>  <br><span class="hljs-attr">categories:</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">WEB开发</span>  <br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-09-30 11:01:40</span>  <br><span class="hljs-attr">tags:</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">blog</span>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span>  <br><span class="hljs-attr">description:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">的</span> <span class="hljs-string">Next</span> <span class="hljs-string">主题默认是首页显示你每篇文章的全文内容，那么要如何设置只显示部分呢？正如你现在看到的本篇文章，只显示到这里。</span>  <br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></div></figure><p>但是使用这种方式生成的描述信息在文章的详情页是不再显示的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>各种方式展示的效果各有好处，第二种方法保留了样式而且可以自行选择显示哪些内容来预览，推荐使用此方法，第一种方法显示的每篇文章的预览都是一样的高度，第三种则需要在文章的[front-matter]里面添加。<br>综合考虑的话还是建议使用第二种方法，毕竟以后各种插件也能准确的获取到你想要输出的本篇的描述信息。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo主页</tag>
      
      <tag>fluid主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitLab在电脑本地SSH配置指南</title>
    <link href="/2024/09/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/GitLab%E4%BD%BF%E7%94%A8/GitLab%E5%9C%A8%E7%94%B5%E8%84%91%E6%9C%AC%E5%9C%B0SSH%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <url>/2024/09/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/GitLab%E4%BD%BF%E7%94%A8/GitLab%E5%9C%A8%E7%94%B5%E8%84%91%E6%9C%AC%E5%9C%B0SSH%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="GitLab在电脑本地SSH配置指南"><a href="#GitLab在电脑本地SSH配置指南" class="headerlink" title="GitLab在电脑本地SSH配置指南"></a>GitLab在电脑本地SSH配置指南</h1><h2 id="我问GPT"><a href="#我问GPT" class="headerlink" title="我问GPT:"></a>我问GPT:</h2><p>我想和你聊聊有关使用gitlab的问题，我有帐号了，也有仓库了，例如这是我的仓库地址<a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#108;&#97;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#108;&#97;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:libao21&#x2F;lck.git<br>首先第一步我要怎要在本地电脑创建一个密码与仓库配对，以后在本地操作推送文件</p><h2 id="ChatGPT答"><a href="#ChatGPT答" class="headerlink" title="ChatGPT答:"></a>ChatGPT答:</h2><p>要在本地电脑上配置 GitLab 仓库的推送权限，建议使用 SSH 密钥对（而不是密码），这样可以安全地管理与仓库的连接。以下是具体步骤：</p><ol><li><strong>生成 SSH 密钥对</strong><br>在本地电脑上打开命令行或终端，执行以下命令来生成 SSH 密钥：<br>C:\Users\Administrator.ssh来到这个目录下执行git打命令<br>用git软件<br>首先输入下面<figure class="highlight apache"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4zt4wemfcwb3cr"></i><span>APACHE</span><div class="collapse show" id="collapse-4zt4wemfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span>-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">&quot;XXXXXXXX@qq.com&quot;</span><br></code></pre></td></tr></table></div></figure>其中 <code>&quot;XXXXXXXX@qq.com&quot;</code> 需要替换为你的 GitLab 注册邮箱。然后会提示你选择存储密钥的位置，直接按回车键使用默认路径。接着可以选择是否设置密码保护密钥（可以为空，但建议设置一个）。2. <strong>添加 SSH 密钥到 SSH Agent</strong> 确保 <code>ssh-agent</code> 正在运行，并添加你的 SSH 私钥到 Agent：</li></ol><ul><li>注意</li><li>如果你电脑上有github和gitlab其它帐号已配对的ssh就要定义密钥名字，例如我开第一步出现时我输入id_rsa_lab6435</li><li>然后一直下一步，完成后一般会在C:\Users\Administrator.ssh这个目录下生成两个名为<br>id_rsa_lab6435<br>id_rsa_lab6435.pub<br><img src="https://bktu-2f513f.gitlab.io/imgs/2024-09-25/4Jl6Ou0lGa96E8S2.png" alt="输入图片说明"><br>继续执行下面代码<figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o6yvkdmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-o6yvkdmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_rsa_lab6435<br></code></pre></td></tr></table></div></figure></li></ul><ol start="3"><li><strong>如果要将 SSH 公钥添加到 GitLab</strong> 找到生成的公钥文件，默认位于 <code>~/.ssh/id_rsa_lab6435.pub</code>。你可以用以下命令查看公钥内容：</li></ol><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ykbkjzmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-ykbkjzmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa_lab6435.pub<br></code></pre></td></tr></table></div></figure><p>复制公钥内容。</p><p>然后登录到 GitLab，按照以下步骤将公钥添加到你的 GitLab 帐户：</p><ul><li><p>点击右上角头像，选择 <strong>Preferences</strong> 。</p></li><li><p>在左侧菜单中选择 <strong>SSH Keys</strong> 。</p></li><li><p>将复制的公钥粘贴到文本框中，设置一个有效期限或保持为空，并点击 <strong>Add key</strong> 。</p></li></ul><ol start="4"><li><strong>测试 SSH 连接</strong><br>执行以下命令，测试是否成功与 GitLab 通过 SSH 建立连接：</li></ol><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-eyq1womfcwb3cr"></i><span>NGINX</span><div class="collapse show" id="collapse-eyq1womfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gitlab</span>.com<br></code></pre></td></tr></table></div></figure><p>成功的话，你会看到类似如下的提示信息：</p><figure class="highlight autoit"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xfizipmfcwb3cr"></i><span>AUTOIT</span><div class="collapse show" id="collapse-xfizipmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">Welcome <span class="hljs-keyword">to</span> GitLab, <span class="hljs-symbol">@your_username</span>!<br></code></pre></td></tr></table></div></figure><ol start="5"><li><strong>克隆仓库或推送代码</strong><br>现在你可以在本地克隆仓库或推送代码。克隆仓库命令如下：</li></ol><p>以下是克隆主分支到本地</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ckqk5jmfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-ckqk5jmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitlab.com:libao21/lck.git<br></code></pre></td></tr></table></div></figure><p>也可以指定分支：例</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xr2552mfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-xr2552mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> main git@gitlab.com:libao21/bktu.git<br></code></pre></td></tr></table></div></figure><p>或者</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-23m322mfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-23m322mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@gitlab.com:libao21/bktu.git<br></code></pre></td></tr></table></div></figure><p>顺便加上切换分支的命令</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-oxjftlmfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-oxjftlmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout befe</span><br></code></pre></td></tr></table></div></figure><p>或都</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hdpck9mfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-hdpck9mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><p>在你完成修改并推送代码时，直接使用以下命令即可：<br>部署上传更新与github一</p><figure class="highlight armasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ligbaymfcwb3cr"></i><span>ARMASM</span><div class="collapse show" id="collapse-ligbaymfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;上传这可以随便写&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> origin main<br></code></pre></td></tr></table></div></figure><p>这样，你就可以在本地推送文件到 GitLab 仓库了。<br>当你完成上面，第一次可能成功连到仓库！<br>但关闭了git命令软件下次打开又要重新打一轮这步骤</p><p>下面是我的经验：</p><p>如果你电脑有其它帐号<br>要在C:\Users\Administrator.ssh目录新建一个文件config或者在已有的文件config加入以下内容：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xn3dwemfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-xn3dwemfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># gitlab帐号</span><br>Host gitlab.com<br>  HostName gitlab.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  IdentityFile ~/.ssh/id_rsa_lab6435<br></code></pre></td></tr></table></div></figure><p>如果已有，就加入即可，没有就新建！以后再要绑定其它帐号也是同样方法！<br>好啦！</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>GitLab使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个git帐号在本地电脑设置密码</title>
    <link href="/2024/09/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E4%B8%A4%E4%B8%AAgit%E5%B8%90%E5%8F%B7%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81/"/>
    <url>/2024/09/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/%E4%B8%A4%E4%B8%AAgit%E5%B8%90%E5%8F%B7%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="两个git帐号在本地电脑设置密码"><a href="#两个git帐号在本地电脑设置密码" class="headerlink" title="两个git帐号在本地电脑设置密码"></a>两个git帐号在本地电脑设置密码</h1><h2 id="一、生成两个SSH-key"><a href="#一、生成两个SSH-key" class="headerlink" title="一、生成两个SSH key"></a>一、生成两个<a href="https://so.csdn.net/so/search?q=SSH&spm=1001.2101.3001.7020">SSH</a> key</h2><p>为了举例方便，这里使用“one”和“two”两个账户。下同。<br>第一个帐号</p><figure class="highlight angelscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3frw1kmfcwb3cs"></i><span>ANGELSCRIPT</span><div class="collapse show" id="collapse-3frw1kmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh-keygen -t rsa -C <span class="hljs-symbol">lifuaini2019@</span>gmail.com<br></code></pre></td></tr></table></div></figure><p>第二个帐号</p><figure class="highlight angelscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-prc3g4mfcwb3cs"></i><span>ANGELSCRIPT</span><div class="collapse show" id="collapse-prc3g4mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh-keygen -t rsa -C <span class="hljs-symbol">lizuyu0910@</span>qq.com<br></code></pre></td></tr></table></div></figure><p>也可以用一这样的命令后面直接</p><p>请把帐号改成自已的哦！！！</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>在第一个对话的时候输入重命名（id_rsa和id_rsa_zy），这样会生成两份SSH key，包含私钥和公钥共4个文件。<br>一般生成在这个路径下：C:\Users\Administrator.ssh</p><h2 id="二、添加私钥-github克隆到本地"><a href="#二、添加私钥-github克隆到本地" class="headerlink" title="二、添加私钥 github克隆到本地"></a>二、添加私钥 github克隆到本地</h2><p>第一步先输入</p><p><code>id_rsa_zy</code></p><h1 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a><strong>创建config文件</strong></h1><p>在<code>~/.ssh</code>目录执行命令下创建一个<code>config</code>文件</p><p>输入下面内容</p><figure class="highlight leaf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mmjafxmfcwb3cs"></i><span>LEAF</span><div class="collapse show" id="collapse-mmjafxmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-punctuation">#</span><span class="hljs-keyword">one</span><span class="hljs-params">([<span class="hljs-variable">lb</span>@<span class="hljs-variable">gmail</span>.<span class="hljs-variable">com</span>]<span class="hljs-params">(<span class="hljs-variable">mailto</span>:<span class="hljs-variable">lb</span>@<span class="hljs-variable">gmail</span>.<span class="hljs-variable">com</span>)</span>)</span><br><br>Host [lb.github.com](http://lb.github.com/)<br>HostName [github.com](http://github.com/)<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>User lb<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">two</span><span class="hljs-params">(<span class="hljs-variable">zy</span>@ [<span class="hljs-variable">gmail</span>.<span class="hljs-variable">com</span>]<span class="hljs-params">(<span class="hljs-variable">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-variable">gmail</span>.<span class="hljs-variable">com</span><span class="hljs-operator">/</span>)</span>)</span><br><br>Host [zy.github.com](http://zy.github.com/)<br>HostName [github.com](http://github.com/)<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa_zy<br>User zy<br></code></pre></td></tr></table></div></figure><p>首先给这个仓库设置局部的用户名和邮箱：</p><ul><li>必须要在所属的仓库目录下执行<figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gdux39mfcwb3cs"></i><span>PGSQL</span><div class="collapse show" id="collapse-gdux39mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name &quot;lb_name&quot; ; git config <span class="hljs-keyword">user</span>.email &quot;lb_email&quot;<br></code></pre></td></tr></table></div></figure></li></ul><p>第二个帐号：</p><ul><li>必须要在所属的仓库目录下执行<figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-agevqkmfcwb3cs"></i><span>PGSQL</span><div class="collapse show" id="collapse-agevqkmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>git config <span class="hljs-keyword">user</span>.name &quot;zy_name&quot; ; git config <span class="hljs-keyword">user</span>.email &quot;zy_email&quot;<br></code></pre></td></tr></table></div></figure></li></ul><h2 id="可以用下面命令测试是否边接正常"><a href="#可以用下面命令测试是否边接正常" class="headerlink" title="可以用下面命令测试是否边接正常"></a>可以用下面命令测试是否边接正常</h2><figure class="highlight vim"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-uqlc46mfcwb3cs"></i><span>VIM</span><div class="collapse show" id="collapse-uqlc46mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ssh -T <span class="hljs-keyword">lb</span>.github.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></div></figure><p>第二个帐号同样</p><figure class="highlight excel"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-35yvanmfcwb3cs"></i><span>EXCEL</span><div class="collapse show" id="collapse-35yvanmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh -<span class="hljs-built_in">T</span> zy.github.com<br></code></pre></td></tr></table></div></figure><p><img src="https://s2.loli.net/2024/12/20/xw58WzaFviCYZug.png" alt="image-20241220192701214"></p><p>例如上图，绿色打叉显示的是失败的,红色打钩是正常的</p><p>六、使用</p><p>1、clone到本地</p><p>(1)原来一个帐号的写法：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-sf77ugmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-sf77ugmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>上面写法默认克隆主main的分支到本的！</p><p>(2)现在的写法：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tevreqmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-tevreqmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@lb.github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>上面默认克隆主main的分支到本的！</p><hr><p>原来的克隆分支到本地的写法是:</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gle2pimfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-gle2pimfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>现在的新写法是克隆分支befe</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vtv2zumfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-vtv2zumfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@lb.github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><hr><h2 id="第二个帐号同样这样改写"><a href="#第二个帐号同样这样改写" class="headerlink" title="第二个帐号同样这样改写"></a>第二个帐号同样这样改写</h2><p>原来克隆主分支：main</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3sqh6kmfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-3sqh6kmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:lizuyu0910/zybk.git<br></code></pre></td></tr></table></div></figure><p>现克隆主分支是：main</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ylfspemfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-ylfspemfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@zy.github.com:lizuyu0910/zybk.git<br></code></pre></td></tr></table></div></figure><p>原来克隆分支:befe</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1wbs91mfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-1wbs91mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@github.com:lizuyu0910/zybk.git<br></code></pre></td></tr></table></div></figure><p>现克隆分支：befe</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qi2084mfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-qi2084mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe git@zy.github.com:lizuyu0910/zybk.git<br></code></pre></td></tr></table></div></figure><h3 id="如果你不在-befe-分支上，切换到该分支："><a href="#如果你不在-befe-分支上，切换到该分支：" class="headerlink" title="如果你不在 befe 分支上，切换到该分支："></a>如果你不在 <code>befe</code> 分支上，切换到该分支：</h3><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0g2ffbmfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-0g2ffbmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git checkout befe</span><br></code></pre></td></tr></table></div></figure><p>切换主分支</p><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-iu6xkumfcwb3cs"></i><span>CSS</span><div class="collapse show" id="collapse-iu6xkumfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></div></figure><p>再加一个，如果你是玩hexo博客的<br>如果你本地有两个 Hexo 博客，并且你想要修改其中一个博客的端口，你需要分别编辑两个博客项目的 <code>_config.yml</code> 配置文件。以下是具体步骤：</p><p>找到 其中一个<code>server</code> 部分，并将 <code>port</code> 的值更改为你想要的端口，例如 4001：</p><figure class="highlight yaml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7dse1smfcwb3cs"></i><span>YAML</span><div class="collapse show" id="collapse-7dse1smfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">4001</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br></code></pre></td></tr></table></div></figure><p>Hexo在部署到Github后CNAME文件会消失或改变的解决方法<br>问题经过:<br>在转移网站后,在 Github网页上修改CNAME文件中指向的域名后,重新部署Hexo时发现CNAME指向的域名是之前的网站,而没有编程修改后的域名.排查后发现:</p><p>Hexo在Github上部署后,如果配置了一个自定义域名时,会自动在项目仓库根目录想新建一个CNAME文件,但是重新部署后CNAME会消失或者变成修改之前的状态,导致需要再次手动修改.</p><p>解决方法:<br>直接修改 hexo目录 下 source 文件夹内的CNAME文件的内容,用编辑器打开,第一行输入需要配置的域名.这样在部署的时候CNAME 文件会自动部署到Github.不用再次手动修改.<br>————————————————</p><p>如果你想要直接拉取远程仓库的最新更新并覆盖本地的文件，可以使用 <code>git pull --rebase</code> 命令。这个命令会获取最新的远程更改，并将它们应用到你的当前分支上，而不会合并历史记录。</p><p>以下是该命令的格式：</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-w6nqifmfcwb3cs"></i><span>ADA</span><div class="collapse show" id="collapse-w6nqifmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin befe</span><br></code></pre></td></tr></table></div></figure><p>这里解释一下各个部分：</p><ul><li><code>git pull</code> 是用来从远程仓库获取最新更改并合并到本地分支的命令。</li><li><code>-rebase</code> 选项告诉 Git 使用变基（rebase）而不是合并（merge）来应用更改。</li><li><code>origin</code> 是远程仓库的别名，通常对应于你克隆仓库时使用的远程仓库的名称。</li><li><code>bef</code> 是你想要拉取更新的分支名称。</li></ul><p>请注意以下几点：</p><ol><li><strong>变基</strong>：<code>-rebase</code> 选项可能会改变提交的历史记录，这可能会影响依赖于这些提交的其他开发者的工作。在使用 <code>-rebase</code> 时，务必确保所有团队成员都已同步，以避免冲突。</li><li><strong>冲突处理</strong>：如果发生冲突，你需要手动解决这些冲突，然后继续变基过程。</li><li><strong>安全性</strong>：如果你对变基不熟悉，或者你的工作流程不支持变基，可能更倾向于使用 <code>git pull --merge</code>，它会合并远程更改而不是变基。</li></ol><p>使用 <code>--rebase</code> 的命令如下：</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lonbr4mfcwb3cs"></i><span>ADA</span><div class="collapse show" id="collapse-lonbr4mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin befe</span><br></code></pre></td></tr></table></div></figure><p>这条命令将会：</p><ul><li>获取远程仓库 <code>origin</code> 上 <code>bef</code> 分支的最新更改。</li><li>变基你的本地 <code>bef</code> 分支，将远程更改应用到本地分支的顶部。</li><li>如果出现冲突，将提示你解决冲突。解决冲突后，你可以使用以下命令继续：</li></ul><figure class="highlight kotlin"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ptwy8omfcwb3cs"></i><span>KOTLIN</span><div class="collapse show" id="collapse-ptwy8omfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">git rebase --<span class="hljs-keyword">continue</span><br><br></code></pre></td></tr></table></div></figure><p>重复这个过程，直到所有的冲突都得到解决，并且变基过程完成。</p><h2 id="我的总结"><a href="#我的总结" class="headerlink" title="我的总结"></a>我的总结</h2><p>我在两个电脑间经常做出 hexo 博客更新，源文件也就是原md文件我都是备分到befe分支里的<br>例如A和B电脑<br>如果我在A电脑做出更新后，回到B电脑<br>首先在博客根目录里先执拉取最新文件到本地</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fq0v83mfcwb3cs"></i><span>ADA</span><div class="collapse show" id="collapse-fq0v83mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin befe</span><br></code></pre></td></tr></table></div></figure><p>接取最新的分befe分支到本地合并，如果失败就执行：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-amnvnymfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-amnvnymfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash</span><br></code></pre></td></tr></table></div></figure><p>执行一个上面这行<br>再执行上面第一行即可：</p><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-cykswjmfcwb3cs"></i><span>ADA</span><div class="collapse show" id="collapse-cykswjmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git pull <span class="hljs-comment">--rebase origin befe</span><br></code></pre></td></tr></table></div></figure><p>即可！</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitLab Pages托管静态网站.yml文件文件代码</title>
    <link href="/2024/09/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/GitLab%E4%BD%BF%E7%94%A8/%E4%BD%BF%E7%94%A8GitLab%20Pages%E6%89%98%E7%AE%A1%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99.yml%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81/"/>
    <url>/2024/09/25/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/GitLab%E4%BD%BF%E7%94%A8/%E4%BD%BF%E7%94%A8GitLab%20Pages%E6%89%98%E7%AE%A1%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99.yml%E6%96%87%E4%BB%B6%E6%96%87%E4%BB%B6%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="使用GitLab-Pages托管静态网站-yml文件文件代码"><a href="#使用GitLab-Pages托管静态网站-yml文件文件代码" class="headerlink" title="使用GitLab Pages托管静态网站.yml文件文件代码"></a>使用GitLab Pages托管静态网站.yml文件文件代码</h1><p>本文介绍了如何使用GitLab Pages免费托管静态网站，包括GitLab Pages的概念、支持的静态站点生成器以及详细的使用步骤，如开通账号、创建仓库、配置.gitlab-ci.yml文件和访问项目。</p><h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><ul><li><a href="#_5">前言</a></li><li><a href="#GitLab_Pages_11">一、GitLab Pages是什么？</a></li><li><a href="#_24">二、使用步骤</a></li><li><ul><li><a href="#1Git_25">1.开通账号，创建Git仓库同步项目</a><ul><li><a href="#2gitlabciymlGitLab_Pages_31">2.添加.gitlab-ci.yml文件，开启GitLab Pages</a></li><li><a href="#3_52">3.部署成功之后访问项目</a></li></ul></li></ul></li><li><a href="#_58">总结</a></li></ul><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们日常的程序员养成过程中，会产生一些产物，自己做的一些小网站，小页面之类，一般都是在本地调试访问，一旦我们想让其他朋友也可以随时访问，就需要单独在<a href="https://so.csdn.net/so/search?q=%E5%85%AC%E6%9C%89%E4%BA%91&spm=1001.2101.3001.7020">公有云</a>上买一个服务器去部署，一是需要付费，二是我们调试页面访问量不多，单独搞个服务器部署有点浪费。这样看来，使用Git网站的Pages服务进行静态网页托管就是一个不错的选择。</p><hr><h2 id="一、GitLab-Pages是什么？"><a href="#一、GitLab-Pages是什么？" class="headerlink" title="一、GitLab Pages是什么？"></a>一、<a href="https://so.csdn.net/so/search?q=GitLab&spm=1001.2101.3001.7020">GitLab</a> Pages是什么？</h2><p>使用 GitLab Pages，可以直接从 GitLab 的存储库中发布静态网站。</p><ul><li>用于任何个人或商业网站。</li><li>使用任何静态站点生成器 (SSG) 或纯 HTML。</li><li>为您的项目、组或用户帐户创建网站。</li><li>在您自己的 GitLab 实例或 GitLab.com 上免费托管您的网站。</li><li>连接您的自定义域和 TLS 证书。</li><li>将任何许可归于您的内容。</li><li>Pages 支持的 SSG 示例</li></ul><p>要使用 Pages 发布网站，您可以使用任何静态网站生成器，例如 Gatsby、Jekyll、Hugo、Middleman、Harp、Hexo 或 Brunch。您还可以发布任何直接用纯 HTML、CSS 和 JavaScript 编写的网站。<br>Pages 不支持动态服务器端处理，例如，根据.php需要.asp。与动态网站相比，了解更多关于 静态网站的信息。</p><h2 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h2><h3 id="1-开通账号，创建Git仓库同步项目"><a href="#1-开通账号，创建Git仓库同步项目" class="headerlink" title="1.开通账号，创建Git仓库同步项目"></a>1.开通账号，创建Git仓库同步项目</h3><p>首先注册一个GitLab账号，登录首页之后新建项目，项目标识串可以命名为：[注册账户名].gitlab.io，这样后续就可以直接通过这个地址访问到项目了。<br><img src="https://bktu-2f513f.gitlab.io/g-lab-tu/fd2ed3d9c028f92f83354c039c3aa195.png" alt="在这里插入图片描述"><br>接下来使用打开刚刚创建好的项目，拿到仓库的地址，在电脑本地使用Git将项目Clone本地，这里是使用的Visual Studio Code中的的Git克隆功能，需要先配置好你的Git环境和账号，之后在本地进行项目的修改和提交。<br><img src="https://bktu-2f513f.gitlab.io/g-lab-tu/f1da5d8c2495d7fa40d02987cfbf0d07.png" alt="在这里插入图片描述"></p><h3 id="2-添加-gitlab-ci-yml文件，开启GitLab-Pages"><a href="#2-添加-gitlab-ci-yml文件，开启GitLab-Pages" class="headerlink" title="2.添加.gitlab-ci.yml文件，开启GitLab Pages"></a>2.添加.gitlab-ci.yml文件，开启GitLab Pages</h3><p>启用之前需要在项目中添加.gitlab-ci.yml文件，来配置项目的所在位置目录，在项目设置的CI&#x2F;CD中编辑器下添加对应脚本代码，根据项目类型不同，添加的脚本也不同，主要是设置编译方式和输出目录，可以点击浏览模板查找对应示例。<br><img src="https://bktu-2f513f.gitlab.io/g-lab-tu/6ceadf3599fa28e3513d718d5becabf1.png" alt="在这里插入图片描述"><br>纯html项目的脚本示例：</p><figure class="highlight nestedtext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-tb0221mfcwb3cr"></i><span>NESTEDTEXT</span><div class="collapse show" id="collapse-tb0221mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">pages</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deploy</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir .public</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cp -r ./* .public</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">rm -rf public</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mv .public public</span><br>  <span class="hljs-attribute">artifacts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">public</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH</span><br></code></pre></td></tr></table></div></figure><h3 id="3-部署成功之后访问项目"><a href="#3-部署成功之后访问项目" class="headerlink" title="3.部署成功之后访问项目"></a>3.部署成功之后访问项目</h3><p>在添加.gitlab-ci.yml文件之后，GitLab识别之后会依据脚本自动执行，在每次更新项目时都会重新执行脚本，在流水线下可以查看详细部署情况，部署成功之后，就可以通过我们设置的项目路径：[注册账户名].gitlab.io来进行访问了。</p><hr><h3 id="master-分支下的文件也包含在部署中"><a href="#master-分支下的文件也包含在部署中" class="headerlink" title="master 分支下的文件也包含在部署中"></a>master 分支下的文件也包含在部署中</h3><p>了将 master 分支下的文件也包含在部署中，你需要在 rules 部分修改条件判断，使其在 master 分支的提交时执行部署脚本。以下是如何修改你的GitLab CI&#x2F;CD配置文件的示例：</p><figure class="highlight nestedtext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-votl58mfcwb3cr"></i><span>NESTEDTEXT</span><div class="collapse show" id="collapse-votl58mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">pages</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">deploy</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir .public</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cp -r ./* .public</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">rm -rf public</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mv .public public</span><br>  <span class="hljs-attribute">artifacts</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">public</span><br>  <span class="hljs-attribute">rules</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == &#x27;master&#x27;</span><br><br></code></pre></td></tr></table></div></figure><p>在这个修改后的配置中，rules 部分包含两个条件：</p><p>$CI_COMMIT_BRANCH &#x3D;&#x3D; $CI_DEFAULT_BRANCH：这保持原来的逻辑，即默认分支（通常为 master 或 main，取决于你的项目设置）的提交将触发部署。<br>$CI_COMMIT_BRANCH &#x3D;&#x3D; ‘master’：这个新条件确保当分支名为 master 时，也会执行部署脚本。<br>这样，无论默认分支是什么，或者你提交的是 master 分支的更改，部署流程都会被执行。</p><p>请确保你的 CI_DEFAULT_BRANCH 变量设置正确，这样配置才能按预期工作。如果你不设置 CI_DEFAULT_BRANCH，那么通常情况下 CI_COMMIT_BRANCH &#x3D;&#x3D; ‘master’ 就足够了。</p><p>注意：如果你的项目默认分支不是 master 而是其他名称（如 main），请相应地调整上述配置中的条件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是使用GitLab Pages托管静态网站的全部内容了，本文仅仅简单介绍了GitLab Pages的使用，对于在过程中使用到的Git相关的操作没有做过多讲解，不了解Git使用方法的同学可以查找Git使用相关教程进行学习。</p>]]></content>
    
    
    <categories>
      
      <category>GitLab使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>md即markdown文件的基本常用编写语法</title>
    <link href="/2024/09/24/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/md%E5%8D%B3markdown%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E7%BC%96%E5%86%99%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/09/24/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/md%E5%8D%B3markdown%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B8%B8%E7%94%A8%E7%BC%96%E5%86%99%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="X-md即markdown文件的基本常用编写语法"><a href="#X-md即markdown文件的基本常用编写语法" class="headerlink" title="X.md即markdown文件的基本常用编写语法"></a>X.md即markdown文件的基本常用编写语法</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="序言"><a href="#序言" class="headerlink" title="序言:"></a>序言:</h2><p>很久没有写博客了，感觉只要是不写博客，人就很变得很懒，学的知识点感觉还是记不住，渐渐地让我明白，看的越多，懂的越少（你这话不是有毛病吗？应该是看的越多，懂的越多才对），此话怎讲，当你在茫茫的前端知识库里面东看看，西看看的时候，很快就被海量的知识给淹没了，根本就不知道哪些是对的，哪些是错的，感觉好像这个也懂了，那个也懂了，但是真正写起来，脑子又一片空白，又好像什么都不懂，这种状态时有发生，这就叫不懂装懂，最根本的原因就是看的太多，写的太少，所以为了改掉这样毛病，把被动学习变成主动学习，接下来的日子，多写写，即使是写一些学习工作中遇到的坑也是好的，没事翻出来看看，还可以加深印象，好了，废话到处！</p><p>起因：</p><p>因为现在的前端基本上都用上了前端构建工具，那就难免要写一些readme等等的说明性文件，但是这样的文件一般都是.md的文件，编写的语法自然跟其他格式的文件有所区别，置于为什么要用这种格式的文件，不要问我，我也不知道，大家都这么用，跟着用就对了，如果有大神知道的，不妨告知小弟，本文也是我学习写markdown文件的一个笔记吧，仅供参考！</p><p>正文：</p><p>1、标题的几种写法：</p><p>第一种：</p><p><img src="https://app.fekepj.com/tu/bkt001/f2ed5a631625906b7789b609731a4193.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/41ece93bad17e726b03ac58e66ca20a0.png"></p><p>前面带#号，后面带文字，分别表示h1-h6,上图可以看出，只到h6，而且h1下面会有一条横线，注意，#号后面有空格</p><p>第二种：</p><p><img src="https://app.fekepj.com/tu/bkt001/f59a2283bc30cb04713b87370e3adabf.png"></p><p>&nbsp;   </p><p><img src="https://app.fekepj.com/tu/bkt001/cb584b1ee202c0c92e6aff95ec6f659e.png"></p><p>这种方式好像只能表示一级和二级标题，而且&#x3D;和-的数量没有限制，只要大于一个就行</p><p>第三种：</p><p><img src="https://app.fekepj.com/tu/bkt001/a22993be2a7baf921902c317cd8e9517.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/ce069df1d0ce1926515a4789f24cff7a.png"></p><p>这里的标题支持h1-h6，为了减少篇幅，我就偷个懒，只写前面二个，这个比较好理解，相当于标签闭合，注意，标题与#号要有空格</p><p>那既然3种都可以使用，可不可以混合使用呢？我试了一下，是可以的，但是为了让页面标签的统一性，不建议混合使用，推荐使用第一种，比较简洁，全面</p><p>为了搞清楚原理，我特意在网上搜一下在线编写markdown的工具，发现实际上是把这些标签最后转化为html标签，如图：</p><p><img src="https://app.fekepj.com/tu/bkt001/7e00926e04789aad6164b7da22182fc2.png"></p><p>在线地址请看这里： <a href="http://tool.oschina.net/markdown/">markdown在线编辑</a> （只是想看看背后的转换原理，没有广告之嫌）</p><p>2、列表</p><p>我们都知道，列表分为有序列表和无序列表，下面直接展示2种列表的写法：</p><p><img src="https://app.fekepj.com/tu/bkt001/f8b713e274fdc13aa1f55c8c0acf4f5a.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/108786213f67f5d95b811c6cd7375bae.png"></p><p>可以看到，无序列表可以用* ， + ， — 来创建，用在线编辑器看，实际上是转换成了ul&gt;li ，所以使用哪个都可以，推荐使用*吧</p><p><img src="https://app.fekepj.com/tu/bkt001/202f862274ba8c00c1fab46df4490ecf.png"></p><p>&nbsp;   </p><p><img src="https://app.fekepj.com/tu/bkt001/084d468e6bc474a01468abbfa4eee6c4.png"></p><p>有序列表就相对简单一点，只有这一种方式，注意，数字后面的点只能是英文的点，特别注意，有序列表的序号是根据第一行列表的数字顺序来的，比如说：</p><p><img src="https://app.fekepj.com/tu/bkt001/be6d8b0c69b10a2f3eae6bb29358a5e6.png"></p><p>&nbsp; </p><p><img src="https://app.fekepj.com/tu/bkt001/38a5647f4b9a2263d37aba81b70097ca.png"></p><p>&nbsp; </p><p><img src="https://app.fekepj.com/tu/bkt001/be5baea12cebb58e6e613625565a6ac1.png"></p><p>&nbsp; </p><p><img src="https://app.fekepj.com/tu/bkt001/cff63f0bcc15d480f890b0b176f07559.png"></p><p>第一组本来是3 2 1 倒序，但是现实3 4 5 ，后面一组 序号是乱的， 但是还是显示 3 4 5 ，这点必须注意了</p><p>3、区块引用</p><p>比如说，你想对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语句</p><p><img src="https://app.fekepj.com/tu/bkt001/c02cb3524fdc68b8fa151bdc5d3ba678.png"></p><p>&nbsp; </p><p><img src="https://app.fekepj.com/tu/bkt001/9978ebe3defae1acafb90e9c88e7873b.png"></p><p>无序列表下方的便是引用，可以有多种用途，看你的需求了，用法就是在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格</p><p>引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等，看看下图：</p><p><img src="https://app.fekepj.com/tu/bkt001/b2fb89cb4f2346d752b8855a4f3d39cc.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/4de9001ac0a8473b521d2b3bb91f7a64.png"></p><p>将上面的代码稍微改一下，全部加上引用标签，就变成了一个大的引用，还有引用里面还有引用，那引用嵌套引用还没有别的写法呢？</p><p><img src="https://app.fekepj.com/tu/bkt001/b6b963fa427caf6771100d5ae6676bce.png"></p><p>&nbsp;   </p><p><img src="https://app.fekepj.com/tu/bkt001/56b0e28ebd482670b506b23482a1baac.png"></p><p>上图可以看出，想要在上一次引用中嵌套一层引用，只需多加一个&gt;，理论上可以无限嵌套，我就不整那么多了，注意：多层嵌套的&gt;是不需要连续在一起的，只要在一行就可以了，中间允许有空格，但是为了好看，还是把排版搞好吧</p><p>4、华丽的分割线</p><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p><p><img src="https://app.fekepj.com/tu/bkt001/5da3ad04b885755af62e517ca539b530.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/debfb8c6e9aac4fdabf375d2713f3ade.png"></p><p>应该看得懂吧，但是为了代码的排版好看，你们自己定规则吧，前面有用到星号，建议用减号</p><p>5、链接</p><p>支持2种链接方式：行内式和参数式，不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p><img src="https://app.fekepj.com/tu/bkt001/9a4e9492bbd89c77f5f99c1be50401b0.png"></p><p>&nbsp;   </p><p><img src="https://app.fekepj.com/tu/bkt001/c9fd3c5389747e4a56cf53042d292655.png"></p><p>上图可知，行内式的链接格式是：链接的文字放在[]中，链接地址放在随后的（）中，举一反三，经常出现的列表链接就应该这样写：</p><p><img src="https://app.fekepj.com/tu/bkt001/396ff21bfee217e0373915f2bf157814.png"></p><p>&nbsp; </p><p><img src="https://app.fekepj.com/tu/bkt001/6fe7940269e5173036fca7240c98c5e4.png"></p><p>链接还可以带title属性，好像也只能带title，带不了其他属性，注意，是链接地址后面空一格，然后用引号引起来</p><p><img src="https://app.fekepj.com/tu/bkt001/90bdf12741bf16e62188625b58623d8b.png"></p><p>这是行内式的写法，参数式的怎么写：</p><p><img src="https://app.fekepj.com/tu/bkt001/a89f201b6479e1aeaa8231ad5d5ba4d1.png"></p><p>&nbsp;   </p><p><img src="https://app.fekepj.com/tu/bkt001/8d48d25adb822507a527433096afc819.png"></p><p>这就好理解了，就是把链接当成参数，适合多出使用相同链接的场景，注意参数的对应关系，参数定义时，这3种写法都可以：</p><p>[foo]: <a href="http://example.com/">http://example.com/</a> “Optional Title Here”</p><p>[foo]: <a href="http://example.com/">http://example.com/</a> ‘Optional Title Here’</p><p>[foo]: <a href="http://example.com/">http://example.com/</a> (Optional Title Here)</p><p>还支持这种写法，如果你不想混淆的话：</p><p>[foo]: &lt;<a href="http://example.com/">http://example.com/</a>&gt; “Optional Title Here”</p><p>其实还有一种隐式链接的写法，但是我觉得那种写法不直观，所以就不写了，经常用的一般就上面2种，如果你想了解隐式链接，可以看我文章最后放出的参考地址</p><p>6、图片</p><p>图片也有2种方式：行内式和参数式，</p><p><img src="https://app.fekepj.com/tu/bkt001/1ec2474a4caf50708e002c6acd029135.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/e6eb0fd3195f3960e9698078cb4237b8.png"></p><p>用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！（这是必须的），没什么好说的</p><p>7、代码框</p><p>这个就比较重要了，很多时候都需要展示出一些代码</p><p>如果代码量比较少，只有单行的话，可以用单反引号包起来，如下：</p><p><img src="https://app.fekepj.com/tu/bkt001/58e3d1c28f85e315deb0598f2607a407.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/d3ae45387053dd7b74a16756dfa48361.png"></p><p>要是多行这个就不行了，多行可以用这个：</p><p><img src="https://app.fekepj.com/tu/bkt001/b508729c735cdfa8c4935b5608bd2e0e.png"></p><p>&nbsp;   </p><p><img src="https://app.fekepj.com/tu/bkt001/8f56311bc4957f68f0779faf76ae0570.png"></p><p>多行用三个反引号，如果要写注释，可以在反引号后面写</p><p>8、表格</p><p>这个写的有点麻烦，注意看</p><p><img src="https://app.fekepj.com/tu/bkt001/d8b71364a405fe77fce91765d97ec77a.png"></p><p>&nbsp;   </p><p><img src="https://app.fekepj.com/tu/bkt001/7fa416bf94e020d94bc4369403de4a04.png"></p><p>从这3种不同写法看，表格的格式不一定要对的非常起，但是为了好看，对齐肯定是最好的，第一种的分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中，还是有点意思的，不过现实出来的结果是，表格外面并没有线框包起来，不知道别人的怎么弄的</p><p>9、强调</p><p><img src="https://app.fekepj.com/tu/bkt001/732a1d4fff9f7227bc613286fcda23b0.png"></p><p>&nbsp;    </p><p><img src="https://app.fekepj.com/tu/bkt001/94ca053916dd2ea61b04b9d741950d91.png"></p><p>一个星号或者是一个下划线包起来，会转换为&lt;em&gt;倾斜，如果是2个，会转换为&lt;strong&gt;加粗</p><p>10、转义</p><p><img src="https://app.fekepj.com/tu/bkt001/e05b3a12a4c9f5ff9c1fa9c923cd5a68.png"></p><p>&nbsp;    </p><p><img src="https://app.fekepj.com/tu/bkt001/8013c899aa5512caed302b5576ec7e1d.png"></p><p>就不一一列举了，基本上跟js转义是一样的</p><p>11、删除线</p><p><img src="https://app.fekepj.com/tu/bkt001/6f0f09efbe7c3e6043f977b1ad479b5d.png"></p><p>&nbsp;  </p><p><img src="https://app.fekepj.com/tu/bkt001/6c916ef78bdcc46930f921f1ce04f258.png"></p><p>常用的基本上就这些了，如果还有一些常用的，可以跟我留言，我补充上去，我觉得图文并茂才是高效学习的正确姿势，但愿为你的学习带来帮助！</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Github博客教程-添加分类</title>
    <link href="/2024/09/22/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB/"/>
    <url>/2024/09/22/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github博客教程-添加分类"><a href="#Hexo-Github博客教程-添加分类" class="headerlink" title="Hexo+Github博客教程-添加分类"></a>Hexo+Github博客教程-添加分类</h1><h2 id="1、创建“分类”选项"><a href="#1、创建“分类”选项" class="headerlink" title="1、创建“分类”选项"></a>1、创建“分类”选项</h2><h2 id="1-1-生成“分类”页并添加tpye属性"><a href="#1-1-生成“分类”页并添加tpye属性" class="headerlink" title="1.1 生成“分类”页并添加tpye属性"></a>1.1 生成“分类”页并添加tpye属性</h2><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-4zfi0rmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-4zfi0rmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo new page categories<br></code></pre></td></tr></table></div></figure><p>成功后会提示：</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7p99jdmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-7p99jdmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">INFO  Created: ~/Documents/blog/source/categories/index.md<br></code></pre></td></tr></table></div></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-zshnemmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-zshnemmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: 文章分类<br>date: 2018-10-31 13:47:40<br>---<br></code></pre></td></tr></table></div></figure><p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gcorncmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-gcorncmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: 文章分类<br>date: 2018-10-31 13:47:40<br>type: &quot;categories&quot;<br>---<br></code></pre></td></tr></table></div></figure><p>保存并关闭文件。</p><h2 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h2><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- <a href="https://zhida.zhihu.com/search?q=web%E5%89%8D%E7%AB%AF&zhida_source=entity&is_preview=1">web前端</a>”下的 “-xxx ”分类）。</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-umxnnmmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-umxnnmmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: Hexo博客+Github[博客](https://zhida.zhihu.com/search?q=%E5%8D%9A%E5%AE%A2&amp;zhida_source=entity&amp;is_preview=1)教程：03添加分类，标签<br>date: 2018-11-01 14:17:46<br>categories: <br>- hexo<br>---<br></code></pre></td></tr></table></div></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p><h2 id="2、创建“标签”选项"><a href="#2、创建“标签”选项" class="headerlink" title="2、创建“标签”选项"></a>2、创建“标签”选项</h2><h2 id="2-1-生成“标签”页并添加tpye属性"><a href="#2-1-生成“标签”页并添加tpye属性" class="headerlink" title="2.1 生成“标签”页并添加tpye属性"></a>2.1 生成“标签”页并添加tpye属性</h2><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-fru26zmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-fru26zmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">$ hexo new page tags<br></code></pre></td></tr></table></div></figure><p>成功后会提示：</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-em4deomfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-em4deomfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">INFO  Created: ~/Documents/blog/source/tags/index.md<br></code></pre></td></tr></table></div></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-j24v97mfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-j24v97mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: 标签<br>date: 2018-10-31 13:47:40<br>---<br></code></pre></td></tr></table></div></figure><p>添加<code>type: &quot;tags&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ocz9ytmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-ocz9ytmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: 文章分类<br>date: 2018-10-31 13:47:40<br>type: &quot;tags&quot;<br>---<br></code></pre></td></tr></table></div></figure><p>保存并关闭文件。</p><h2 id="2-2-给文章添加“tags”属性"><a href="#2-2-给文章添加“tags”属性" class="headerlink" title="2.2 给文章添加“tags”属性"></a>2.2 给文章添加“tags”属性</h2><p>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code> <code>- 表单验证</code>就是这篇文章的标签了</p><figure class="highlight text"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-q5dqcxmfcwb3cs"></i><span>TEXT</span><div class="collapse show" id="collapse-q5dqcxmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: Hexo博客+Github博客教程：03添加分类，标签<br>date: 2018-11-01 14:17:46<br>categories: <br>- 基础知识<br>- hexo<br>tags:<br>- hexo<br>- github<br>- 博客<br>---<br></code></pre></td></tr></table></div></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p><p>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds&#x2F;post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<code>categories:</code>项了。</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p><p>教程结束，赶紧去设置吧！</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客域名有两种方法</title>
    <link href="/2024/09/22/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/22/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>#Hexo博客域名有两种方法</p><p>##第一种，直接部署在git库，直在博客source目录下创建一个文件名为CNAME的，在里面填上你的域名<br>例如我的:</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7561xtmfcwb3cs"></i><span>STYLUS</span><div class="collapse show" id="collapse-7561xtmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">zy<span class="hljs-selector-class">.lifu</span><span class="hljs-selector-class">.eu</span>.org<br></code></pre></td></tr></table></div></figure><p>登陆github网站,没中文可以用翻译。<br>找到Settings（设置）进入pages（页面）选择</p><p>Build and deployment(构建和部署)<br>下面选择你部署的网页在哪个分支，一般是main</p><p>再到你的域名里添加一条<br>CNAME<br>指向到你的</p><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nkuomjmfcwb3cs"></i><span>STYLUS</span><div class="collapse show" id="collapse-nkuomjmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">XXXXXX<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br><br></code></pre></td></tr></table></div></figure><p>XXXXXX换成你自已的github的用户名</p><p>第二种就是直接从git接取网站代码部署到cloudflare的Workers 和 Pages</p><p>新建Pages,然后绑定git拉取，很简单，然后在你的应用里自定义域，添加你的域名就可以<br>这用这方法国内好用一点点，访问速度要比直接部署在git要快！！</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github-hexo 如何添加自定义网页</title>
    <link href="/2024/09/22/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/github-hexo%20%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5/"/>
    <url>/2024/09/22/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/github-hexo%20%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="github-hexo-如何添加自定义网页"><a href="#github-hexo-如何添加自定义网页" class="headerlink" title="github-hexo 如何添加自定义网页"></a>github-hexo 如何添加自定义网页</h1><h3 id="Hexo自定义原理"><a href="#Hexo自定义原理" class="headerlink" title="Hexo自定义原理"></a>Hexo自定义原理</h3><p>Hexo 系列的博客中的文章都是经Hexo的主题渲染的静态网页。所以Hexo博客大部分都呈现出一种高度的统一化与规范化。不过 Hexo 提供了<strong>跳过渲染</strong>功能，使得我们可以直接在博客中放入自定义网页。</p><p>比如在博客中放入图片、自定义404.html、自定义About页面、简历等</p><h4 id="创建自定义网页"><a href="#创建自定义网页" class="headerlink" title="创建自定义网页"></a>创建自定义网页</h4><p>网页可以是自己编写的，也可以是别人现成的源码（下载喜欢的页面）。</p><p>网页编写完成后，在Hexo\source目录下创建一个文件夹（文件夹名称任意，比如我创建的是about这个文件夹，部署完成后，访问<a href="https://24.lifu.us.kg/about/">https://24.lifu.us.kg/about/即可看到效果，依此类推）</a></p><p>将 html 文件放置于此文件夹，并重命名为 index.html 。</p><h4 id="跳过渲染"><a href="#跳过渲染" class="headerlink" title="跳过渲染"></a><a href="#%E8%B7%B3%E8%BF%87%E6%B8%B2%E6%9F%93"></a>跳过渲染</h4><p>跳过渲染有下述两种方法：</p><ol><li>在html文件中添加跳过渲染指令</li></ol><blockquote><p>用编辑器打开放入\Hexo\source\创建的文件夹中的 index.html 文件，在开头添加如下代码即可</p></blockquote><figure class="highlight yaml"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5xzb4pmfcwb3cs"></i><span>YAML</span><div class="collapse show" id="collapse-5xzb4pmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">layout:</span> <span class="hljs-literal">false</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></div></figure><p>添加该指令后，执行 hexo g命令时便会跳过该 index.html文件，使得index.html不受当前 hexo 主题影响，完全是一个独立的网页，如果网页引用了 css 或 js，css 和 js 需使用外链或者将css js 文件放入index.html同目录下引用。</p><p>引用图片亦是如此</p><ol start="2"><li>在_config.yml文件中设置skip_render</li></ol><p>使用编辑器打开 Hexo 目录下的_config.yml文件，找到skip_render</p><p>skip_render一般有以下四种常用参数：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vivgeumfcwb3cs"></i><span>BASH</span><div class="collapse show" id="collapse-vivgeumfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">跳过<span class="hljs-built_in">source</span>目录下的 test.html: skip_render: test.html<br><br>跳过<span class="hljs-built_in">source</span>目录下 <span class="hljs-built_in">test</span> 文件夹内所有文件：skip_render: <span class="hljs-built_in">test</span>/*<br><br>跳过<span class="hljs-built_in">source</span>目录下 <span class="hljs-built_in">test</span> 文件夹内所有文件包括子文件夹以及子文件夹内的文件：skip_render: <span class="hljs-built_in">test</span>/**<br></code></pre></td></tr></table></div></figure><p>跳过多个路径：</p><figure class="highlight nestedtext"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ecr2iimfcwb3cs"></i><span>NESTEDTEXT</span><div class="collapse show" id="collapse-ecr2iimfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">skip_render</span><span class="hljs-punctuation">:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">test.html</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">test/*</span><br></code></pre></td></tr></table></div></figure><p>添加完成后便不会渲染指定文件&#x2F;文件夹。</p><ol start="3"><li>完成</li></ol><p>执行hexo g -d 发布，就可以在自己的网页上看到自定义页面了（可以制作一份自己的简历哦）。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键hexo部署并备份源到分支</title>
    <link href="/2024/09/16/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/github%E4%B8%80%E9%94%AEhexo%E9%83%A8%E7%BD%B2%E5%B9%B6%E5%A4%87%E4%BB%BD%E6%BA%90%E5%88%B0%E5%88%86%E6%94%AF/"/>
    <url>/2024/09/16/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/github%E4%B8%80%E9%94%AEhexo%E9%83%A8%E7%BD%B2%E5%B9%B6%E5%A4%87%E4%BB%BD%E6%BA%90%E5%88%B0%E5%88%86%E6%94%AF/</url>
    
    <content type="html"><![CDATA[<p>hexo博客每次写了新的文章，要部署到博客上<br>都要重复操作 </p><span id="more"></span><p>hexo c<br>hexo g<br>hexo d，<br>这三条命令！！</p><p>过于麻烦，于是写个巨简陋的脚本，减少点</p><p>工作量，这里可以创一个一键部署并备份到分支的脚，运行一个代码即可完成几条重复的命令！</p><p>先在本地仓库所在的文件路径下打开 Git Bash 使用 nano 或 vim 编辑器来创建和编辑文件。这里我们使用 nano 作为示例：</p><figure class="highlight crystal"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gb0m40mfcwb3cr"></i><span>CRYSTAL</span><div class="collapse show" id="collapse-gb0m40mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>nano lifu.sh<br><br></code></pre></td></tr></table></div></figure><p>##填入下面内容：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l97rxxmfcwb3cr"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-l97rxxmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><span class="hljs-comment">#清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br>hexo clean<br><br><span class="hljs-comment"># 命令用于生成静态文件，一般可以简写为 hexo g</span><br>hexo generate<br><br><span class="hljs-comment">#hexo server 命令用于启动本地服务器，一般可以简写为 hexo s</span><br><br><span class="hljs-comment">#hexo deploy 命令用于部署网站，一般可以简写为 hexo d</span><br><br>hexo deploy<br><br><span class="hljs-comment">#!/bin/bash     下面为备份到仓库</span><br><span class="hljs-comment"># 获取当前日期，格式为 YYYYMMDD</span><br><span class="hljs-attribute">current_date</span>=$(date +%Y%m%d)<br><br><span class="hljs-comment"># 添加所有变更到暂存区</span><br>git <span class="hljs-built_in">add</span> .<br><br><span class="hljs-comment"># 提交变更，包括当前日期</span><br>git commit -m <span class="hljs-string">&quot;updated<span class="hljs-variable">$&#123;current_date&#125;</span>_xk&quot;</span><br><br><span class="hljs-comment"># 推送到远程仓库的 befe 分支</span><br>git push origin befe<br><br></code></pre></td></tr></table></div></figure><p>##步骤3：保存并退出编辑器<br>按下 Ctrl+O 保存文件<br>按下 Enter 确认文件名<br>按下 Ctrl+X 退出编辑器</p><p>运行脚本<br>现在，每当你完成一系列更改并准备提交时，只需在终端运行：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-evseadmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-evseadmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./lifu.sh<br></code></pre></td></tr></table></div></figure><p>执行后自动部署新博文！将自动被添加、提交，并推送到远程仓库，一切操作一气呵成！</p><p>大家可以根据自己的需求修改变更记录内容。希望这个脚本能帮助你提升工作效率！</p><p>全自动执行完成！看到这里，你认为爽吗？？呵呵</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>上院李征集楹联-誓词接龙</title>
    <link href="/2024/01/01/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E4%B8%8A%E9%99%A2%E6%9D%8E%E5%BE%81%E9%9B%86%E6%A5%B9%E8%81%94-%E8%AA%93%E8%AF%8D%E6%8E%A5%E9%BE%99/"/>
    <url>/2024/01/01/%E7%94%9F%E6%B4%BB%E4%B8%8E%E6%97%A5%E5%B8%B8/%E4%B8%8A%E9%99%A2%E6%9D%8E%E5%BE%81%E9%9B%86%E6%A5%B9%E8%81%94-%E8%AA%93%E8%AF%8D%E6%8E%A5%E9%BE%99/</url>
    
    <content type="html"><![CDATA[<p>征集楹联、誓词接龙</p><p><img src="https://gitlab.com/libao21/tu/-/raw/main/pictures/2024/09/29_22_52_33_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240914221226.jpg" alt="微信图片_20240914221226"></p><p>一、楹联接龙</p><span id="more"></span><p>迎宾门联<br>1、同庆石桥欢迎上院嘉宾，佰群广场相聚李氏宗亲。横批：李氏迎宾（李海建）<br>2、同庆石桥欢迎上院嘉宾，佰群广场相聚李族宗亲。横批：李族迎宾（李海建）<br>3、上院花开八百年枝繁叶茂，石桥迎客，五十万协力同心。横批：暂缺（李荣）<br>4、上院李花开八百年来枝繁叶茂，石桥喜迎客，五十万人协力同心。横批：暂缺（李荣）<br>5、名门望族上院李，八百春秋续新篇。横批：日月同辉、唯我独尊（李万詹）<br>6、名门望族上院李，八百春秋续新篇。横批：一统江湖（李上培）<br>7、石长兰花喜迎三江族众，桥飞彩练恭候四海宗亲。诗香继世喜迎三江族众，阀阅传家恭候四海宗亲。裔出陇西贵胄晟公绵世泽，支繁天下承元始祖振家风。横批：热烈欢迎宗亲（李华义）<br>8、裔出陇西贵胄晟公绵世泽，支繁天下承元始祖振家风。（李华义）<br>9、名门望族启未来，上院李氏创辉煌。横批：石桥迎宾或者喜迎贵宾（李志福）<br>10、有天有地有日月，爱党爱国爱宗亲。横幅：李氏一家亲（李海友）<br>11、聚英贤、谋良策、共绘氏族千秋蓝图；论文武、博古今、同创宗系万世远景。横批:笃行致远（李向文）<br>12、迎西平嘉宾共商盛事，纳上院贤士齐振家邦。横批：迎宾纳贤。（李志深）<br>13、门迎宗亲共商发展，戸源上院万载辉煌。（横批）：陇西望族（李强）<br>14、四海手足荟聚蓬荜生辉！八方兄弟光临倒履相迎！横批：不醉无归（李新旺）<br>15、上迎盛世党为民众谋复兴，院宾同庆理通天下创伟业。横批：承前启后（李譍）<br>16、上院李氏一家亲，和谐团结中国人。（李华冰）<br>17、上院李氏一家亲，卧龙藏虎中国人。（李华冰）<br>18、聚众亲之力，建李族美好家院，集百贤之策，创上院发展大业。横批：振兴上院（李广高）<br>19、上院名族丁盛业厚四海创，八百春秋人才辈出世代传。横批：西平世第（李华康）<br>20、吉日迎宾，群策良谋兴望族；昌时逐梦，共商大计展鸿图。（李卿）<br>21、喜迎上院李氏宗亲，欢聚同庆世代相承。横批：共创辉煌（李鹏雲）<br>22、诗书继世名耀祖；忠孝持家业光宗。横批：流世久遠（李家权）<br>23、同宗同姓如期共聚；寻祖寻根此日联谊。横批：族沐恩光。（李家权）<br>24、</p><p>主席台联<br>1、上院儿女共千秋，李族人杰传万代。（李海建）<br>2、上院儿女共谋千秋，李族人杰世代相传。（李海建）<br>3、地覆天翻兴望族，星移斗换振名宗。换届英才兴望族，接班贤士振名宗。荐举英才兴上院，遴推贤士振西平（李华义）<br>4、<br>5、八百年历程、筚路蓝缕、披荊斩棘；五十万宗亲、继往开来、展趐高飞。   横批：开启新征程（李志福）<br>6、纳百川之流上院儿女齐汇鉴江添异彩；通千古之典李族英才共聚石桥创辉煌。（李上培）<br>7、传承祖德应出力时齐出力，谨遵族训得绕人处且绕人。横批：团结奋斗。（李志深）<br>8、承元衍派三房团结创辉煌千秋传颂，佰群广场群英聚会谋福祉万世欣佩。（李强）<br>9、上院地灵代代根繁叶茂！李氏人杰世世同气连枝！横批：薪火相传（李新旺）<br>10、上院李氏世代传承文脉长，家族辉煌荣耀显赫万古扬。（李亚欢）<br>11、上院李氏门庭光耀迎贵宾，家族昌隆礼乐和谐聚人心。横批：李氏迎宾（李亚欢）<br>12、源自唐封西平忠武王蕃衍千秋，裔出上院承元发三派昌盛万代   横批：李氏宗亲  （李学森）<br>13、春风化雨润桃李千秋栋梁兴中国，霓彩祥云飞玉龙四海华裔聚帝乡。横幅：桃李满天下（李伟光）<br>14、承前启后英才望族护国爱家功绩达四海，元始念宗建功立业再创辉煌声誉传九州。横批：和谐创荣（李冬生）<br>15、春风化雨润桃李千秋栋梁兴中国，霓彩祥云飞玉龙四海华裔聚帝乡。横幅：桃李满天下（李伟光）<br>16、上院喜腾飞，幸赖宗亲同努力；中华欣崛起，全凭统帅指航程。（李卿）<br>17、上绘蓝图举荐人才建千秋伟业；院蕴浩气改革机构开一代新风。横批：光大上院精神（李永强）<br>18、喜逢盛世枝繁叶茂李，四海升平世承祖德恩。横批：李院茶事（李秀贤）<br>19、上院辉煌人才辈出展鸿图，李氏兴旺群贤盛会续新篇。横批：上院李氏（李飞宁）<br>20、上院之李，顶天立地绽芳华；百群广场，群英显赫谋福祉。横批:绍华绽放                 （李向文）<br>21、同庆石桥喜迎家族英才，上院李兄弟欢聚义族事。横幅，迎宾纳贤（李亚胜）<br>22、同宗同族同心同德欢乐同庆，群子群孙群策群力幸会佰群。横批是：上院选礼            （李崇欢）<br>23、同宗同源同心同行同欢同庆，群子群孙群策群力群会群馨。（李光春）<br>24、西河清流代代悠，家谱厚重世无忧。李氏世袭香火旺，交竹新颜继业留。横批：世荣续香 （李福）<br><img src="https://gitea.com/lifuaini2019/picgo-tu/raw/branch/main/pic/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240914221226.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>生活与日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装docker说明</title>
    <link href="/2023/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/docker%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/docker%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p>之前讲过玩客云可以安装armbian与openwrt，但是并没有安装docker，因为玩客云的s905是32位的，可用的docker镜像比较少，所以没有折腾，最近发现了一个刷机即可使用docker的armbian镜像，就玩了一下，可以实现大部分的斐讯n1的功能。</p><p>有了omv5与docker丝毫不逊色N1的玩客云</p><p>让玩客云与N1一样出色不仅要omv还要docker</p><p>可以安装docker的armbian镜像docker_Armbian_20.05.4_Aml-s805_focal_current_5.7.0-rc5<br><a href="https://pan.baidu.com/s/132mbd05DE9wqYoRiw4dA4Q">https://pan.baidu.com/s/132mbd05DE9wqYoRiw4dA4Q</a><br>提取码：5wxi</p><p>镜像通过写盘工具写到u盘，插入到靠近网口的usb上，插上电源方可加载系统</p><p>第一次启动会很慢，稍安勿躁<br>启动以后，去路由器里拿到ip<br>用ssh工具登录<br>用户名是root<br>密码是1234<br>登录后要求修改root密码<br>输入密码1234<br>然后输入两次新密码，有复杂度要求，数字密码大写特殊符号等，你看着输吧</p><p>设置成功会要求新建用户，这里取消就可以了，不用新用户了</p><p>按ctrl c会中断</p><p>这时候系统还是在u盘了的</p><p>cd &#x2F;boot&#x2F;install<br>.&#x2F;install.sh<br>会把系统写入到emmc中</p><p>等待写入完毕会自动退出<br>拔下u盘，拔电重启</p><p>耐心等待启动完毕，ip大概率还是之前的ip，如果登陆不了就去路由器里确认。</p><p>再次登录成功，系统就刷好了</p><h2 id="安装samba实现共享"><a href="#安装samba实现共享" class="headerlink" title="安装samba实现共享"></a>安装samba实现共享</h2><p>插上移动硬盘或者u盘，我这里是一个u盘</p><p>需要分区格式化，我这里就不演示了，用fdisk或者parted分区，挂载</p><p>我挂在到了&#x2F;data目录上</p><p>安装samba</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-05vu8rmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-05vu8rmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update <br>apt install samba<br><span class="hljs-comment"># 设置用户</span><br>useradd zhangxiaoqi<br>smbpasswd -a zhangxiaoqi<br><span class="hljs-comment"># 123456</span><br></code></pre></td></tr></table></div></figure><p>配置共享的目录<br>nano  &#x2F;etc&#x2F;samba&#x2F;smb.conf</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hqdptymfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-hqdptymfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[wkyshare]<br>   comment = wky shares<br>   path = /data<br>   create mask = 0664<br>   directory mask = 0775<br>   <span class="hljs-built_in">read</span> only = No<br>   valid <span class="hljs-built_in">users</span> = zhangxiaoqi<br></code></pre></td></tr></table></div></figure><p>重启服务</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-bep1thmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-bep1thmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart smbd<br>systemctl <span class="hljs-built_in">enable</span> smbd<br><span class="hljs-comment"># 可以在局域网的win机器访问</span><br><span class="hljs-comment"># \\ip 查看共享是否正常</span><br></code></pre></td></tr></table></div></figure><p>就可以了安装docker</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-41ht22mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-41ht22mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br>apt install docker.io<br>docker info<br></code></pre></td></tr></table></div></figure><h2 id="下面是必装镜像"><a href="#下面是必装镜像" class="headerlink" title="下面是必装镜像"></a>下面是必装镜像</h2><p>安装portainer</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-srultymfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-srultymfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  -p 8000:8000 \<br>  -p 9000:9000 \<br>  -v /var/run/docker.sock:/var/run/docker.sock \<br>  -v /data/docker/portainer/data:/data \<br>  --name=portainer \<br>  --restart=always \<br>  portainer/portainer-ce<br><br></code></pre></td></tr></table></div></figure><p>安装openwrt<br>docker pull dreamwsbg&#x2F;openwrt:7.0<br>docker run -d –name&#x3D;”openwrt” –restart unless-stopped –network macnet –privileged dreamwsbg&#x2F;openwrt:7.0 &#x2F;sbin&#x2F;init</p><p>docker pull virking&#x2F;openwrt:20.04<br>ip link set eth0 promisc on<br>docker network create -d macvlan –subnet&#x3D;192.168.188.0&#x2F;24 –gateway&#x3D;192.168.188.1 -o parent&#x3D;eth0 macnet</p><p>启动一个openwrt容器<br>docker run -i -t -d –name&#x3D;openwrt –restart&#x3D;always –network&#x3D;macnet –privileged&#x3D;true virking&#x2F;openwrt:20.04 &#x2F;sbin&#x2F;init<br>docker run -d –name&#x3D;”openwrt” –restart unless-stopped –network macnet –privileged dreamwsbg&#x2F;openwrt:7.0 &#x2F;sbin&#x2F;init<br>编辑网卡<br>vi &#x2F;etc&#x2F;config&#x2F;network<br>内容如下，注意修改网段</p><p>config interface ‘loopback’<br>        option ifname ‘lo’<br>        option proto ‘static’<br>        option ipaddr ‘127.0.0.1’<br>        option netmask ‘255.0.0.0’</p><p>config globals ‘globals’<br>        option ula_prefix ‘fdd3:60d7:a044::&#x2F;48’</p><p>config interface ‘lan’<br>        option type ‘bridge’<br>        option ifname ‘eth0’<br>        option proto ‘static’<br>        option ipaddr ‘192.168.188.254’ #openwrt的IP地址，可自定义网段内任意IP，不发生冲突即可<br>        option netmask ‘255.255.255.0’<br>        option gateway ‘192.168.188.1’ #填写主路由的IP地址<br>        option dns ‘192.168.188.1’ #填写主路由的IP地址</p><p>config interface ‘vpn0’<br>        option ifname ‘tun0’<br>        option proto ‘none’</p><p>重启玩客云等待openwrt启动后<br>账密：root-password</p><p>回到玩客云shell<br> &#x2F;etc&#x2F;network&#x2F;interfaces &#x2F;etc&#x2F;network&#x2F;interfaces.bak<br> vi &#x2F;etc&#x2F;network&#x2F;interfaces</p><p>添加如下内容<br>auto macvlan<br>iface macvlan inet static<br>  address 192.168.188.8<br>  netmask 255.255.255.0<br>  gateway 192.168.188.1<br>  dns-nameservers 192.168.188.1<br>  pre-up ip link add macvlan link eth0 type macvlan mode bridge<br>  post-down ip link del macvlan link eth0 type macvlan mode bridge</p><p>Bushu transmission</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-p6v69omfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-p6v69omfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker run \<br>  -d \<br>  --name=transmission \<br>  -e USERNAME=admin \<br>  -e PASSWORD=admin \<br>  -e PUID=1000 \<br>  -e PGID=1000 \<br>  -p 9091:9091 \<br>  -p 51413:51413 \<br>  -p 51413:51413/udp \<br>  -v /data/transmission/config:/config \<br>  -v /data:/downloads \<br>  -v /data/transmission/watch:/watch \<br>  --restart unless-stopped \<br>lsioarmhf/transmission<br><br></code></pre></td></tr></table></div></figure><p>给transmission安装界面<br>到docker的shell中<br>wget <a href="https://gitee.com/culturist/transmission-web-control/raw/master/release/install-tr-control-gitee.sh">https://gitee.com/culturist/transmission-web-control/raw/master/release/install-tr-control-gitee.sh</a><br>bash install-tr-control-cn.sh</p><p>网盘nextcloud</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3uqrhfmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-3uqrhfmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>--name nextcloud \<br>-p 8085:80 \<br>-v /data/docker/nextcloud/html:/var/www/html \<br>-e TZ=Asia/Shanghai \<br>--restart unless-stopped \<br>nextcloud<br><br></code></pre></td></tr></table></div></figure><p>blog</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-rq1v5zmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-rq1v5zmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 80:80 --name typecho -v <span class="hljs-string">&quot;/data/tyepcho&quot;</span>:/var/www/html yangxuan8282/typecho:php-arm<br></code></pre></td></tr></table></div></figure><p>aria2</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-43cdbumfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-43cdbumfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>    --name aria2-pro \<br>    --restart unless-stopped \<br>    --log-opt max-size=1m \<br>    --network host \<br>    -e PUID=1000 \<br>    -e PGID=1000 \<br>    -e RPC_SECRET=12345 \<br>    -e RPC_PORT=6800 \<br>    -e LISTEN_PORT=6888 \<br>    -v /data/docker/aria2/config:/config \<br>    -v /data/downloads:/downloads \<br>    p3terx/aria2-pro<br></code></pre></td></tr></table></div></figure><p>浏览器安装插件连接 6800端口即可</p><p>web ui</p><p><a href="https://github.com/mayswind/AriaNg">https://github.com/mayswind/AriaNg</a></p><p>同步工具</p><p>verysync</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-e13b95mfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-e13b95mfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>--restart=unless-stopped \<br>--name verysync \<br>-v /data/verysync:/data \<br>-p 8886:8886 \<br>unwenliu/verysync:armv7<br></code></pre></td></tr></table></div></figure><p>qbittorrent</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8qkbnpmfcwb3cm"></i><span>BASH</span><div class="collapse show" id="collapse-8qkbnpmfcwb3cm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>  --name=qbittorrent \<br>  -e PUID=1000 \<br>  -e PGID=1000 \<br>  -e TZ=Aisa/Shanghai \<br>  -e WEBUI_PORT=8080 \<br>  --network host \<br>  -v /data/docker/qb/config:/config \<br>  -v /data/qb_downloads:/downloads \<br>  --restart unless-stopped \<br>  ghcr.io/linuxserver/qbittorrent<br></code></pre></td></tr></table></div></figure><p>有了docker，玩客云确实一个不错的nas了</p><p>相比直接安装openwrt，可用性会高很多，也经得起折腾</p><p>希望大家不要瞧不起玩客云，哈</p><p>玩客云的终点就在这里了，已经是极限了</p><p>本期视频就到这里了，我是张大七，我们下期见。</p>]]></content>
    
    
    <categories>
      
      <category>服务器使用命令</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用服务器使用的命令集合</title>
    <link href="/2023/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
    <url>/2023/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>重启服务器（Reboot）：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vuckefmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-vuckefmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br><br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于重新启动服务器，将服务器关机然后再次启动。</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-00cbo7mfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-00cbo7mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于重新启动服务器，将服务器关机然后再次启动。</p><p>关闭服务器（Shutdown）：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2j8c56mfcwb3cn"></i><span>EBNF</span><div class="collapse show" id="collapse-2j8c56mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">arduino</span><br></code></pre></td></tr></table></div></figure><figure class="highlight arcade"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hk023nmfcwb3cn"></i><span>ARCADE</span><div class="collapse show" id="collapse-hk023nmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo shutdown -h <span class="hljs-built_in">now</span><br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于立即关闭服务器，即刻停止服务器的运行。</p><p>查看服务器状态（Uptime）：</p><p>bash</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-441zi9mfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-441zi9mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uptime</span><br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于查看服务器的运行时间和负载。</p><p>查看服务器资源使用情况（Top）：</p><p>css</p><figure class="highlight coq"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-utb292mfcwb3cn"></i><span>COQ</span><div class="collapse show" id="collapse-utb292mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">top</span><br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于实时监视服务器的资源使用情况，包括CPU、内存和进程等。</p><p>查看磁盘空间使用情况（df）：</p><p>bash</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-vz481smfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-vz481smfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于查看服务器上各个文件系统的磁盘空间使用情况。</p><p>查看内存使用情况（free）：</p><p>c</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-h8jeifmfcwb3cn"></i><span>EBNF</span><div class="collapse show" id="collapse-h8jeifmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">free -m</span><br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于查看服务器的内存使用情况，包括空闲内存和已用内存。</p><p>查看网络连接（netstat）：</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kse9cymfcwb3cn"></i><span>EBNF</span><div class="collapse show" id="collapse-kse9cymfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -tuln</span><br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于查看服务器上的网络连接和端口监听状态。</p><p>查看日志文件（tail）：</p><p>bash</p><figure class="highlight excel"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-t9sg77mfcwb3cn"></i><span>EXCEL</span><div class="collapse show" id="collapse-t9sg77mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">tail -<span class="hljs-built_in">n</span> <span class="hljs-number">50</span> /<span class="hljs-built_in">var</span>/<span class="hljs-built_in">log</span>/syslog<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于查看指定日志文件的最后50行日志内容。</p><p>查找文件（find）：</p><p>lua</p><figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-qpq0dimfcwb3cn"></i><span>PGSQL</span><div class="collapse show" id="collapse-qpq0dimfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">find /<span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/<span class="hljs-keyword">search</span> -<span class="hljs-type">name</span> &quot;filename&quot;<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于在指定路径下查找文件。</p><p>创建文件夹（mkdir）：</p><h3 id="解释：这个命令用于创建新的文件夹或目录。"><a href="#解释：这个命令用于创建新的文件夹或目录。" class="headerlink" title="解释：这个命令用于创建新的文件夹或目录。"></a>解释：这个命令用于创建新的文件夹或目录。</h3><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i58puimfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-i58puimfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /path/to/directory<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于创建新的文件夹或目录。</p><p>复制文件（cp）：</p><p>bash</p><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kwtmr5mfcwb3cn"></i><span>AVRASM</span><div class="collapse show" id="collapse-kwtmr5mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> sourcefile destination<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于复制文件或目录到指定位置。</p><p>移动文件（mv）：</p><p>bash</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-db9smhmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-db9smhmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> sourcefile destination<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于移动文件或目录到指定位置。</p><p>删除文件（rm）：</p><p>bash</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3jqi2wmfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-3jqi2wmfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> filename<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于删除指定的文件。</p><p>查看文件内容（cat）：</p><p>bash</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mvk170mfcwb3cn"></i><span>BASH</span><div class="collapse show" id="collapse-mvk170mfcwb3cn"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> filename<br></code></pre></td></tr></table></div></figure><p>解释：这个命令用于查看文件的内容。</p><p>tail -n 50 &#x2F;var&#x2F;log&#x2F;syslog</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">解释：这个命令用于查看指定日志文件的最后50行日志内容。<br></code></pre></td></tr></table></figure><p>find &#x2F;path&#x2F;to&#x2F;search -name “filename”</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">解释：这个命令用于在指定路径下查找文件。<br></code></pre></td></tr></table></figure><p>mkdir &#x2F;path&#x2F;to&#x2F;directory</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">解释：这个命令用于创建新的文件夹或目录。<br></code></pre></td></tr></table></figure><p>cp sourcefile destination</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">解释：这个命令用于复制文件或目录到指定位置。<br></code></pre></td></tr></table></figure><p>mv sourcefile destination</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">解释：这个命令用于移动文件或目录到指定位置。<br></code></pre></td></tr></table></figure><p>rm filename</p><pre><code class="hljs">解释：这个命令用于删除指定的文件。</code></pre>]]></content>
    
    
    <categories>
      
      <category>服务器使用命令</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>github克隆到本地2023前个人博客地址</title>
    <link href="/2023/09/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/github%E5%85%8B%E9%9A%86%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <url>/2023/09/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/github%E4%BD%BF%E7%94%A8/github%E5%85%8B%E9%9A%86%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<p>更多信息: <a href="https://23.lifu.us.kg/">我的个人博客2023</a></p><p>第1步：查看 或者 生成一个SSH-Key</p><figure class="highlight angelscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-6l4jfamfcwb3cr"></i><span>ANGELSCRIPT</span><div class="collapse show" id="collapse-6l4jfamfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh-keygen -t rsa -C <span class="hljs-symbol">xxx@</span>xxx.com<br></code></pre></td></tr></table></div></figure><p> 将 “<a href="mailto:&#120;&#120;&#x78;&#x40;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;">&#120;&#120;&#x78;&#x40;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;</a>“ 替换为你自己GitHub的邮箱地址<br>执行后一直回车即可</p><p>第五步：验证是否设置成功</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-lmw4w9mfcwb3cr"></i><span>NGINX</span><div class="collapse show" id="collapse-lmw4w9mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></div></figure><p>可以在网上创建仓库名例如叫：<br>2024bk<br>在本地用git命令执行：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xt9kyvmfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-xt9kyvmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:xxx/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>xxx改成自已的名例如我的名是lifuaini2019</p><p>在本地用git命令执行：</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a4y8hhmfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-a4y8hhmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>就会克隆2024bk这仓库到本地</p><p>如果用</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2nxgctmfcwb3cr"></i><span>CRMSH</span><div class="collapse show" id="collapse-2nxgctmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> befe https://github.com/lifuaini2019/<span class="hljs-number">2024</span>bk.git<br></code></pre></td></tr></table></div></figure><p>会克隆分支befe所有文件到本地<br>(我用这个路径来备份hexo博客源文件)</p><p>cd 2024bk 或到目录下执行git</p><p>上传文件:</p><p>添加所有文件到暂存区：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-gzii3dmfcwb3cr"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-gzii3dmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br><br></code></pre></td></tr></table></div></figure><p>后面的.是代表所有文件，如果要指定的例如：<br>例如，如果你要添加一个名为 example.txt 的文件，你可以这样做：</p><figure class="highlight bash"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-du96ipmfcwb3cr"></i><span>BASH</span><div class="collapse show" id="collapse-du96ipmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, World!&quot;</span> &gt; example.txt<br></code></pre></td></tr></table></div></figure><p>使用 git add 命令将新文件添加到 Git 的暂存区：</p><figure class="highlight routeros"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-hsd8x8mfcwb3cr"></i><span>ROUTEROS</span><div class="collapse show" id="collapse-hsd8x8mfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> example.txt<br></code></pre></td></tr></table></div></figure><p>对暂存区中的更改进行提交，并添加一个提交信息：</p><figure class="highlight nginx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-3bwc2fmfcwb3cr"></i><span>NGINX</span><div class="collapse show" id="collapse-3bwc2fmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;上传文件说明随便写&quot;</span><br></code></pre></td></tr></table></div></figure><p>如果是全部文件直接执行上面的git add .即可<br>对添加到暂存区的文件进行提交，并添加一个提交信息：</p><p><code>git commit -m &quot;提交信息&quot;</code></p><p>将你的提交推送到远程仓库的 main 分支（或 master 分支）：</p><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-i0g5mzmfcwb3cr"></i><span>MAXIMA</span><div class="collapse show" id="collapse-i0g5mzmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> main<br><br></code></pre></td></tr></table></div></figure><p>执行完以上步骤后，你将成功将本地仓库中的所有文件提交到远程仓库的 main 分支（或 master 分支）。<br>我的备份分支名叫befe</p><figure class="highlight maxima"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1lcmycmfcwb3cr"></i><span>MAXIMA</span><div class="collapse show" id="collapse-1lcmycmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> befe<br></code></pre></td></tr></table></div></figure><p>如果没有分支可以操作创建分支<br>使用以下命令来创建并切换到名为 bepe 的新分支：</p><figure class="highlight armasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-kl05rlmfcwb3cr"></i><span>ARMASM</span><div class="collapse show" id="collapse-kl05rlmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> befe<br></code></pre></td></tr></table></div></figure><p>我最后执行上面这一行代码即可结束部署！</p><p>下面为博客代码的三步执行即可更新<br>！</p><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-jagvqjmfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-jagvqjmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo c</span><br></code></pre></td></tr></table></div></figure><figure class="highlight css"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xqbq7emfcwb3cr"></i><span>CSS</span><div class="collapse show" id="collapse-xqbq7emfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br></code></pre></td></tr></table></div></figure><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-0wo19dmfcwb3cr"></i><span>EBNF</span><div class="collapse show" id="collapse-0wo19dmfcwb3cr"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></div></figure><p>这样你在部署好hexo博客代码后，再执行上面的备份，就会在befe分支下有着你铁博客源代码了！呵呵简单吧！~</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>github使用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>装hexo 装不上,最后使用 yarn才能成功</title>
    <link href="/2023/09/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/git%E8%A3%85hexo%20%E8%A3%85%E4%B8%8D%E4%B8%8A,%E6%9C%80%E5%90%8E%E4%BD%BF%E7%94%A8%20yarn%E6%89%8D%E8%83%BD%E6%88%90%E5%8A%9F/"/>
    <url>/2023/09/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/git%E8%A3%85hexo%20%E8%A3%85%E4%B8%8D%E4%B8%8A,%E6%9C%80%E5%90%8E%E4%BD%BF%E7%94%A8%20yarn%E6%89%8D%E8%83%BD%E6%88%90%E5%8A%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="装hexo-装不上-最后使用-yarn才能成功"><a href="#装hexo-装不上-最后使用-yarn才能成功" class="headerlink" title="装hexo 装不上,最后使用 yarn才能成功"></a>装hexo 装不上,最后使用 yarn才能成功</h1><h2 id="切换回默认-npm-注册表："><a href="#切换回默认-npm-注册表：" class="headerlink" title="切换回默认 npm 注册表："></a><strong>切换回默认 npm 注册表</strong>：</h2><p>在命令行中，使用以下命令切换回默认的 npm 注册表：</p><figure class="highlight arduino"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9e2zqmmfcwb3cs"></i><span>ARDUINO</span><div class="collapse show" id="collapse-9e2zqmmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmjs.org</span><br></code></pre></td></tr></table></div></figure><p>然后再次尝试全局安装 Hexo：</p><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-a9iymrmfcwb3cs"></i><span>AVRASM</span><div class="collapse show" id="collapse-a9iymrmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></div></figure><h2 id="npm-官方镜像的国内镜像-："><a href="#npm-官方镜像的国内镜像-：" class="headerlink" title="** npm 官方镜像的国内镜像**："></a>** npm 官方镜像的国内镜像**：</h2><figure class="highlight arduino"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-9rk356mfcwb3cs"></i><span>ARDUINO</span><div class="collapse show" id="collapse-9rk356mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmmirror.com</span><br></code></pre></td></tr></table></div></figure><p>然后再次尝试全局安装 Hexo。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><ol><li><strong>创建一个文件夹用于存放你的博客</strong>：</li></ol><ul><li>打开命令提示符或终端，切换到你想存放 Hexo 博客的目录，然后创建一个新的文件夹，例如：</li></ul><figure class="highlight perl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-mp12lzmfcwb3cs"></i><span>PERL</span><div class="collapse show" id="collapse-mp12lzmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">my</span>-hexo-blog<br>cd <span class="hljs-keyword">my</span>-hexo-blog<br></code></pre></td></tr></table></div></figure><p>或者</p><figure class="highlight perl"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-xbpwgymfcwb3cs"></i><span>PERL</span><div class="collapse show" id="collapse-xbpwgymfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">my</span>-hexo-blog<br>cd <span class="hljs-keyword">my</span>-hexo-blog<br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>全局安装 Hexo</strong>：</li></ol><ul><li>在你的博客文件夹中，使用 npm 安装 Hexo：</li></ul><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-o4qamlmfcwb3cs"></i><span>AVRASM</span><div class="collapse show" id="collapse-o4qamlmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></div></figure><p>或者</p><figure class="highlight avrasm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-l8q5l2mfcwb3cs"></i><span>AVRASM</span><div class="collapse show" id="collapse-l8q5l2mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>初始化 Hexo 博客</strong>：</li></ol><ul><li>使用 Hexo 初始化你的博客文件夹：</li></ul><figure class="highlight csharp"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-henyvcmfcwb3cs"></i><span>CSHARP</span><div class="collapse show" id="collapse-henyvcmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></div></figure><ol start="4"><li><strong>安装依赖</strong>：</li></ol><ul><li>进入博客文件夹，然后安装项目依赖：</li></ul><figure class="highlight cmake"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-c5cmu1mfcwb3cs"></i><span>CMAKE</span><div class="collapse show" id="collapse-c5cmu1mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></div></figure><h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><ol><li><strong>生成静态文件</strong>：</li></ol><ul><li>在你的博客文件夹中，运行以下命令来生成静态文件：</li></ul><figure class="highlight verilog"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-7642prmfcwb3cs"></i><span>VERILOG</span><div class="collapse show" id="collapse-7642prmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></div></figure><ol start="2"><li><strong>启动本地服务器</strong>：</li></ol><ul><li>运行以下命令来启动本地服务器并预览你的博客：</li></ul><figure class="highlight axapta"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-j3fnf4mfcwb3cs"></i><span>AXAPTA</span><div class="collapse show" id="collapse-j3fnf4mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></div></figure><ul><li>打开浏览器并访问 <code>http://localhost:4000</code>。</li></ul><h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><ol><li>*配置 <code>_config.yml</code>*：</li></ol><ul><li>在你的博客文件夹中，编辑 <code>_config.yml</code> 文件来配置部署信息。</li></ul><ol start="2"><li><strong>安装部署插件</strong>：</li></ol><ul><li>安装一个部署插件，比如 <code>hexo-deployer-git</code>：</li></ul><figure class="highlight ada"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-prc4bdmfcwb3cs"></i><span>ADA</span><div class="collapse show" id="collapse-prc4bdmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></div></figure><ol start="3"><li><strong>部署到远程服务器</strong>：</li></ol><ul><li>运行以下命令来部署你的博客：</li></ul><figure class="highlight ebnf"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-5479gvmfcwb3cs"></i><span>EBNF</span><div class="collapse show" id="collapse-5479gvmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></div></figure><p>这样，你就完成了 Hexo 的安装和配置。你可以按照 Hexo 的官方文档来进一步学习如何使用它，包括主题定制、插件使用等。祝你写作愉快！</p><p>用了上面方法都不好用，最后用了阿里云的源，接下来改用这个软件安装才能成功</p><h3 id="使用-yarn"><a href="#使用-yarn" class="headerlink" title="使用 yarn"></a>使用 yarn</h3><p>如果你遇到的问题持续存在，可以考虑使用 yarn 来代替 npm，因为 yarn 通常使用 HTTPS 代理而不是直接连接到 npm 注册表：</p><figure class="highlight x86asm"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ghj75xmfcwb3cs"></i><span>X86ASM</span><div class="collapse show" id="collapse-ghj75xmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">npm install -g yarn<br>yarn <span class="hljs-meta">global</span> <span class="hljs-keyword">add</span> hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></div></figure><p>尝试上述方法之一，应该能够解决你的问题并允许你安装 Hexo。如果问题依旧，你可能需要检查你的网络设置，确保你的网络可以访问外部资源。</p><p>最后再全局安装</p><figure class="highlight jsx"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-d5am8kmfcwb3cs"></i><span>JSX</span><div class="collapse show" id="collapse-d5am8kmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm install -g hexo-cli<br></code></pre></td></tr></table></div></figure><h1 id="记录一下写文章的名字"><a href="#记录一下写文章的名字" class="headerlink" title="记录一下写文章的名字"></a>记录一下写文章的名字</h1><p>这是在文章根目录下_posts建一个文章</p><figure class="highlight actionscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-nb2v7tmfcwb3cs"></i><span>ACTIONSCRIPT</span><div class="collapse show" id="collapse-nb2v7tmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;我的新文章&quot;</span><br></code></pre></td></tr></table></div></figure><p>这是在文章根目录下_posts建一个文章,再移动到 :技术文章&#x2F;我的新文章5.md</p><figure class="highlight actionscript"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-2zifjemfcwb3cs"></i><span>ACTIONSCRIPT</span><div class="collapse show" id="collapse-2zifjemfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;我的新文章5&quot;</span> -s -p 技术文章/我的新文章<span class="hljs-number">5.</span>md<br></code></pre></td></tr></table></div></figure><p>最后才成功</p><p>如果用hexo init安装失败可以删除原来的再用下面这行</p><figure class="highlight crmsh"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-8aha06mfcwb3cs"></i><span>CRMSH</span><div class="collapse show" id="collapse-8aha06mfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">hexo init --<span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com.cnpmjs.org/hexojs/hexo-starter.git<br></code></pre></td></tr></table></div></figure><p>最后更新博客时出现：<br>&#96;<br>Run</p><h2 id="git-config-–global-user-email-“-121-111-117-x40-x65-x78-97-x6d-x70-108-x65-x2e-x63-x6f-109-“-git-config-–global-user-name-“Your-Name”-类似上面这样的话，必须执行下面的全局设置用户名和邮箱："><a href="#git-config-–global-user-email-“-121-111-117-x40-x65-x78-97-x6d-x70-108-x65-x2e-x63-x6f-109-“-git-config-–global-user-name-“Your-Name”-类似上面这样的话，必须执行下面的全局设置用户名和邮箱：" class="headerlink" title="  git config –global user.email “&#121;&#111;&#117;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;“  git config –global user.name “Your Name”&#96;类似上面这样的话，必须执行下面的全局设置用户名和邮箱："></a>  git config –global user.email “<a href="mailto:&#121;&#111;&#117;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#121;&#111;&#117;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;</a>“<br>  git config –global user.name “Your Name”<br>&#96;<br>类似上面这样的话，必须执行下面的<br>全局设置用户名和邮箱：<br><figure class="highlight stylus"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-ji36simfcwb3cs"></i><span>STYLUS</span><div class="collapse show" id="collapse-ji36simfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;lifuaini2019&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;lifuaini2019@gmail.com&quot;</span><br></code></pre></td></tr></table></div></figure></h2><p>如果只在当前仓库设置用户名和邮箱：</p><figure class="highlight pgsql"><i class="iconfont icon-code" type="button" data-toggle="collapse" data-target="#collapse-1w7tgnmfcwb3cs"></i><span>PGSQL</span><div class="collapse show" id="collapse-1w7tgnmfcwb3cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name &quot;lifuaini2019&quot;<br>git config <span class="hljs-keyword">user</span>.email &quot;lifuaini2019@gmail.com&quot;<br></code></pre></td></tr></table></div></figure>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>修改hexo主页</title>
    <link href="/2023/09/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E4%BF%AE%E6%94%B9hexo%E4%B8%BB%E9%A1%B5/"/>
    <url>/2023/09/23/hexo%E4%B8%8Egit%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/hexo%E5%8D%9A%E5%AE%A2%E4%B8%8E%E4%B8%BB%E9%A2%98/%E4%BF%AE%E6%94%B9hexo%E4%B8%BB%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<p>最近闲来无事，就想着用github page+hexo搭建一个个人博客，以便于储存自己平时的笔记资料。我发现网络上大部分此类的个人博客，主页（就是<a href="http://xxxx.github.io）或者home点进去都是文章列表，而我则希望主页进去以及点击home之后。显示的内容是对博客的介绍，或者是对自己本人的介绍，而不是我的博文列表。因此这就需要我对博客的首页进行自定义设置。但我在网上看了一圈，大部分的首页配置内容都是在讲怎么让博文以摘要内容形式排列等等，这并不满足我的需求。因此我就自己琢磨着用了以下这个方法：">http://xxxx.github.io）或者home点进去都是文章列表，而我则希望主页进去以及点击home之后。显示的内容是对博客的介绍，或者是对自己本人的介绍，而不是我的博文列表。因此这就需要我对博客的首页进行自定义设置。但我在网上看了一圈，大部分的首页配置内容都是在讲怎么让博文以摘要内容形式排列等等，这并不满足我的需求。因此我就自己琢磨着用了以下这个方法：</a></p><ol start="0"><li>在写这篇文章时，我默认我的读者能至少有非常新手级别的hexo配置经验。因此如果对于hexo操作部分有问题的话，知乎或者其他论坛有很详细的小白教程，我就不再班门弄斧了。</li></ol><p>创建独立的home文件：<br>我使用的是Next主题，在该主题的配置文件中（hexo&#x2F;theme&#x2F;next&#x2F;_config.yml），关于home的配置是：</p><p>home: &#x2F; || fa fa-home<br>这里home默认的link是‘&#x2F;’，我并不知道这个是在哪里，所以没法设置。因此我的想法是我新建一个叫home的page，然后把home指向这个page，在manu部分把关于home的修改为：</p><p>home: &#x2F;home&#x2F; || fa fa-home<br>然后在git bash运行</p><p>hexo new page “home”<br>之后在‘hexo&#x2F;source’中应该能找到home文件夹，并且包含index.md文件。修改index.md文件，将front matter部分设置为：</p><hr><h2 id="title-Homedate-2020-05-05-19-55-15type-“Home”"><a href="#title-Homedate-2020-05-05-19-55-15type-“Home”" class="headerlink" title="title: Homedate: 2020-05-05 19:55:15type: “Home”"></a>title: Home<br>date: 2020-05-05 19:55:15<br>type: “Home”</h2><p>这一步你可以设置自己想要的内容，我这里只是简单介绍一下。完成这一步之后，运行</p><p>hexo -s<br>将里面的 <a href="http://localhost:4000/">http://localhost:4000</a> 黏贴到浏览器，点击home你会发现出现的是有home字样的空白页而不再是文章列表。此时运行</p><p>hexo d -g<br>将你的改变部署到博客上。之后你要对home做的任何改变只要在home的index.md里添加即可。</p><ol start="2"><li>配置首页：</li></ol><p>第一步之后你会发现，尽管home可以自己设置了，但打开主页时出现的依旧是文章列表，也就是当你打开<a href="http://xxxx.github.io时出现的依旧是文章列表。这就需要我们对打开后出现的首页（不知道这个叙述对不对）也进行配置。我查了hexo的文档，打开个人博客时，主页是index.html页面，但是Next主题并没有这个文件。因此我的想法是，我人为再新建一个page，把这个page指定为启动时的首页。这里我的方法是，首先我新建一个叫intro的page：">http://xxxx.github.io时出现的依旧是文章列表。这就需要我们对打开后出现的首页（不知道这个叙述对不对）也进行配置。我查了hexo的文档，打开个人博客时，主页是index.html页面，但是Next主题并没有这个文件。因此我的想法是，我人为再新建一个page，把这个page指定为启动时的首页。这里我的方法是，首先我新建一个叫intro的page：</a></p><p>hexo new page “home”<br>然后在hexo&#x2F;config.yml（注意这次是hexo的配置文件，不是主题配置文件）中找到index_generator，在path中填入你所需要指向的位置。在我的例子里，我填的是</p><p>index_generator:<br>  path: ‘&#x2F;intro&#x2F;‘<br>  per_page: 10<br>  order_by: -date<br>注意冒号后的空格，再打开hexo&#x2F;source&#x2F;intro&#x2F;index.md，将front matter修改为</p><hr><h2 id="title-introdate-2020-05-05-21-39-53type-“intro”permalink-index-html"><a href="#title-introdate-2020-05-05-21-39-53type-“intro”permalink-index-html" class="headerlink" title="title: introdate: 2020-05-05 21:39:53type: “intro”permalink: index.html"></a>title: intro<br>date: 2020-05-05 21:39:53<br>type: “intro”<br>permalink: index.html</h2><p>再检查配置是否成功：运行hexo -s，将地址打开，就会发现当域名为<a href="http://xxxx.github.io时指向的是intro,而不是之前的博文列表.此时,返回git/">http://xxxx.github.io时指向的是intro，而不是之前的博文列表。此时，返回git</a> bash, ctrl+c退出hexo -s, 然后hexo d -g部署我们的改变。之后你可以在intro里添加任何你想要的内容，当然我的出发点是希望首页和home一致，所以我的话就会把两者设置成一样。</p><p>其实我一开始的尝试是把path指向home文件，但我发现当我用home相关文件进行上述处理时，点击home出现了404。也许home文件不能被指向两次（不知道这个说法是否准确）。因此我就改为新增一个intro文件，并将该文件作为首页文件。如果想要intro和home内容一致，那么就把他们两给做成一样就可以了，当然也可以做成不一样的样子。</p><p>我自己选择搭建个人博客的原因，一方面是希望这个过程能更有效地督促自己把该看的文章，该总结的资料给弄完。毕竟搭个个人博客的过程对我这个新手来说也不容易，这也就强行给自己安排了沉没成本（博客都搭了，我还拖着不做，实在是良心过不去…）。另一方面也是希望增加一门手艺，平时在搜索资料时，我发现大部分的精华内容一般都在个人博客（网站）上，看上去很酷炫的样子。因此我就打算在github page的基础上搭建一个个人博客来记录我自己的一些内容。</p><p>由于我自己没有CS，开发或者框架搭建的背景，并且目前我也还在摸索之中，所以有些地方可能做的不是很妥当。对于我来说，我用的方法能够满足自己的需要就行了，至于优化或者逻辑啥的就不那么看重（这个做法其实不好…但无奈这些毕竟不是我主业，而且的确能力和时间有限）。因此如果你和我一样是新手，也有同样的问题，那么希望这个文章能够给你带来一些启发；如果你是专业大佬，原谅我能力有限，我希望这个文章能抛砖引玉，你们的想法和建议对我来说也是很好的经验。</p>]]></content>
    
    
    <categories>
      
      <category>hexo与git学习日记</category>
      
      <category>hexo博客与主题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
